{
    "name": "astronomer",
    "displayName": "Astronomer",
    "description": "A Pulumi package for creating and managing Astronomer Cloud resources",
    "keywords": [
        "pulumi",
        "astronomer",
        "category/infrastructure"
    ],
    "homepage": "https://github.com/ryan-pip/pulumi-astronomer",
    "license": "Apache-2.0",
    "attribution": "This Pulumi package is based on the [`astro` Terraform Provider](https://github.com/astronomer/terraform-provider-astro).",
    "repository": "https://github.com/ryan-pip/pulumi-astronomer",
    "logoUrl": "https://raw.githubusercontent.com/ryan-pip/pulumi-astronomer/main/docs/astronomer.svg",
    "pluginDownloadURL": "github://api.github.com/ryan-pip/pulumi-astronomer",
    "publisher": "ryan-pip",
    "meta": {
        "moduleFormat": "(.*)(?:/[^/]*)"
    },
    "language": {
        "csharp": {
            "packageReferences": {
                "Pulumi": "3.*"
            },
            "compatibility": "tfbridge20",
            "rootNamespace": "RyanPip"
        },
        "go": {
            "importBasePath": "github.com/ryan-pip/pulumi-astronomer/sdk/go/astronomer",
            "generateResourceContainerTypes": true,
            "generateExtraInputTypes": true
        },
        "java": {
            "basePackage": "com.ryan-pip",
            "buildFiles": "",
            "gradleNexusPublishPluginVersion": "",
            "gradleTest": ""
        },
        "nodejs": {
            "packageName": "@ryan-pip/pulumi_astronomer",
            "packageDescription": "A Pulumi package for creating and managing Astronomer Cloud resources. Based on terraform-provider-astro: version v0.3.0",
            "readme": "\u003e This provider is a derived work of the [Terraform Provider](https://github.com/astronomer/terraform-provider-astro)\n\u003e distributed under [MPL 2.0](https://www.mozilla.org/en-US/MPL/2.0/). If you encounter a bug or missing feature,\n\u003e first check the [`pulumi-astronomer` repo](https://github.com/ryan-pip/pulumi-astronomer/issues); however, if that doesn't turn up anything,\n\u003e please consult the source [`terraform-provider-astro` repo](https://github.com/astronomer/terraform-provider-astro/issues).",
            "dependencies": {
                "@pulumi/pulumi": "^3.0.0"
            },
            "devDependencies": {
                "@types/mime": "^2.0.0",
                "@types/node": "^10.0.0"
            },
            "compatibility": "tfbridge20",
            "disableUnionOutputTypes": true
        },
        "python": {
            "packageName": "pulumi_astronomer",
            "requires": {
                "pulumi": "\u003e=3.0.0,\u003c4.0.0"
            },
            "readme": "\u003e This provider is a derived work of the [Terraform Provider](https://github.com/astronomer/terraform-provider-astro)\n\u003e distributed under [MPL 2.0](https://www.mozilla.org/en-US/MPL/2.0/). If you encounter a bug or missing feature,\n\u003e first check the [`pulumi-astronomer` repo](https://github.com/ryan-pip/pulumi-astronomer/issues); however, if that doesn't turn up anything,\n\u003e please consult the source [`terraform-provider-astro` repo](https://github.com/astronomer/terraform-provider-astro/issues).",
            "compatibility": "tfbridge20",
            "pyproject": {}
        }
    },
    "config": {
        "variables": {
            "host": {
                "type": "string",
                "description": "API host to use for the provider. Default is `https://api.astronomer.io`\n"
            },
            "organizationId": {
                "type": "string",
                "description": "Organization ID this provider will operate on.\n"
            },
            "token": {
                "type": "string",
                "description": "Astro API Token. Can be set with an `ASTRO_API_TOKEN` env var.\n",
                "defaultInfo": {
                    "environment": [
                        "ASTRO_API_TOKEN"
                    ]
                },
                "secret": true
            }
        },
        "defaults": [
            "organizationId"
        ]
    },
    "types": {
        "astronomer:index/ApiTokenCreatedBy:ApiTokenCreatedBy": {
            "properties": {
                "apiTokenName": {
                    "type": "string"
                },
                "avatarUrl": {
                    "type": "string"
                },
                "fullName": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "subjectType": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "apiTokenName",
                        "avatarUrl",
                        "fullName",
                        "id",
                        "subjectType",
                        "username"
                    ]
                }
            }
        },
        "astronomer:index/ApiTokenRole:ApiTokenRole": {
            "properties": {
                "entityId": {
                    "type": "string",
                    "description": "The ID of the entity to assign the role to\n"
                },
                "entityType": {
                    "type": "string",
                    "description": "The type of entity to assign the role to\n"
                },
                "role": {
                    "type": "string",
                    "description": "The role to assign to the entity\n"
                }
            },
            "type": "object",
            "required": [
                "entityId",
                "entityType",
                "role"
            ]
        },
        "astronomer:index/ApiTokenUpdatedBy:ApiTokenUpdatedBy": {
            "properties": {
                "apiTokenName": {
                    "type": "string"
                },
                "avatarUrl": {
                    "type": "string"
                },
                "fullName": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "subjectType": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "apiTokenName",
                        "avatarUrl",
                        "fullName",
                        "id",
                        "subjectType",
                        "username"
                    ]
                }
            }
        },
        "astronomer:index/ClusterHealthStatus:ClusterHealthStatus": {
            "properties": {
                "details": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/astronomer:index/ClusterHealthStatusDetail:ClusterHealthStatusDetail"
                    },
                    "description": "Cluster health status details\n"
                },
                "value": {
                    "type": "string",
                    "description": "Cluster health status value\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "details",
                        "value"
                    ]
                }
            }
        },
        "astronomer:index/ClusterHealthStatusDetail:ClusterHealthStatusDetail": {
            "properties": {
                "code": {
                    "type": "string",
                    "description": "Cluster health status detail code\n"
                },
                "description": {
                    "type": "string",
                    "description": "Cluster health status detail description\n"
                },
                "severity": {
                    "type": "string",
                    "description": "Cluster health status detail severity\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "code",
                        "description",
                        "severity"
                    ]
                }
            }
        },
        "astronomer:index/ClusterMetadata:ClusterMetadata": {
            "properties": {
                "externalIps": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Cluster external IPs\n"
                },
                "kubeDnsIp": {
                    "type": "string",
                    "description": "Cluster kube DNS IP\n"
                },
                "oidcIssuerUrl": {
                    "type": "string",
                    "description": "Cluster OIDC issuer URL\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "externalIps",
                        "kubeDnsIp",
                        "oidcIssuerUrl"
                    ]
                }
            }
        },
        "astronomer:index/ClusterNodePool:ClusterNodePool": {
            "properties": {
                "cloudProvider": {
                    "type": "string",
                    "description": "Node pool cloud provider\n"
                },
                "clusterId": {
                    "type": "string",
                    "description": "Node pool cluster identifier\n"
                },
                "createdAt": {
                    "type": "string",
                    "description": "Node pool creation timestamp\n"
                },
                "id": {
                    "type": "string",
                    "description": "Node pool identifier\n"
                },
                "isDefault": {
                    "type": "boolean",
                    "description": "Whether the node pool is the default node pool of the cluster\n"
                },
                "maxNodeCount": {
                    "type": "integer",
                    "description": "Node pool maximum node count\n"
                },
                "name": {
                    "type": "string",
                    "description": "Node pool name\n"
                },
                "nodeInstanceType": {
                    "type": "string",
                    "description": "Node pool node instance type\n"
                },
                "supportedAstroMachines": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Node pool supported Astro machines\n"
                },
                "updatedAt": {
                    "type": "string",
                    "description": "Node pool last updated timestamp\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "cloudProvider",
                        "clusterId",
                        "createdAt",
                        "id",
                        "isDefault",
                        "maxNodeCount",
                        "name",
                        "nodeInstanceType",
                        "supportedAstroMachines",
                        "updatedAt"
                    ]
                }
            }
        },
        "astronomer:index/ClusterTimeouts:ClusterTimeouts": {
            "properties": {
                "create": {
                    "type": "string",
                    "description": "A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as \"30s\" or \"2h45m\". Valid time units are \"s\" (seconds), \"m\" (minutes), \"h\" (hours).\n"
                },
                "delete": {
                    "type": "string",
                    "description": "A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as \"30s\" or \"2h45m\". Valid time units are \"s\" (seconds), \"m\" (minutes), \"h\" (hours). Setting a timeout for a Delete operation is only applicable if changes are saved into state before the destroy operation occurs.\n"
                },
                "update": {
                    "type": "string",
                    "description": "A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as \"30s\" or \"2h45m\". Valid time units are \"s\" (seconds), \"m\" (minutes), \"h\" (hours).\n"
                }
            },
            "type": "object"
        },
        "astronomer:index/DeploymentCreatedBy:DeploymentCreatedBy": {
            "properties": {
                "apiTokenName": {
                    "type": "string"
                },
                "avatarUrl": {
                    "type": "string"
                },
                "fullName": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "subjectType": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "apiTokenName",
                        "avatarUrl",
                        "fullName",
                        "id",
                        "subjectType",
                        "username"
                    ]
                }
            }
        },
        "astronomer:index/DeploymentEnvironmentVariable:DeploymentEnvironmentVariable": {
            "properties": {
                "isSecret": {
                    "type": "boolean",
                    "description": "Whether Environment variable is a secret\n"
                },
                "key": {
                    "type": "string",
                    "description": "Environment variable key\n"
                },
                "updatedAt": {
                    "type": "string",
                    "description": "Environment variable last updated timestamp\n"
                },
                "value": {
                    "type": "string",
                    "description": "Environment variable value\n",
                    "secret": true
                }
            },
            "type": "object",
            "required": [
                "isSecret",
                "key"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "isSecret",
                        "key",
                        "updatedAt"
                    ]
                }
            }
        },
        "astronomer:index/DeploymentScalingSpec:DeploymentScalingSpec": {
            "properties": {
                "hibernationSpec": {
                    "$ref": "#/types/astronomer:index/DeploymentScalingSpecHibernationSpec:DeploymentScalingSpecHibernationSpec",
                    "description": "Hibernation configuration for the deployment. The deployment will hibernate according to the schedules defined in this configuration. To remove the hibernation configuration, set scaling*spec to null.\n"
                }
            },
            "type": "object",
            "required": [
                "hibernationSpec"
            ]
        },
        "astronomer:index/DeploymentScalingSpecHibernationSpec:DeploymentScalingSpecHibernationSpec": {
            "properties": {
                "override": {
                    "$ref": "#/types/astronomer:index/DeploymentScalingSpecHibernationSpecOverride:DeploymentScalingSpecHibernationSpecOverride",
                    "description": "Hibernation override configuration. Set to null to remove the override.\n"
                },
                "schedules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/astronomer:index/DeploymentScalingSpecHibernationSpecSchedule:DeploymentScalingSpecHibernationSpecSchedule"
                    },
                    "description": "List of hibernation schedules. Set to null to remove all schedules.\n"
                }
            },
            "type": "object"
        },
        "astronomer:index/DeploymentScalingSpecHibernationSpecOverride:DeploymentScalingSpecHibernationSpecOverride": {
            "properties": {
                "isActive": {
                    "type": "boolean"
                },
                "isHibernating": {
                    "type": "boolean"
                },
                "overrideUntil": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "isHibernating"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "isActive",
                        "isHibernating"
                    ]
                }
            }
        },
        "astronomer:index/DeploymentScalingSpecHibernationSpecSchedule:DeploymentScalingSpecHibernationSpecSchedule": {
            "properties": {
                "description": {
                    "type": "string"
                },
                "hibernateAtCron": {
                    "type": "string"
                },
                "isEnabled": {
                    "type": "boolean"
                },
                "wakeAtCron": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "hibernateAtCron",
                "isEnabled",
                "wakeAtCron"
            ]
        },
        "astronomer:index/DeploymentScalingStatus:DeploymentScalingStatus": {
            "properties": {
                "hibernationStatus": {
                    "$ref": "#/types/astronomer:index/DeploymentScalingStatusHibernationStatus:DeploymentScalingStatusHibernationStatus"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "hibernationStatus"
                    ]
                }
            }
        },
        "astronomer:index/DeploymentScalingStatusHibernationStatus:DeploymentScalingStatusHibernationStatus": {
            "properties": {
                "isHibernating": {
                    "type": "boolean"
                },
                "nextEventAt": {
                    "type": "string"
                },
                "nextEventType": {
                    "type": "string"
                },
                "reason": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "isHibernating",
                        "nextEventAt",
                        "nextEventType",
                        "reason"
                    ]
                }
            }
        },
        "astronomer:index/DeploymentUpdatedBy:DeploymentUpdatedBy": {
            "properties": {
                "apiTokenName": {
                    "type": "string"
                },
                "avatarUrl": {
                    "type": "string"
                },
                "fullName": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "subjectType": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "apiTokenName",
                        "avatarUrl",
                        "fullName",
                        "id",
                        "subjectType",
                        "username"
                    ]
                }
            }
        },
        "astronomer:index/DeploymentWorkerQueue:DeploymentWorkerQueue": {
            "properties": {
                "astroMachine": {
                    "type": "string",
                    "description": "Worker queue Astro machine value - required for 'STANDARD' and 'DEDICATED' deployments\n"
                },
                "isDefault": {
                    "type": "boolean",
                    "description": "Worker queue default\n"
                },
                "maxWorkerCount": {
                    "type": "integer",
                    "description": "Worker queue max worker count\n"
                },
                "minWorkerCount": {
                    "type": "integer",
                    "description": "Worker queue min worker count\n"
                },
                "name": {
                    "type": "string",
                    "description": "Worker queue name\n"
                },
                "nodePoolId": {
                    "type": "string",
                    "description": "Worker queue Node pool identifier - required for 'HYBRID' deployments\n"
                },
                "podCpu": {
                    "type": "string",
                    "description": "Worker queue pod CPU\n"
                },
                "podMemory": {
                    "type": "string",
                    "description": "Worker queue pod memory\n"
                },
                "workerConcurrency": {
                    "type": "integer",
                    "description": "Worker queue worker concurrency\n"
                }
            },
            "type": "object",
            "required": [
                "isDefault",
                "maxWorkerCount",
                "minWorkerCount",
                "name",
                "workerConcurrency"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "isDefault",
                        "maxWorkerCount",
                        "minWorkerCount",
                        "name",
                        "podCpu",
                        "podMemory",
                        "workerConcurrency"
                    ]
                }
            }
        },
        "astronomer:index/TeamCreatedBy:TeamCreatedBy": {
            "properties": {
                "apiTokenName": {
                    "type": "string"
                },
                "avatarUrl": {
                    "type": "string"
                },
                "fullName": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "subjectType": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "apiTokenName",
                        "avatarUrl",
                        "fullName",
                        "id",
                        "subjectType",
                        "username"
                    ]
                }
            }
        },
        "astronomer:index/TeamDeploymentRole:TeamDeploymentRole": {
            "properties": {
                "deploymentId": {
                    "type": "string",
                    "description": "The ID of the deployment to assign the role to\n"
                },
                "role": {
                    "type": "string",
                    "description": "The role to assign to the deployment\n"
                }
            },
            "type": "object",
            "required": [
                "deploymentId",
                "role"
            ]
        },
        "astronomer:index/TeamRolesDeploymentRole:TeamRolesDeploymentRole": {
            "properties": {
                "deploymentId": {
                    "type": "string",
                    "description": "The ID of the deployment to assign the role to\n"
                },
                "role": {
                    "type": "string",
                    "description": "The role to assign to the deployment\n"
                }
            },
            "type": "object",
            "required": [
                "deploymentId",
                "role"
            ]
        },
        "astronomer:index/TeamRolesWorkspaceRole:TeamRolesWorkspaceRole": {
            "properties": {
                "role": {
                    "type": "string",
                    "description": "The role to assign to the workspace\n"
                },
                "workspaceId": {
                    "type": "string",
                    "description": "The ID of the workspace to assign the role to\n"
                }
            },
            "type": "object",
            "required": [
                "role",
                "workspaceId"
            ]
        },
        "astronomer:index/TeamUpdatedBy:TeamUpdatedBy": {
            "properties": {
                "apiTokenName": {
                    "type": "string"
                },
                "avatarUrl": {
                    "type": "string"
                },
                "fullName": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "subjectType": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "apiTokenName",
                        "avatarUrl",
                        "fullName",
                        "id",
                        "subjectType",
                        "username"
                    ]
                }
            }
        },
        "astronomer:index/TeamWorkspaceRole:TeamWorkspaceRole": {
            "properties": {
                "role": {
                    "type": "string",
                    "description": "The role to assign to the workspace\n"
                },
                "workspaceId": {
                    "type": "string",
                    "description": "The ID of the workspace to assign the role to\n"
                }
            },
            "type": "object",
            "required": [
                "role",
                "workspaceId"
            ]
        },
        "astronomer:index/UserInviteInvitee:UserInviteInvitee": {
            "properties": {
                "apiTokenName": {
                    "type": "string"
                },
                "avatarUrl": {
                    "type": "string"
                },
                "fullName": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "subjectType": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "apiTokenName",
                        "avatarUrl",
                        "fullName",
                        "id",
                        "subjectType",
                        "username"
                    ]
                }
            }
        },
        "astronomer:index/UserInviteInviter:UserInviteInviter": {
            "properties": {
                "apiTokenName": {
                    "type": "string"
                },
                "avatarUrl": {
                    "type": "string"
                },
                "fullName": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "subjectType": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "apiTokenName",
                        "avatarUrl",
                        "fullName",
                        "id",
                        "subjectType",
                        "username"
                    ]
                }
            }
        },
        "astronomer:index/UserRolesDeploymentRole:UserRolesDeploymentRole": {
            "properties": {
                "deploymentId": {
                    "type": "string",
                    "description": "The ID of the deployment to assign the role to\n"
                },
                "role": {
                    "type": "string",
                    "description": "The role to assign to the deployment\n"
                }
            },
            "type": "object",
            "required": [
                "deploymentId",
                "role"
            ]
        },
        "astronomer:index/UserRolesWorkspaceRole:UserRolesWorkspaceRole": {
            "properties": {
                "role": {
                    "type": "string",
                    "description": "The role to assign to the workspace\n"
                },
                "workspaceId": {
                    "type": "string",
                    "description": "The ID of the workspace to assign the role to\n"
                }
            },
            "type": "object",
            "required": [
                "role",
                "workspaceId"
            ]
        },
        "astronomer:index/WorkspaceCreatedBy:WorkspaceCreatedBy": {
            "properties": {
                "apiTokenName": {
                    "type": "string"
                },
                "avatarUrl": {
                    "type": "string"
                },
                "fullName": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "subjectType": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "apiTokenName",
                        "avatarUrl",
                        "fullName",
                        "id",
                        "subjectType",
                        "username"
                    ]
                }
            }
        },
        "astronomer:index/WorkspaceUpdatedBy:WorkspaceUpdatedBy": {
            "properties": {
                "apiTokenName": {
                    "type": "string"
                },
                "avatarUrl": {
                    "type": "string"
                },
                "fullName": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "subjectType": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "apiTokenName",
                        "avatarUrl",
                        "fullName",
                        "id",
                        "subjectType",
                        "username"
                    ]
                }
            }
        },
        "astronomer:index/getApiTokenCreatedBy:getApiTokenCreatedBy": {
            "properties": {
                "apiTokenName": {
                    "type": "string"
                },
                "avatarUrl": {
                    "type": "string"
                },
                "fullName": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "subjectType": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "apiTokenName",
                "avatarUrl",
                "fullName",
                "id",
                "subjectType",
                "username"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "astronomer:index/getApiTokenRole:getApiTokenRole": {
            "properties": {
                "entityId": {
                    "type": "string",
                    "description": "The ID of the entity to assign the role to\n"
                },
                "entityType": {
                    "type": "string",
                    "description": "The type of entity to assign the role to\n"
                },
                "role": {
                    "type": "string",
                    "description": "The role to assign to the entity\n"
                }
            },
            "type": "object",
            "required": [
                "entityId",
                "entityType",
                "role"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "astronomer:index/getApiTokenUpdatedBy:getApiTokenUpdatedBy": {
            "properties": {
                "apiTokenName": {
                    "type": "string"
                },
                "avatarUrl": {
                    "type": "string"
                },
                "fullName": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "subjectType": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "apiTokenName",
                "avatarUrl",
                "fullName",
                "id",
                "subjectType",
                "username"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "astronomer:index/getApiTokensApiToken:getApiTokensApiToken": {
            "properties": {
                "createdAt": {
                    "type": "string",
                    "description": "API Token creation timestamp\n"
                },
                "createdBy": {
                    "$ref": "#/types/astronomer:index/getApiTokensApiTokenCreatedBy:getApiTokensApiTokenCreatedBy",
                    "description": "API Token creator\n"
                },
                "description": {
                    "type": "string",
                    "description": "API Token description\n"
                },
                "endAt": {
                    "type": "string",
                    "description": "time when the API token will expire in UTC\n"
                },
                "expiryPeriodInDays": {
                    "type": "integer",
                    "description": "API Token expiry period in days\n"
                },
                "id": {
                    "type": "string",
                    "description": "API Token identifier\n"
                },
                "lastUsedAt": {
                    "type": "string",
                    "description": "API Token last used timestamp\n"
                },
                "name": {
                    "type": "string",
                    "description": "API Token name\n"
                },
                "roles": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/astronomer:index/getApiTokensApiTokenRole:getApiTokensApiTokenRole"
                    },
                    "description": "The roles assigned to the API Token\n"
                },
                "shortToken": {
                    "type": "string",
                    "description": "API Token short token\n"
                },
                "startAt": {
                    "type": "string",
                    "description": "time when the API token will become valid in UTC\n"
                },
                "type": {
                    "type": "string",
                    "description": "API Token type\n"
                },
                "updatedAt": {
                    "type": "string",
                    "description": "API Token last updated timestamp\n"
                },
                "updatedBy": {
                    "$ref": "#/types/astronomer:index/getApiTokensApiTokenUpdatedBy:getApiTokensApiTokenUpdatedBy",
                    "description": "API Token updater\n"
                }
            },
            "type": "object",
            "required": [
                "createdAt",
                "createdBy",
                "description",
                "endAt",
                "expiryPeriodInDays",
                "id",
                "lastUsedAt",
                "name",
                "roles",
                "shortToken",
                "startAt",
                "type",
                "updatedAt",
                "updatedBy"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "astronomer:index/getApiTokensApiTokenCreatedBy:getApiTokensApiTokenCreatedBy": {
            "properties": {
                "apiTokenName": {
                    "type": "string"
                },
                "avatarUrl": {
                    "type": "string"
                },
                "fullName": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "subjectType": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "apiTokenName",
                "avatarUrl",
                "fullName",
                "id",
                "subjectType",
                "username"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "astronomer:index/getApiTokensApiTokenRole:getApiTokensApiTokenRole": {
            "properties": {
                "entityId": {
                    "type": "string",
                    "description": "The ID of the entity to assign the role to\n"
                },
                "entityType": {
                    "type": "string",
                    "description": "The type of entity to assign the role to\n"
                },
                "role": {
                    "type": "string",
                    "description": "The role to assign to the entity\n"
                }
            },
            "type": "object",
            "required": [
                "entityId",
                "entityType",
                "role"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "astronomer:index/getApiTokensApiTokenUpdatedBy:getApiTokensApiTokenUpdatedBy": {
            "properties": {
                "apiTokenName": {
                    "type": "string"
                },
                "avatarUrl": {
                    "type": "string"
                },
                "fullName": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "subjectType": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "apiTokenName",
                "avatarUrl",
                "fullName",
                "id",
                "subjectType",
                "username"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "astronomer:index/getClusterHealthStatus:getClusterHealthStatus": {
            "properties": {
                "details": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/astronomer:index/getClusterHealthStatusDetail:getClusterHealthStatusDetail"
                    },
                    "description": "Cluster health status details\n"
                },
                "value": {
                    "type": "string",
                    "description": "Cluster health status value\n"
                }
            },
            "type": "object",
            "required": [
                "details",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "astronomer:index/getClusterHealthStatusDetail:getClusterHealthStatusDetail": {
            "properties": {
                "code": {
                    "type": "string",
                    "description": "Cluster health status detail code\n"
                },
                "description": {
                    "type": "string",
                    "description": "Cluster health status detail description\n"
                },
                "severity": {
                    "type": "string",
                    "description": "Cluster health status detail severity\n"
                }
            },
            "type": "object",
            "required": [
                "code",
                "description",
                "severity"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "astronomer:index/getClusterMetadata:getClusterMetadata": {
            "properties": {
                "externalIps": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Cluster external IPs\n"
                },
                "kubeDnsIp": {
                    "type": "string",
                    "description": "Cluster kube DNS IP\n"
                },
                "oidcIssuerUrl": {
                    "type": "string",
                    "description": "Cluster OIDC issuer URL\n"
                }
            },
            "type": "object",
            "required": [
                "externalIps",
                "kubeDnsIp",
                "oidcIssuerUrl"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "astronomer:index/getClusterNodePool:getClusterNodePool": {
            "properties": {
                "cloudProvider": {
                    "type": "string",
                    "description": "Node pool cloud provider\n"
                },
                "clusterId": {
                    "type": "string",
                    "description": "Node pool cluster identifier\n"
                },
                "createdAt": {
                    "type": "string",
                    "description": "Node pool creation timestamp\n"
                },
                "id": {
                    "type": "string",
                    "description": "Node pool identifier\n"
                },
                "isDefault": {
                    "type": "boolean",
                    "description": "Whether the node pool is the default node pool of the cluster\n"
                },
                "maxNodeCount": {
                    "type": "integer",
                    "description": "Node pool maximum node count\n"
                },
                "name": {
                    "type": "string",
                    "description": "Node pool name\n"
                },
                "nodeInstanceType": {
                    "type": "string",
                    "description": "Node pool node instance type\n"
                },
                "supportedAstroMachines": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Node pool supported Astro machines\n"
                },
                "updatedAt": {
                    "type": "string",
                    "description": "Node pool last updated timestamp\n"
                }
            },
            "type": "object",
            "required": [
                "cloudProvider",
                "clusterId",
                "createdAt",
                "id",
                "isDefault",
                "maxNodeCount",
                "name",
                "nodeInstanceType",
                "supportedAstroMachines",
                "updatedAt"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "astronomer:index/getClusterOptionsClusterOption:getClusterOptionsClusterOption": {
            "properties": {
                "databaseInstances": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/astronomer:index/getClusterOptionsClusterOptionDatabaseInstance:getClusterOptionsClusterOptionDatabaseInstance"
                    },
                    "description": "ClusterOption database instances\n"
                },
                "defaultDatabaseInstance": {
                    "$ref": "#/types/astronomer:index/getClusterOptionsClusterOptionDefaultDatabaseInstance:getClusterOptionsClusterOptionDefaultDatabaseInstance",
                    "description": "ClusterOption default database instance\n"
                },
                "defaultNodeInstance": {
                    "$ref": "#/types/astronomer:index/getClusterOptionsClusterOptionDefaultNodeInstance:getClusterOptionsClusterOptionDefaultNodeInstance",
                    "description": "ClusterOption default node instance\n"
                },
                "defaultPodSubnetRange": {
                    "type": "string",
                    "description": "ClusterOption default pod subnet range\n"
                },
                "defaultRegion": {
                    "$ref": "#/types/astronomer:index/getClusterOptionsClusterOptionDefaultRegion:getClusterOptionsClusterOptionDefaultRegion",
                    "description": "ClusterOption default region\n"
                },
                "defaultServicePeeringRange": {
                    "type": "string",
                    "description": "ClusterOption default service peering range\n"
                },
                "defaultServiceSubnetRange": {
                    "type": "string",
                    "description": "ClusterOption default service subnet range\n"
                },
                "defaultVpcSubnetRange": {
                    "type": "string",
                    "description": "ClusterOption default vps subnet range\n"
                },
                "nodeCountDefault": {
                    "type": "integer",
                    "description": "ClusterOption node count default\n"
                },
                "nodeCountMax": {
                    "type": "integer",
                    "description": "ClusterOption node count max\n"
                },
                "nodeCountMin": {
                    "type": "integer",
                    "description": "ClusterOption node count min\n"
                },
                "nodeInstances": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/astronomer:index/getClusterOptionsClusterOptionNodeInstance:getClusterOptionsClusterOptionNodeInstance"
                    },
                    "description": "ClusterOption node instances\n"
                },
                "provider": {
                    "type": "string",
                    "description": "ClusterOption provider\n"
                },
                "regions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/astronomer:index/getClusterOptionsClusterOptionRegion:getClusterOptionsClusterOptionRegion"
                    },
                    "description": "ClusterOption regions\n"
                }
            },
            "type": "object",
            "required": [
                "databaseInstances",
                "defaultDatabaseInstance",
                "defaultNodeInstance",
                "defaultPodSubnetRange",
                "defaultRegion",
                "defaultServicePeeringRange",
                "defaultServiceSubnetRange",
                "defaultVpcSubnetRange",
                "nodeCountDefault",
                "nodeCountMax",
                "nodeCountMin",
                "nodeInstances",
                "provider",
                "regions"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "astronomer:index/getClusterOptionsClusterOptionDatabaseInstance:getClusterOptionsClusterOptionDatabaseInstance": {
            "properties": {
                "cpu": {
                    "type": "integer",
                    "description": "Provider instance cpu\n"
                },
                "memory": {
                    "type": "string",
                    "description": "Provider instance memory\n"
                },
                "name": {
                    "type": "string",
                    "description": "Provider instance name\n"
                }
            },
            "type": "object",
            "required": [
                "cpu",
                "memory",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "astronomer:index/getClusterOptionsClusterOptionDefaultDatabaseInstance:getClusterOptionsClusterOptionDefaultDatabaseInstance": {
            "properties": {
                "cpu": {
                    "type": "integer",
                    "description": "Provider instance cpu\n"
                },
                "memory": {
                    "type": "string",
                    "description": "Provider instance memory\n"
                },
                "name": {
                    "type": "string",
                    "description": "Provider instance name\n"
                }
            },
            "type": "object",
            "required": [
                "cpu",
                "memory",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "astronomer:index/getClusterOptionsClusterOptionDefaultNodeInstance:getClusterOptionsClusterOptionDefaultNodeInstance": {
            "properties": {
                "cpu": {
                    "type": "integer",
                    "description": "Provider instance cpu\n"
                },
                "memory": {
                    "type": "string",
                    "description": "Provider instance memory\n"
                },
                "name": {
                    "type": "string",
                    "description": "Provider instance name\n"
                }
            },
            "type": "object",
            "required": [
                "cpu",
                "memory",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "astronomer:index/getClusterOptionsClusterOptionDefaultRegion:getClusterOptionsClusterOptionDefaultRegion": {
            "properties": {
                "bannedInstances": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Region banned instances\n"
                },
                "limited": {
                    "type": "boolean",
                    "description": "Region is limited bool\n"
                },
                "name": {
                    "type": "string",
                    "description": "Region is limited bool\n"
                }
            },
            "type": "object",
            "required": [
                "bannedInstances",
                "limited",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "astronomer:index/getClusterOptionsClusterOptionNodeInstance:getClusterOptionsClusterOptionNodeInstance": {
            "properties": {
                "cpu": {
                    "type": "integer",
                    "description": "Provider instance cpu\n"
                },
                "memory": {
                    "type": "string",
                    "description": "Provider instance memory\n"
                },
                "name": {
                    "type": "string",
                    "description": "Provider instance name\n"
                }
            },
            "type": "object",
            "required": [
                "cpu",
                "memory",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "astronomer:index/getClusterOptionsClusterOptionRegion:getClusterOptionsClusterOptionRegion": {
            "properties": {
                "bannedInstances": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Region banned instances\n"
                },
                "limited": {
                    "type": "boolean",
                    "description": "Region is limited bool\n"
                },
                "name": {
                    "type": "string",
                    "description": "Region is limited bool\n"
                }
            },
            "type": "object",
            "required": [
                "bannedInstances",
                "limited",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "astronomer:index/getClusterTag:getClusterTag": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "Cluster tag key\n"
                },
                "value": {
                    "type": "string",
                    "description": "Cluster tag value\n"
                }
            },
            "type": "object",
            "required": [
                "key",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "astronomer:index/getClustersCluster:getClustersCluster": {
            "properties": {
                "cloudProvider": {
                    "type": "string",
                    "description": "Cluster cloud provider\n"
                },
                "createdAt": {
                    "type": "string",
                    "description": "Cluster creation timestamp\n"
                },
                "dbInstanceType": {
                    "type": "string",
                    "description": "Cluster database instance type\n"
                },
                "healthStatus": {
                    "$ref": "#/types/astronomer:index/getClustersClusterHealthStatus:getClustersClusterHealthStatus",
                    "description": "Cluster health status\n"
                },
                "id": {
                    "type": "string",
                    "description": "Cluster identifier\n"
                },
                "isLimited": {
                    "type": "boolean",
                    "description": "Whether the cluster is limited\n"
                },
                "metadata": {
                    "$ref": "#/types/astronomer:index/getClustersClusterMetadata:getClustersClusterMetadata",
                    "description": "Cluster metadata\n"
                },
                "name": {
                    "type": "string",
                    "description": "Cluster name\n"
                },
                "nodePools": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/astronomer:index/getClustersClusterNodePool:getClustersClusterNodePool"
                    },
                    "description": "Cluster node pools\n"
                },
                "podSubnetRange": {
                    "type": "string",
                    "description": "Cluster pod subnet range\n"
                },
                "providerAccount": {
                    "type": "string",
                    "description": "Cluster provider account\n"
                },
                "region": {
                    "type": "string",
                    "description": "Cluster region\n"
                },
                "servicePeeringRange": {
                    "type": "string",
                    "description": "Cluster service peering range\n"
                },
                "serviceSubnetRange": {
                    "type": "string",
                    "description": "Cluster service subnet range\n"
                },
                "status": {
                    "type": "string",
                    "description": "Cluster status\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/astronomer:index/getClustersClusterTag:getClustersClusterTag"
                    },
                    "description": "Cluster tags\n"
                },
                "tenantId": {
                    "type": "string",
                    "description": "Cluster tenant ID\n"
                },
                "type": {
                    "type": "string",
                    "description": "Cluster type\n"
                },
                "updatedAt": {
                    "type": "string",
                    "description": "Cluster last updated timestamp\n"
                },
                "vpcSubnetRange": {
                    "type": "string",
                    "description": "Cluster VPC subnet range\n"
                },
                "workspaceIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Cluster workspace IDs\n"
                }
            },
            "type": "object",
            "required": [
                "cloudProvider",
                "createdAt",
                "dbInstanceType",
                "healthStatus",
                "id",
                "isLimited",
                "metadata",
                "name",
                "nodePools",
                "podSubnetRange",
                "providerAccount",
                "region",
                "servicePeeringRange",
                "serviceSubnetRange",
                "status",
                "tags",
                "tenantId",
                "type",
                "updatedAt",
                "vpcSubnetRange",
                "workspaceIds"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "astronomer:index/getClustersClusterHealthStatus:getClustersClusterHealthStatus": {
            "properties": {
                "details": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/astronomer:index/getClustersClusterHealthStatusDetail:getClustersClusterHealthStatusDetail"
                    },
                    "description": "Cluster health status details\n"
                },
                "value": {
                    "type": "string",
                    "description": "Cluster health status value\n"
                }
            },
            "type": "object",
            "required": [
                "details",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "astronomer:index/getClustersClusterHealthStatusDetail:getClustersClusterHealthStatusDetail": {
            "properties": {
                "code": {
                    "type": "string",
                    "description": "Cluster health status detail code\n"
                },
                "description": {
                    "type": "string",
                    "description": "Cluster health status detail description\n"
                },
                "severity": {
                    "type": "string",
                    "description": "Cluster health status detail severity\n"
                }
            },
            "type": "object",
            "required": [
                "code",
                "description",
                "severity"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "astronomer:index/getClustersClusterMetadata:getClustersClusterMetadata": {
            "properties": {
                "externalIps": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Cluster external IPs\n"
                },
                "kubeDnsIp": {
                    "type": "string",
                    "description": "Cluster kube DNS IP\n"
                },
                "oidcIssuerUrl": {
                    "type": "string",
                    "description": "Cluster OIDC issuer URL\n"
                }
            },
            "type": "object",
            "required": [
                "externalIps",
                "kubeDnsIp",
                "oidcIssuerUrl"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "astronomer:index/getClustersClusterNodePool:getClustersClusterNodePool": {
            "properties": {
                "cloudProvider": {
                    "type": "string",
                    "description": "Node pool cloud provider\n"
                },
                "clusterId": {
                    "type": "string",
                    "description": "Node pool cluster identifier\n"
                },
                "createdAt": {
                    "type": "string",
                    "description": "Node pool creation timestamp\n"
                },
                "id": {
                    "type": "string",
                    "description": "Node pool identifier\n"
                },
                "isDefault": {
                    "type": "boolean",
                    "description": "Whether the node pool is the default node pool of the cluster\n"
                },
                "maxNodeCount": {
                    "type": "integer",
                    "description": "Node pool maximum node count\n"
                },
                "name": {
                    "type": "string",
                    "description": "Node pool name\n"
                },
                "nodeInstanceType": {
                    "type": "string",
                    "description": "Node pool node instance type\n"
                },
                "supportedAstroMachines": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Node pool supported Astro machines\n"
                },
                "updatedAt": {
                    "type": "string",
                    "description": "Node pool last updated timestamp\n"
                }
            },
            "type": "object",
            "required": [
                "cloudProvider",
                "clusterId",
                "createdAt",
                "id",
                "isDefault",
                "maxNodeCount",
                "name",
                "nodeInstanceType",
                "supportedAstroMachines",
                "updatedAt"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "astronomer:index/getClustersClusterTag:getClustersClusterTag": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "Cluster tag key\n"
                },
                "value": {
                    "type": "string",
                    "description": "Cluster tag value\n"
                }
            },
            "type": "object",
            "required": [
                "key",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "astronomer:index/getDeploymentCreatedBy:getDeploymentCreatedBy": {
            "properties": {
                "apiTokenName": {
                    "type": "string"
                },
                "avatarUrl": {
                    "type": "string"
                },
                "fullName": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "subjectType": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "apiTokenName",
                "avatarUrl",
                "fullName",
                "id",
                "subjectType",
                "username"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "astronomer:index/getDeploymentEnvironmentVariable:getDeploymentEnvironmentVariable": {
            "properties": {
                "isSecret": {
                    "type": "boolean",
                    "description": "Whether Environment variable is a secret\n"
                },
                "key": {
                    "type": "string",
                    "description": "Environment variable key\n"
                },
                "updatedAt": {
                    "type": "string",
                    "description": "Environment variable last updated timestamp\n"
                },
                "value": {
                    "type": "string",
                    "description": "Environment variable value\n"
                }
            },
            "type": "object",
            "required": [
                "isSecret",
                "key",
                "updatedAt",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "astronomer:index/getDeploymentOptionsResourceQuotas:getDeploymentOptionsResourceQuotas": {
            "properties": {
                "defaultPodSize": {
                    "$ref": "#/types/astronomer:index/getDeploymentOptionsResourceQuotasDefaultPodSize:getDeploymentOptionsResourceQuotasDefaultPodSize",
                    "description": "Default pod size options\n"
                },
                "resourceQuota": {
                    "$ref": "#/types/astronomer:index/getDeploymentOptionsResourceQuotasResourceQuota:getDeploymentOptionsResourceQuotasResourceQuota",
                    "description": "Resource quota options\n"
                }
            },
            "type": "object",
            "required": [
                "defaultPodSize",
                "resourceQuota"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "astronomer:index/getDeploymentOptionsResourceQuotasDefaultPodSize:getDeploymentOptionsResourceQuotasDefaultPodSize": {
            "properties": {
                "cpu": {
                    "$ref": "#/types/astronomer:index/getDeploymentOptionsResourceQuotasDefaultPodSizeCpu:getDeploymentOptionsResourceQuotasDefaultPodSizeCpu",
                    "description": "CPU resource range\n"
                },
                "memory": {
                    "$ref": "#/types/astronomer:index/getDeploymentOptionsResourceQuotasDefaultPodSizeMemory:getDeploymentOptionsResourceQuotasDefaultPodSizeMemory",
                    "description": "Memory resource range\n"
                }
            },
            "type": "object",
            "required": [
                "cpu",
                "memory"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "astronomer:index/getDeploymentOptionsResourceQuotasDefaultPodSizeCpu:getDeploymentOptionsResourceQuotasDefaultPodSizeCpu": {
            "properties": {
                "ceiling": {
                    "type": "string",
                    "description": "Resource range ceiling\n"
                },
                "default": {
                    "type": "string",
                    "description": "Resource range default\n"
                },
                "floor": {
                    "type": "string",
                    "description": "Resource range floor\n"
                }
            },
            "type": "object",
            "required": [
                "ceiling",
                "default",
                "floor"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "astronomer:index/getDeploymentOptionsResourceQuotasDefaultPodSizeMemory:getDeploymentOptionsResourceQuotasDefaultPodSizeMemory": {
            "properties": {
                "ceiling": {
                    "type": "string",
                    "description": "Resource range ceiling\n"
                },
                "default": {
                    "type": "string",
                    "description": "Resource range default\n"
                },
                "floor": {
                    "type": "string",
                    "description": "Resource range floor\n"
                }
            },
            "type": "object",
            "required": [
                "ceiling",
                "default",
                "floor"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "astronomer:index/getDeploymentOptionsResourceQuotasResourceQuota:getDeploymentOptionsResourceQuotasResourceQuota": {
            "properties": {
                "cpu": {
                    "$ref": "#/types/astronomer:index/getDeploymentOptionsResourceQuotasResourceQuotaCpu:getDeploymentOptionsResourceQuotasResourceQuotaCpu",
                    "description": "CPU resource range\n"
                },
                "memory": {
                    "$ref": "#/types/astronomer:index/getDeploymentOptionsResourceQuotasResourceQuotaMemory:getDeploymentOptionsResourceQuotasResourceQuotaMemory",
                    "description": "Memory resource range\n"
                }
            },
            "type": "object",
            "required": [
                "cpu",
                "memory"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "astronomer:index/getDeploymentOptionsResourceQuotasResourceQuotaCpu:getDeploymentOptionsResourceQuotasResourceQuotaCpu": {
            "properties": {
                "ceiling": {
                    "type": "string",
                    "description": "Resource range ceiling\n"
                },
                "default": {
                    "type": "string",
                    "description": "Resource range default\n"
                },
                "floor": {
                    "type": "string",
                    "description": "Resource range floor\n"
                }
            },
            "type": "object",
            "required": [
                "ceiling",
                "default",
                "floor"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "astronomer:index/getDeploymentOptionsResourceQuotasResourceQuotaMemory:getDeploymentOptionsResourceQuotasResourceQuotaMemory": {
            "properties": {
                "ceiling": {
                    "type": "string",
                    "description": "Resource range ceiling\n"
                },
                "default": {
                    "type": "string",
                    "description": "Resource range default\n"
                },
                "floor": {
                    "type": "string",
                    "description": "Resource range floor\n"
                }
            },
            "type": "object",
            "required": [
                "ceiling",
                "default",
                "floor"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "astronomer:index/getDeploymentOptionsRuntimeRelease:getDeploymentOptionsRuntimeRelease": {
            "properties": {
                "airflowDatabaseMigration": {
                    "type": "boolean"
                },
                "airflowVersion": {
                    "type": "string"
                },
                "channel": {
                    "type": "string"
                },
                "releaseDate": {
                    "type": "string"
                },
                "stellarDatabaseMigration": {
                    "type": "boolean"
                },
                "version": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "airflowDatabaseMigration",
                "airflowVersion",
                "channel",
                "releaseDate",
                "stellarDatabaseMigration",
                "version"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "astronomer:index/getDeploymentOptionsSchedulerMachine:getDeploymentOptionsSchedulerMachine": {
            "properties": {
                "name": {
                    "type": "string"
                },
                "spec": {
                    "$ref": "#/types/astronomer:index/getDeploymentOptionsSchedulerMachineSpec:getDeploymentOptionsSchedulerMachineSpec"
                }
            },
            "type": "object",
            "required": [
                "name",
                "spec"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "astronomer:index/getDeploymentOptionsSchedulerMachineSpec:getDeploymentOptionsSchedulerMachineSpec": {
            "properties": {
                "concurrency": {
                    "type": "string"
                },
                "cpu": {
                    "type": "string"
                },
                "ephemeralStorage": {
                    "type": "string"
                },
                "memory": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "concurrency",
                "cpu",
                "ephemeralStorage",
                "memory"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "astronomer:index/getDeploymentOptionsWorkerMachine:getDeploymentOptionsWorkerMachine": {
            "properties": {
                "concurrency": {
                    "$ref": "#/types/astronomer:index/getDeploymentOptionsWorkerMachineConcurrency:getDeploymentOptionsWorkerMachineConcurrency"
                },
                "name": {
                    "type": "string"
                },
                "spec": {
                    "$ref": "#/types/astronomer:index/getDeploymentOptionsWorkerMachineSpec:getDeploymentOptionsWorkerMachineSpec"
                }
            },
            "type": "object",
            "required": [
                "concurrency",
                "name",
                "spec"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "astronomer:index/getDeploymentOptionsWorkerMachineConcurrency:getDeploymentOptionsWorkerMachineConcurrency": {
            "properties": {
                "ceiling": {
                    "type": "string"
                },
                "default": {
                    "type": "string"
                },
                "floor": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "ceiling",
                "default",
                "floor"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "astronomer:index/getDeploymentOptionsWorkerMachineSpec:getDeploymentOptionsWorkerMachineSpec": {
            "properties": {
                "concurrency": {
                    "type": "string"
                },
                "cpu": {
                    "type": "string"
                },
                "ephemeralStorage": {
                    "type": "string"
                },
                "memory": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "concurrency",
                "cpu",
                "ephemeralStorage",
                "memory"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "astronomer:index/getDeploymentOptionsWorkerQueues:getDeploymentOptionsWorkerQueues": {
            "properties": {
                "maxWorkers": {
                    "$ref": "#/types/astronomer:index/getDeploymentOptionsWorkerQueuesMaxWorkers:getDeploymentOptionsWorkerQueuesMaxWorkers",
                    "description": "Worker queue maximum workers\n"
                },
                "minWorkers": {
                    "$ref": "#/types/astronomer:index/getDeploymentOptionsWorkerQueuesMinWorkers:getDeploymentOptionsWorkerQueuesMinWorkers",
                    "description": "Worker queue minimum workers\n"
                },
                "workerConcurrency": {
                    "$ref": "#/types/astronomer:index/getDeploymentOptionsWorkerQueuesWorkerConcurrency:getDeploymentOptionsWorkerQueuesWorkerConcurrency",
                    "description": "Worker queue worker concurrency\n"
                }
            },
            "type": "object",
            "required": [
                "maxWorkers",
                "minWorkers",
                "workerConcurrency"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "astronomer:index/getDeploymentOptionsWorkerQueuesMaxWorkers:getDeploymentOptionsWorkerQueuesMaxWorkers": {
            "properties": {
                "ceiling": {
                    "type": "string",
                    "description": "Resource range ceiling\n"
                },
                "default": {
                    "type": "string",
                    "description": "Resource range default\n"
                },
                "floor": {
                    "type": "string",
                    "description": "Resource range floor\n"
                }
            },
            "type": "object",
            "required": [
                "ceiling",
                "default",
                "floor"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "astronomer:index/getDeploymentOptionsWorkerQueuesMinWorkers:getDeploymentOptionsWorkerQueuesMinWorkers": {
            "properties": {
                "ceiling": {
                    "type": "string",
                    "description": "Resource range ceiling\n"
                },
                "default": {
                    "type": "string",
                    "description": "Resource range default\n"
                },
                "floor": {
                    "type": "string",
                    "description": "Resource range floor\n"
                }
            },
            "type": "object",
            "required": [
                "ceiling",
                "default",
                "floor"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "astronomer:index/getDeploymentOptionsWorkerQueuesWorkerConcurrency:getDeploymentOptionsWorkerQueuesWorkerConcurrency": {
            "properties": {
                "ceiling": {
                    "type": "string",
                    "description": "Resource range ceiling\n"
                },
                "default": {
                    "type": "string",
                    "description": "Resource range default\n"
                },
                "floor": {
                    "type": "string",
                    "description": "Resource range floor\n"
                }
            },
            "type": "object",
            "required": [
                "ceiling",
                "default",
                "floor"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "astronomer:index/getDeploymentOptionsWorkloadIdentityOption:getDeploymentOptionsWorkloadIdentityOption": {
            "properties": {
                "label": {
                    "type": "string"
                },
                "role": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "label",
                "role"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "astronomer:index/getDeploymentScalingSpec:getDeploymentScalingSpec": {
            "properties": {
                "hibernationSpec": {
                    "$ref": "#/types/astronomer:index/getDeploymentScalingSpecHibernationSpec:getDeploymentScalingSpecHibernationSpec"
                }
            },
            "type": "object",
            "required": [
                "hibernationSpec"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "astronomer:index/getDeploymentScalingSpecHibernationSpec:getDeploymentScalingSpecHibernationSpec": {
            "properties": {
                "override": {
                    "$ref": "#/types/astronomer:index/getDeploymentScalingSpecHibernationSpecOverride:getDeploymentScalingSpecHibernationSpecOverride"
                },
                "schedules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/astronomer:index/getDeploymentScalingSpecHibernationSpecSchedule:getDeploymentScalingSpecHibernationSpecSchedule"
                    }
                }
            },
            "type": "object",
            "required": [
                "override",
                "schedules"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "astronomer:index/getDeploymentScalingSpecHibernationSpecOverride:getDeploymentScalingSpecHibernationSpecOverride": {
            "properties": {
                "isActive": {
                    "type": "boolean",
                    "description": "Whether the override is active\n"
                },
                "isHibernating": {
                    "type": "boolean",
                    "description": "Whether the override is hibernating\n"
                },
                "overrideUntil": {
                    "type": "string",
                    "description": "Time until the override is active\n"
                }
            },
            "type": "object",
            "required": [
                "isActive",
                "isHibernating",
                "overrideUntil"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "astronomer:index/getDeploymentScalingSpecHibernationSpecSchedule:getDeploymentScalingSpecHibernationSpecSchedule": {
            "properties": {
                "description": {
                    "type": "string",
                    "description": "Description of the schedule\n"
                },
                "hibernateAtCron": {
                    "type": "string",
                    "description": "Cron expression for hibernation\n"
                },
                "isEnabled": {
                    "type": "boolean",
                    "description": "Whether the schedule is enabled\n"
                },
                "wakeAtCron": {
                    "type": "string",
                    "description": "Cron expression for waking\n"
                }
            },
            "type": "object",
            "required": [
                "description",
                "hibernateAtCron",
                "isEnabled",
                "wakeAtCron"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "astronomer:index/getDeploymentScalingStatus:getDeploymentScalingStatus": {
            "properties": {
                "hibernationStatus": {
                    "$ref": "#/types/astronomer:index/getDeploymentScalingStatusHibernationStatus:getDeploymentScalingStatusHibernationStatus"
                }
            },
            "type": "object",
            "required": [
                "hibernationStatus"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "astronomer:index/getDeploymentScalingStatusHibernationStatus:getDeploymentScalingStatusHibernationStatus": {
            "properties": {
                "isHibernating": {
                    "type": "boolean",
                    "description": "Whether the deployment is hibernating\n"
                },
                "nextEventAt": {
                    "type": "string",
                    "description": "Time of the next event\n"
                },
                "nextEventType": {
                    "type": "string",
                    "description": "Type of the next event\n"
                },
                "reason": {
                    "type": "string",
                    "description": "Reason for the current state\n"
                }
            },
            "type": "object",
            "required": [
                "isHibernating",
                "nextEventAt",
                "nextEventType",
                "reason"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "astronomer:index/getDeploymentUpdatedBy:getDeploymentUpdatedBy": {
            "properties": {
                "apiTokenName": {
                    "type": "string"
                },
                "avatarUrl": {
                    "type": "string"
                },
                "fullName": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "subjectType": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "apiTokenName",
                "avatarUrl",
                "fullName",
                "id",
                "subjectType",
                "username"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "astronomer:index/getDeploymentWorkerQueue:getDeploymentWorkerQueue": {
            "properties": {
                "astroMachine": {
                    "type": "string",
                    "description": "Worker queue Astro machine value\n"
                },
                "id": {
                    "type": "string",
                    "description": "Worker queue identifier\n"
                },
                "isDefault": {
                    "type": "boolean",
                    "description": "Whether Worker queue is default\n"
                },
                "maxWorkerCount": {
                    "type": "integer",
                    "description": "Worker queue max worker count\n"
                },
                "minWorkerCount": {
                    "type": "integer",
                    "description": "Worker queue min worker count\n"
                },
                "name": {
                    "type": "string",
                    "description": "Worker queue name\n"
                },
                "nodePoolId": {
                    "type": "string",
                    "description": "Worker queue node pool identifier\n"
                },
                "podCpu": {
                    "type": "string",
                    "description": "Worker queue pod CPU\n"
                },
                "podMemory": {
                    "type": "string",
                    "description": "Worker queue pod memory\n"
                },
                "workerConcurrency": {
                    "type": "integer",
                    "description": "Worker queue worker concurrency\n"
                }
            },
            "type": "object",
            "required": [
                "astroMachine",
                "id",
                "isDefault",
                "maxWorkerCount",
                "minWorkerCount",
                "name",
                "nodePoolId",
                "podCpu",
                "podMemory",
                "workerConcurrency"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "astronomer:index/getDeploymentsDeployment:getDeploymentsDeployment": {
            "properties": {
                "airflowVersion": {
                    "type": "string",
                    "description": "Deployment Airflow version\n"
                },
                "astroRuntimeVersion": {
                    "type": "string",
                    "description": "Deployment Astro Runtime version\n"
                },
                "cloudProvider": {
                    "type": "string",
                    "description": "Deployment cloud provider\n"
                },
                "clusterId": {
                    "type": "string",
                    "description": "Deployment cluster identifier\n"
                },
                "contactEmails": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Deployment contact emails\n"
                },
                "createdAt": {
                    "type": "string",
                    "description": "Deployment creation timestamp\n"
                },
                "createdBy": {
                    "$ref": "#/types/astronomer:index/getDeploymentsDeploymentCreatedBy:getDeploymentsDeploymentCreatedBy",
                    "description": "Deployment creator\n"
                },
                "dagTarballVersion": {
                    "type": "string",
                    "description": "Deployment DAG tarball version\n"
                },
                "defaultTaskPodCpu": {
                    "type": "string",
                    "description": "Deployment default task pod CPU\n"
                },
                "defaultTaskPodMemory": {
                    "type": "string",
                    "description": "Deployment default task pod memory\n"
                },
                "description": {
                    "type": "string",
                    "description": "Deployment description\n"
                },
                "desiredDagTarballVersion": {
                    "type": "string",
                    "description": "Deployment desired DAG tarball version\n"
                },
                "environmentVariables": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/astronomer:index/getDeploymentsDeploymentEnvironmentVariable:getDeploymentsDeploymentEnvironmentVariable"
                    },
                    "description": "Deployment environment variables\n"
                },
                "executor": {
                    "type": "string",
                    "description": "Deployment executor\n"
                },
                "externalIps": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Deployment external IPs\n"
                },
                "id": {
                    "type": "string",
                    "description": "Deployment identifier\n"
                },
                "imageRepository": {
                    "type": "string",
                    "description": "Deployment image repository\n"
                },
                "imageTag": {
                    "type": "string",
                    "description": "Deployment image tag\n"
                },
                "imageVersion": {
                    "type": "string",
                    "description": "Deployment image version\n"
                },
                "isCicdEnforced": {
                    "type": "boolean",
                    "description": "Whether the Deployment enforces CI/CD deploys\n"
                },
                "isDagDeployEnabled": {
                    "type": "boolean",
                    "description": "Whether DAG deploy is enabled\n"
                },
                "isDevelopmentMode": {
                    "type": "boolean",
                    "description": "Whether Deployment is in development mode\n"
                },
                "isHighAvailability": {
                    "type": "boolean",
                    "description": "Whether Deployment has high availability\n"
                },
                "name": {
                    "type": "string",
                    "description": "Deployment name\n"
                },
                "namespace": {
                    "type": "string",
                    "description": "Deployment namespace\n"
                },
                "oidcIssuerUrl": {
                    "type": "string",
                    "description": "Deployment OIDC issuer URL\n"
                },
                "region": {
                    "type": "string",
                    "description": "Deployment region\n"
                },
                "resourceQuotaCpu": {
                    "type": "string",
                    "description": "Deployment resource quota CPU\n"
                },
                "resourceQuotaMemory": {
                    "type": "string",
                    "description": "Deployment resource quota memory\n"
                },
                "scalingSpec": {
                    "$ref": "#/types/astronomer:index/getDeploymentsDeploymentScalingSpec:getDeploymentsDeploymentScalingSpec",
                    "description": "Deployment scaling spec\n"
                },
                "scalingStatus": {
                    "$ref": "#/types/astronomer:index/getDeploymentsDeploymentScalingStatus:getDeploymentsDeploymentScalingStatus",
                    "description": "Deployment scaling status\n"
                },
                "schedulerAu": {
                    "type": "integer",
                    "description": "Deployment scheduler AU\n"
                },
                "schedulerCpu": {
                    "type": "string",
                    "description": "Deployment scheduler CPU\n"
                },
                "schedulerMemory": {
                    "type": "string",
                    "description": "Deployment scheduler memory\n"
                },
                "schedulerReplicas": {
                    "type": "integer",
                    "description": "Deployment scheduler replicas\n"
                },
                "schedulerSize": {
                    "type": "string",
                    "description": "Deployment scheduler size\n"
                },
                "status": {
                    "type": "string",
                    "description": "Deployment status\n"
                },
                "statusReason": {
                    "type": "string",
                    "description": "Deployment status reason\n"
                },
                "taskPodNodePoolId": {
                    "type": "string",
                    "description": "Deployment task pod node pool identifier\n"
                },
                "type": {
                    "type": "string",
                    "description": "Deployment type\n"
                },
                "updatedAt": {
                    "type": "string",
                    "description": "Deployment last updated timestamp\n"
                },
                "updatedBy": {
                    "$ref": "#/types/astronomer:index/getDeploymentsDeploymentUpdatedBy:getDeploymentsDeploymentUpdatedBy",
                    "description": "Deployment updater\n"
                },
                "webserverAirflowApiUrl": {
                    "type": "string",
                    "description": "Deployment webserver Airflow API URL\n"
                },
                "webserverIngressHostname": {
                    "type": "string",
                    "description": "Deployment webserver ingress hostname\n"
                },
                "webserverUrl": {
                    "type": "string",
                    "description": "Deployment webserver URL\n"
                },
                "workerQueues": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/astronomer:index/getDeploymentsDeploymentWorkerQueue:getDeploymentsDeploymentWorkerQueue"
                    },
                    "description": "Deployment worker queues\n"
                },
                "workloadIdentity": {
                    "type": "string",
                    "description": "Deployment workload identity\n"
                },
                "workspaceId": {
                    "type": "string",
                    "description": "Deployment workspace identifier\n"
                }
            },
            "type": "object",
            "required": [
                "airflowVersion",
                "astroRuntimeVersion",
                "cloudProvider",
                "clusterId",
                "contactEmails",
                "createdAt",
                "createdBy",
                "dagTarballVersion",
                "defaultTaskPodCpu",
                "defaultTaskPodMemory",
                "description",
                "desiredDagTarballVersion",
                "environmentVariables",
                "executor",
                "externalIps",
                "id",
                "imageRepository",
                "imageTag",
                "imageVersion",
                "isCicdEnforced",
                "isDagDeployEnabled",
                "isDevelopmentMode",
                "isHighAvailability",
                "name",
                "namespace",
                "oidcIssuerUrl",
                "region",
                "resourceQuotaCpu",
                "resourceQuotaMemory",
                "scalingSpec",
                "scalingStatus",
                "schedulerAu",
                "schedulerCpu",
                "schedulerMemory",
                "schedulerReplicas",
                "schedulerSize",
                "status",
                "statusReason",
                "taskPodNodePoolId",
                "type",
                "updatedAt",
                "updatedBy",
                "webserverAirflowApiUrl",
                "webserverIngressHostname",
                "webserverUrl",
                "workerQueues",
                "workloadIdentity",
                "workspaceId"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "astronomer:index/getDeploymentsDeploymentCreatedBy:getDeploymentsDeploymentCreatedBy": {
            "properties": {
                "apiTokenName": {
                    "type": "string"
                },
                "avatarUrl": {
                    "type": "string"
                },
                "fullName": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "subjectType": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "apiTokenName",
                "avatarUrl",
                "fullName",
                "id",
                "subjectType",
                "username"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "astronomer:index/getDeploymentsDeploymentEnvironmentVariable:getDeploymentsDeploymentEnvironmentVariable": {
            "properties": {
                "isSecret": {
                    "type": "boolean",
                    "description": "Whether Environment variable is a secret\n"
                },
                "key": {
                    "type": "string",
                    "description": "Environment variable key\n"
                },
                "updatedAt": {
                    "type": "string",
                    "description": "Environment variable last updated timestamp\n"
                },
                "value": {
                    "type": "string",
                    "description": "Environment variable value\n"
                }
            },
            "type": "object",
            "required": [
                "isSecret",
                "key",
                "updatedAt",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "astronomer:index/getDeploymentsDeploymentScalingSpec:getDeploymentsDeploymentScalingSpec": {
            "properties": {
                "hibernationSpec": {
                    "$ref": "#/types/astronomer:index/getDeploymentsDeploymentScalingSpecHibernationSpec:getDeploymentsDeploymentScalingSpecHibernationSpec"
                }
            },
            "type": "object",
            "required": [
                "hibernationSpec"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "astronomer:index/getDeploymentsDeploymentScalingSpecHibernationSpec:getDeploymentsDeploymentScalingSpecHibernationSpec": {
            "properties": {
                "override": {
                    "$ref": "#/types/astronomer:index/getDeploymentsDeploymentScalingSpecHibernationSpecOverride:getDeploymentsDeploymentScalingSpecHibernationSpecOverride"
                },
                "schedules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/astronomer:index/getDeploymentsDeploymentScalingSpecHibernationSpecSchedule:getDeploymentsDeploymentScalingSpecHibernationSpecSchedule"
                    }
                }
            },
            "type": "object",
            "required": [
                "override",
                "schedules"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "astronomer:index/getDeploymentsDeploymentScalingSpecHibernationSpecOverride:getDeploymentsDeploymentScalingSpecHibernationSpecOverride": {
            "properties": {
                "isActive": {
                    "type": "boolean",
                    "description": "Whether the override is active\n"
                },
                "isHibernating": {
                    "type": "boolean",
                    "description": "Whether the override is hibernating\n"
                },
                "overrideUntil": {
                    "type": "string",
                    "description": "Time until the override is active\n"
                }
            },
            "type": "object",
            "required": [
                "isActive",
                "isHibernating",
                "overrideUntil"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "astronomer:index/getDeploymentsDeploymentScalingSpecHibernationSpecSchedule:getDeploymentsDeploymentScalingSpecHibernationSpecSchedule": {
            "properties": {
                "description": {
                    "type": "string",
                    "description": "Description of the schedule\n"
                },
                "hibernateAtCron": {
                    "type": "string",
                    "description": "Cron expression for hibernation\n"
                },
                "isEnabled": {
                    "type": "boolean",
                    "description": "Whether the schedule is enabled\n"
                },
                "wakeAtCron": {
                    "type": "string",
                    "description": "Cron expression for waking\n"
                }
            },
            "type": "object",
            "required": [
                "description",
                "hibernateAtCron",
                "isEnabled",
                "wakeAtCron"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "astronomer:index/getDeploymentsDeploymentScalingStatus:getDeploymentsDeploymentScalingStatus": {
            "properties": {
                "hibernationStatus": {
                    "$ref": "#/types/astronomer:index/getDeploymentsDeploymentScalingStatusHibernationStatus:getDeploymentsDeploymentScalingStatusHibernationStatus"
                }
            },
            "type": "object",
            "required": [
                "hibernationStatus"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "astronomer:index/getDeploymentsDeploymentScalingStatusHibernationStatus:getDeploymentsDeploymentScalingStatusHibernationStatus": {
            "properties": {
                "isHibernating": {
                    "type": "boolean",
                    "description": "Whether the deployment is hibernating\n"
                },
                "nextEventAt": {
                    "type": "string",
                    "description": "Time of the next event\n"
                },
                "nextEventType": {
                    "type": "string",
                    "description": "Type of the next event\n"
                },
                "reason": {
                    "type": "string",
                    "description": "Reason for the current state\n"
                }
            },
            "type": "object",
            "required": [
                "isHibernating",
                "nextEventAt",
                "nextEventType",
                "reason"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "astronomer:index/getDeploymentsDeploymentUpdatedBy:getDeploymentsDeploymentUpdatedBy": {
            "properties": {
                "apiTokenName": {
                    "type": "string"
                },
                "avatarUrl": {
                    "type": "string"
                },
                "fullName": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "subjectType": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "apiTokenName",
                "avatarUrl",
                "fullName",
                "id",
                "subjectType",
                "username"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "astronomer:index/getDeploymentsDeploymentWorkerQueue:getDeploymentsDeploymentWorkerQueue": {
            "properties": {
                "astroMachine": {
                    "type": "string",
                    "description": "Worker queue Astro machine value\n"
                },
                "id": {
                    "type": "string",
                    "description": "Worker queue identifier\n"
                },
                "isDefault": {
                    "type": "boolean",
                    "description": "Whether Worker queue is default\n"
                },
                "maxWorkerCount": {
                    "type": "integer",
                    "description": "Worker queue max worker count\n"
                },
                "minWorkerCount": {
                    "type": "integer",
                    "description": "Worker queue min worker count\n"
                },
                "name": {
                    "type": "string",
                    "description": "Worker queue name\n"
                },
                "nodePoolId": {
                    "type": "string",
                    "description": "Worker queue node pool identifier\n"
                },
                "podCpu": {
                    "type": "string",
                    "description": "Worker queue pod CPU\n"
                },
                "podMemory": {
                    "type": "string",
                    "description": "Worker queue pod memory\n"
                },
                "workerConcurrency": {
                    "type": "integer",
                    "description": "Worker queue worker concurrency\n"
                }
            },
            "type": "object",
            "required": [
                "astroMachine",
                "id",
                "isDefault",
                "maxWorkerCount",
                "minWorkerCount",
                "name",
                "nodePoolId",
                "podCpu",
                "podMemory",
                "workerConcurrency"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "astronomer:index/getOrganizationCreatedBy:getOrganizationCreatedBy": {
            "properties": {
                "apiTokenName": {
                    "type": "string"
                },
                "avatarUrl": {
                    "type": "string"
                },
                "fullName": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "subjectType": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "apiTokenName",
                "avatarUrl",
                "fullName",
                "id",
                "subjectType",
                "username"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "astronomer:index/getOrganizationUpdatedBy:getOrganizationUpdatedBy": {
            "properties": {
                "apiTokenName": {
                    "type": "string"
                },
                "avatarUrl": {
                    "type": "string"
                },
                "fullName": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "subjectType": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "apiTokenName",
                "avatarUrl",
                "fullName",
                "id",
                "subjectType",
                "username"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "astronomer:index/getTeamCreatedBy:getTeamCreatedBy": {
            "properties": {
                "apiTokenName": {
                    "type": "string"
                },
                "avatarUrl": {
                    "type": "string"
                },
                "fullName": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "subjectType": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "apiTokenName",
                "avatarUrl",
                "fullName",
                "id",
                "subjectType",
                "username"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "astronomer:index/getTeamDeploymentRole:getTeamDeploymentRole": {
            "properties": {
                "deploymentId": {
                    "type": "string",
                    "description": "The ID of the deployment the role is assigned to\n"
                },
                "role": {
                    "type": "string",
                    "description": "The role assigned to the deployment\n"
                }
            },
            "type": "object",
            "required": [
                "deploymentId",
                "role"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "astronomer:index/getTeamUpdatedBy:getTeamUpdatedBy": {
            "properties": {
                "apiTokenName": {
                    "type": "string"
                },
                "avatarUrl": {
                    "type": "string"
                },
                "fullName": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "subjectType": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "apiTokenName",
                "avatarUrl",
                "fullName",
                "id",
                "subjectType",
                "username"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "astronomer:index/getTeamWorkspaceRole:getTeamWorkspaceRole": {
            "properties": {
                "role": {
                    "type": "string",
                    "description": "The role assigned to the workspace\n"
                },
                "workspaceId": {
                    "type": "string",
                    "description": "The ID of the workspace the role is assigned to\n"
                }
            },
            "type": "object",
            "required": [
                "role",
                "workspaceId"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "astronomer:index/getTeamsTeam:getTeamsTeam": {
            "properties": {
                "createdAt": {
                    "type": "string",
                    "description": "Team creation timestamp\n"
                },
                "createdBy": {
                    "$ref": "#/types/astronomer:index/getTeamsTeamCreatedBy:getTeamsTeamCreatedBy",
                    "description": "Team creator\n"
                },
                "deploymentRoles": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/astronomer:index/getTeamsTeamDeploymentRole:getTeamsTeamDeploymentRole"
                    },
                    "description": "The roles assigned to the Deployments\n"
                },
                "description": {
                    "type": "string",
                    "description": "Team description\n"
                },
                "id": {
                    "type": "string",
                    "description": "Team ID\n"
                },
                "isIdpManaged": {
                    "type": "boolean",
                    "description": "Whether the Team is managed by an identity provider\n"
                },
                "name": {
                    "type": "string",
                    "description": "Team name\n"
                },
                "organizationRole": {
                    "type": "string",
                    "description": "The role assigned to the Organization\n"
                },
                "rolesCount": {
                    "type": "integer",
                    "description": "Number of roles assigned to the Team\n"
                },
                "updatedAt": {
                    "type": "string",
                    "description": "Team last updated timestamp\n"
                },
                "updatedBy": {
                    "$ref": "#/types/astronomer:index/getTeamsTeamUpdatedBy:getTeamsTeamUpdatedBy",
                    "description": "Team updater\n"
                },
                "workspaceRoles": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/astronomer:index/getTeamsTeamWorkspaceRole:getTeamsTeamWorkspaceRole"
                    },
                    "description": "The roles assigned to the Workspaces\n"
                }
            },
            "type": "object",
            "required": [
                "createdAt",
                "createdBy",
                "deploymentRoles",
                "description",
                "id",
                "isIdpManaged",
                "name",
                "organizationRole",
                "rolesCount",
                "updatedAt",
                "updatedBy",
                "workspaceRoles"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "astronomer:index/getTeamsTeamCreatedBy:getTeamsTeamCreatedBy": {
            "properties": {
                "apiTokenName": {
                    "type": "string"
                },
                "avatarUrl": {
                    "type": "string"
                },
                "fullName": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "subjectType": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "apiTokenName",
                "avatarUrl",
                "fullName",
                "id",
                "subjectType",
                "username"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "astronomer:index/getTeamsTeamDeploymentRole:getTeamsTeamDeploymentRole": {
            "properties": {
                "deploymentId": {
                    "type": "string",
                    "description": "The ID of the deployment the role is assigned to\n"
                },
                "role": {
                    "type": "string",
                    "description": "The role assigned to the deployment\n"
                }
            },
            "type": "object",
            "required": [
                "deploymentId",
                "role"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "astronomer:index/getTeamsTeamUpdatedBy:getTeamsTeamUpdatedBy": {
            "properties": {
                "apiTokenName": {
                    "type": "string"
                },
                "avatarUrl": {
                    "type": "string"
                },
                "fullName": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "subjectType": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "apiTokenName",
                "avatarUrl",
                "fullName",
                "id",
                "subjectType",
                "username"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "astronomer:index/getTeamsTeamWorkspaceRole:getTeamsTeamWorkspaceRole": {
            "properties": {
                "role": {
                    "type": "string",
                    "description": "The role assigned to the workspace\n"
                },
                "workspaceId": {
                    "type": "string",
                    "description": "The ID of the workspace the role is assigned to\n"
                }
            },
            "type": "object",
            "required": [
                "role",
                "workspaceId"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "astronomer:index/getUserDeploymentRole:getUserDeploymentRole": {
            "properties": {
                "deploymentId": {
                    "type": "string",
                    "description": "The ID of the deployment the role is assigned to\n"
                },
                "role": {
                    "type": "string",
                    "description": "The role assigned to the deployment\n"
                }
            },
            "type": "object",
            "required": [
                "deploymentId",
                "role"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "astronomer:index/getUserWorkspaceRole:getUserWorkspaceRole": {
            "properties": {
                "role": {
                    "type": "string",
                    "description": "The role assigned to the workspace\n"
                },
                "workspaceId": {
                    "type": "string",
                    "description": "The ID of the workspace the role is assigned to\n"
                }
            },
            "type": "object",
            "required": [
                "role",
                "workspaceId"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "astronomer:index/getUsersUser:getUsersUser": {
            "properties": {
                "avatarUrl": {
                    "type": "string",
                    "description": "User avatar URL\n"
                },
                "createdAt": {
                    "type": "string",
                    "description": "User creation timestamp\n"
                },
                "deploymentRoles": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/astronomer:index/getUsersUserDeploymentRole:getUsersUserDeploymentRole"
                    },
                    "description": "The roles assigned to the deployments\n"
                },
                "fullName": {
                    "type": "string",
                    "description": "User full name\n"
                },
                "id": {
                    "type": "string",
                    "description": "User identifier\n"
                },
                "organizationRole": {
                    "type": "string",
                    "description": "The role assigned to the organization\n"
                },
                "status": {
                    "type": "string",
                    "description": "User status\n"
                },
                "updatedAt": {
                    "type": "string",
                    "description": "User last updated timestamp\n"
                },
                "username": {
                    "type": "string",
                    "description": "User username\n"
                },
                "workspaceRoles": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/astronomer:index/getUsersUserWorkspaceRole:getUsersUserWorkspaceRole"
                    },
                    "description": "The roles assigned to the workspaces\n"
                }
            },
            "type": "object",
            "required": [
                "avatarUrl",
                "createdAt",
                "deploymentRoles",
                "fullName",
                "id",
                "organizationRole",
                "status",
                "updatedAt",
                "username",
                "workspaceRoles"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "astronomer:index/getUsersUserDeploymentRole:getUsersUserDeploymentRole": {
            "properties": {
                "deploymentId": {
                    "type": "string",
                    "description": "The ID of the deployment the role is assigned to\n"
                },
                "role": {
                    "type": "string",
                    "description": "The role assigned to the deployment\n"
                }
            },
            "type": "object",
            "required": [
                "deploymentId",
                "role"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "astronomer:index/getUsersUserWorkspaceRole:getUsersUserWorkspaceRole": {
            "properties": {
                "role": {
                    "type": "string",
                    "description": "The role assigned to the workspace\n"
                },
                "workspaceId": {
                    "type": "string",
                    "description": "The ID of the workspace the role is assigned to\n"
                }
            },
            "type": "object",
            "required": [
                "role",
                "workspaceId"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "astronomer:index/getWorkspaceCreatedBy:getWorkspaceCreatedBy": {
            "properties": {
                "apiTokenName": {
                    "type": "string"
                },
                "avatarUrl": {
                    "type": "string"
                },
                "fullName": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "subjectType": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "apiTokenName",
                "avatarUrl",
                "fullName",
                "id",
                "subjectType",
                "username"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "astronomer:index/getWorkspaceUpdatedBy:getWorkspaceUpdatedBy": {
            "properties": {
                "apiTokenName": {
                    "type": "string"
                },
                "avatarUrl": {
                    "type": "string"
                },
                "fullName": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "subjectType": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "apiTokenName",
                "avatarUrl",
                "fullName",
                "id",
                "subjectType",
                "username"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "astronomer:index/getWorkspacesWorkspace:getWorkspacesWorkspace": {
            "properties": {
                "cicdEnforcedDefault": {
                    "type": "boolean",
                    "description": "Whether new Deployments enforce CI/CD deploys by default\n"
                },
                "createdAt": {
                    "type": "string",
                    "description": "Workspace creation timestamp\n"
                },
                "createdBy": {
                    "$ref": "#/types/astronomer:index/getWorkspacesWorkspaceCreatedBy:getWorkspacesWorkspaceCreatedBy",
                    "description": "Workspace creator\n"
                },
                "description": {
                    "type": "string",
                    "description": "Workspace description\n"
                },
                "id": {
                    "type": "string",
                    "description": "Workspace identifier\n"
                },
                "name": {
                    "type": "string",
                    "description": "Workspace name\n"
                },
                "updatedAt": {
                    "type": "string",
                    "description": "Workspace last updated timestamp\n"
                },
                "updatedBy": {
                    "$ref": "#/types/astronomer:index/getWorkspacesWorkspaceUpdatedBy:getWorkspacesWorkspaceUpdatedBy",
                    "description": "Workspace updater\n"
                }
            },
            "type": "object",
            "required": [
                "cicdEnforcedDefault",
                "createdAt",
                "createdBy",
                "description",
                "id",
                "name",
                "updatedAt",
                "updatedBy"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "astronomer:index/getWorkspacesWorkspaceCreatedBy:getWorkspacesWorkspaceCreatedBy": {
            "properties": {
                "apiTokenName": {
                    "type": "string"
                },
                "avatarUrl": {
                    "type": "string"
                },
                "fullName": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "subjectType": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "apiTokenName",
                "avatarUrl",
                "fullName",
                "id",
                "subjectType",
                "username"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "astronomer:index/getWorkspacesWorkspaceUpdatedBy:getWorkspacesWorkspaceUpdatedBy": {
            "properties": {
                "apiTokenName": {
                    "type": "string"
                },
                "avatarUrl": {
                    "type": "string"
                },
                "fullName": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "subjectType": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "apiTokenName",
                "avatarUrl",
                "fullName",
                "id",
                "subjectType",
                "username"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        }
    },
    "provider": {
        "description": "The provider type for the astro package. By default, resources use package-wide configuration\nsettings, however an explicit `Provider` instance may be created and passed during resource\nconstruction to achieve fine-grained programmatic control over provider settings. See the\n[documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.\n",
        "properties": {
            "host": {
                "type": "string",
                "description": "API host to use for the provider. Default is `https://api.astronomer.io`\n"
            },
            "organizationId": {
                "type": "string",
                "description": "Organization ID this provider will operate on.\n"
            },
            "token": {
                "type": "string",
                "description": "Astro API Token. Can be set with an `ASTRO_API_TOKEN` env var.\n",
                "secret": true
            }
        },
        "required": [
            "organizationId"
        ],
        "inputProperties": {
            "host": {
                "type": "string",
                "description": "API host to use for the provider. Default is `https://api.astronomer.io`\n"
            },
            "organizationId": {
                "type": "string",
                "description": "Organization ID this provider will operate on.\n"
            },
            "token": {
                "type": "string",
                "description": "Astro API Token. Can be set with an `ASTRO_API_TOKEN` env var.\n",
                "defaultInfo": {
                    "environment": [
                        "ASTRO_API_TOKEN"
                    ]
                },
                "secret": true
            }
        },
        "requiredInputs": [
            "organizationId"
        ]
    },
    "resources": {
        "astronomer:index/apiToken:ApiToken": {
            "description": "API Token resource\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.astronomer.ApiToken;\nimport com.pulumi.astronomer.ApiTokenArgs;\nimport com.pulumi.astronomer.inputs.ApiTokenRoleArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var organizationToken = new ApiToken(\"organizationToken\", ApiTokenArgs.builder()\n            .description(\"organization api token description\")\n            .type(\"ORGANIZATION\")\n            .roles(ApiTokenRoleArgs.builder()\n%!v(PANIC=Format method: interface conversion: model.Expression is *model.TemplateExpression, not *model.LiteralValueExpression))\n                .expiryPeriodInDays(30)\n                .build());\n\n            var organizationTokenWithMultipleRoles = new ApiToken(\"organizationTokenWithMultipleRoles\", ApiTokenArgs.builder()\n                .description(\"organization api token description\")\n                .type(\"ORGANIZATION\")\n                .roles(                \n                    ApiTokenRoleArgs.builder()\n%!v(PANIC=Format method: interface conversion: model.Expression is *model.TemplateExpression, not *model.LiteralValueExpression),\n                        ApiTokenRoleArgs.builder()\n%!v(PANIC=Format method: interface conversion: model.Expression is *model.TemplateExpression, not *model.LiteralValueExpression),\n                            ApiTokenRoleArgs.builder()\n%!v(PANIC=Format method: interface conversion: model.Expression is *model.TemplateExpression, not *model.LiteralValueExpression))\n                            .build());\n\n                        var workspaceToken = new ApiToken(\"workspaceToken\", ApiTokenArgs.builder()\n                            .description(\"workspace api token description\")\n                            .type(\"WORKSPACE\")\n                            .roles(ApiTokenRoleArgs.builder()\n%!v(PANIC=Format method: interface conversion: model.Expression is *model.TemplateExpression, not *model.LiteralValueExpression))\n                                .build());\n\n                            var workspaceTokenWithDeploymentRole = new ApiToken(\"workspaceTokenWithDeploymentRole\", ApiTokenArgs.builder()\n                                .description(\"workspace api token description\")\n                                .type(\"WORKSPACE\")\n                                .roles(                                \n                                    ApiTokenRoleArgs.builder()\n%!v(PANIC=Format method: interface conversion: model.Expression is *model.TemplateExpression, not *model.LiteralValueExpression),\n                                        ApiTokenRoleArgs.builder()\n%!v(PANIC=Format method: interface conversion: model.Expression is *model.TemplateExpression, not *model.LiteralValueExpression))\n                                        .build());\n\n                                    var deploymentToken = new ApiToken(\"deploymentToken\", ApiTokenArgs.builder()\n                                        .description(\"deployment api token description\")\n                                        .type(\"DEPLOYMENT\")\n                                        .roles(ApiTokenRoleArgs.builder()\n%!v(PANIC=Format method: interface conversion: model.Expression is *model.TemplateExpression, not *model.LiteralValueExpression))\n                                            .build());\n\n                                        var deploymentTokenWithCustomRole = new ApiToken(\"deploymentTokenWithCustomRole\", ApiTokenArgs.builder()\n                                            .description(\"deployment api token description\")\n                                            .type(\"DEPLOYMENT\")\n                                            .roles(ApiTokenRoleArgs.builder()\n%!v(PANIC=Format method: interface conversion: model.Expression is *model.TemplateExpression, not *model.LiteralValueExpression))\n                                                .build());\n\n                                            var importedApiToken = new ApiToken(\"importedApiToken\", ApiTokenArgs.builder()\n                                                .description(\"imported api token description\")\n                                                .type(\"ORGANIZATION\")\n                                                .roles(ApiTokenRoleArgs.builder()\n%!v(PANIC=Format method: interface conversion: model.Expression is *model.TemplateExpression, not *model.LiteralValueExpression))\n                                                    .build());\n\n                                            }\n}\n```\n```yaml\nresources:\n  organizationToken:\n    type: astronomer:ApiToken\n    properties:\n      description: organization api token description\n      type: ORGANIZATION\n      roles:\n        - role: ORGANIZATION_OWNER\n          entity_id: clx42kkcm01fo01o06agtmshg\n          entity_type: ORGANIZATION\n      expiryPeriodInDays: 30\n  organizationTokenWithMultipleRoles:\n    type: astronomer:ApiToken\n    properties:\n      description: organization api token description\n      type: ORGANIZATION\n      roles:\n        - role: ORGANIZATION_OWNER\n          entity_id: clx42kkcm01fo01o06agtmshg\n          entity_type: ORGANIZATION\n        - role: WORKSPACE_OWNER\n          entity_id: clx42sxw501gl01o0gjenthnh\n          entity_type: WORKSPACE\n        - role: DEPLOYMENT_ADMIN\n          entity_id: clyn6kxud003x01mtxmccegnh\n          entity_type: DEPLOYMENT\n  workspaceToken:\n    type: astronomer:ApiToken\n    properties:\n      description: workspace api token description\n      type: WORKSPACE\n      roles:\n        - role: WORKSPACE_OWNER\n          entity_id: clx42sxw501gl01o0gjenthnh\n          entity_type: WORKSPACE\n  workspaceTokenWithDeploymentRole:\n    type: astronomer:ApiToken\n    properties:\n      description: workspace api token description\n      type: WORKSPACE\n      roles:\n        - role: WORKSPACE_OWNER\n          entity_id: clx42sxw501gl01o0gjenthnh\n          entity_type: WORKSPACE\n        - role: DEPLOYMENT_ADMIN\n          entity_id: clyn6kxud003x01mtxmccegnh\n          entity_type: DEPLOYMENT\n  deploymentToken:\n    type: astronomer:ApiToken\n    properties:\n      description: deployment api token description\n      type: DEPLOYMENT\n      roles:\n        - role: DEPLOYMENT_ADMIN\n          entity_id: clyn6kxud003x01mtxmccegnh\n          entity_type: DEPLOYMENT\n  deploymentTokenWithCustomRole:\n    type: astronomer:ApiToken\n    properties:\n      description: deployment api token description\n      type: DEPLOYMENT\n      roles:\n        - role: CUSTOM_ROLE\n          entity_id: clyn6kxud003x01mtxmccegnh\n          entity_type: DEPLOYMENT\n  importedApiToken:\n    type: astronomer:ApiToken\n    properties:\n      description: imported api token description\n      type: ORGANIZATION\n      roles:\n        - role: ORGANIZATION_OWNER\n          entity_id: clx42kkcm01fo01o06agtmshg\n          entity_type: ORGANIZATION\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "properties": {
                "createdAt": {
                    "type": "string",
                    "description": "API Token creation timestamp\n"
                },
                "createdBy": {
                    "$ref": "#/types/astronomer:index/ApiTokenCreatedBy:ApiTokenCreatedBy",
                    "description": "API Token creator\n"
                },
                "description": {
                    "type": "string",
                    "description": "API Token description\n"
                },
                "endAt": {
                    "type": "string",
                    "description": "time when the API token will expire in UTC\n"
                },
                "expiryPeriodInDays": {
                    "type": "integer",
                    "description": "API Token expiry period in days\n"
                },
                "lastUsedAt": {
                    "type": "string",
                    "description": "API Token last used timestamp\n"
                },
                "name": {
                    "type": "string",
                    "description": "API Token name\n"
                },
                "roles": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/astronomer:index/ApiTokenRole:ApiTokenRole"
                    },
                    "description": "The roles assigned to the API Token\n"
                },
                "shortToken": {
                    "type": "string",
                    "description": "API Token short token\n"
                },
                "startAt": {
                    "type": "string",
                    "description": "time when the API token will become valid in UTC\n"
                },
                "token": {
                    "type": "string",
                    "secret": true
                },
                "type": {
                    "type": "string",
                    "description": "API Token type - if changing this value, the API Token will be recreated with the new type\n"
                },
                "updatedAt": {
                    "type": "string",
                    "description": "API Token last updated timestamp\n"
                },
                "updatedBy": {
                    "$ref": "#/types/astronomer:index/ApiTokenUpdatedBy:ApiTokenUpdatedBy",
                    "description": "API Token updater\n"
                }
            },
            "required": [
                "createdAt",
                "createdBy",
                "endAt",
                "lastUsedAt",
                "name",
                "roles",
                "shortToken",
                "startAt",
                "token",
                "type",
                "updatedAt",
                "updatedBy"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "API Token description\n"
                },
                "expiryPeriodInDays": {
                    "type": "integer",
                    "description": "API Token expiry period in days\n"
                },
                "name": {
                    "type": "string",
                    "description": "API Token name\n"
                },
                "roles": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/astronomer:index/ApiTokenRole:ApiTokenRole"
                    },
                    "description": "The roles assigned to the API Token\n"
                },
                "type": {
                    "type": "string",
                    "description": "API Token type - if changing this value, the API Token will be recreated with the new type\n"
                }
            },
            "requiredInputs": [
                "roles",
                "type"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ApiToken resources.\n",
                "properties": {
                    "createdAt": {
                        "type": "string",
                        "description": "API Token creation timestamp\n"
                    },
                    "createdBy": {
                        "$ref": "#/types/astronomer:index/ApiTokenCreatedBy:ApiTokenCreatedBy",
                        "description": "API Token creator\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "API Token description\n"
                    },
                    "endAt": {
                        "type": "string",
                        "description": "time when the API token will expire in UTC\n"
                    },
                    "expiryPeriodInDays": {
                        "type": "integer",
                        "description": "API Token expiry period in days\n"
                    },
                    "lastUsedAt": {
                        "type": "string",
                        "description": "API Token last used timestamp\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "API Token name\n"
                    },
                    "roles": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/astronomer:index/ApiTokenRole:ApiTokenRole"
                        },
                        "description": "The roles assigned to the API Token\n"
                    },
                    "shortToken": {
                        "type": "string",
                        "description": "API Token short token\n"
                    },
                    "startAt": {
                        "type": "string",
                        "description": "time when the API token will become valid in UTC\n"
                    },
                    "token": {
                        "type": "string",
                        "secret": true
                    },
                    "type": {
                        "type": "string",
                        "description": "API Token type - if changing this value, the API Token will be recreated with the new type\n"
                    },
                    "updatedAt": {
                        "type": "string",
                        "description": "API Token last updated timestamp\n"
                    },
                    "updatedBy": {
                        "$ref": "#/types/astronomer:index/ApiTokenUpdatedBy:ApiTokenUpdatedBy",
                        "description": "API Token updater\n"
                    }
                },
                "type": "object"
            }
        },
        "astronomer:index/cluster:Cluster": {
            "description": "Cluster resource. If creating multiple clusters, add a delay between each cluster creation to avoid cluster creation limiting errors.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as astronomer from \"@ryan-pip/pulumi_astronomer\";\n\nconst awsExample = new astronomer.Cluster(\"awsExample\", {\n    type: \"DEDICATED\",\n    region: \"us-east-1\",\n    cloudProvider: \"AWS\",\n    vpcSubnetRange: \"172.20.0.0/20\",\n    workspaceIds: [],\n    timeouts: {\n        create: \"3h\",\n        update: \"2h\",\n        \"delete\": \"1h\",\n    },\n});\nconst azureExample = new astronomer.Cluster(\"azureExample\", {\n    type: \"DEDICATED\",\n    region: \"westus2\",\n    cloudProvider: \"AZURE\",\n    vpcSubnetRange: \"172.20.0.0/19\",\n    workspaceIds: [\"clv4wcf6f003u01m3zp7gsvzg\"],\n});\nconst gcpExample = new astronomer.Cluster(\"gcpExample\", {\n    type: \"DEDICATED\",\n    region: \"us-central1\",\n    cloudProvider: \"GCP\",\n    podSubnetRange: \"172.21.0.0/19\",\n    servicePeeringRange: \"172.23.0.0/20\",\n    serviceSubnetRange: \"172.22.0.0/22\",\n    vpcSubnetRange: \"172.20.0.0/22\",\n    workspaceIds: [],\n});\nconst importedCluster = new astronomer.Cluster(\"importedCluster\", {\n    type: \"DEDICATED\",\n    region: \"us-central1\",\n    cloudProvider: \"GCP\",\n    podSubnetRange: \"172.21.0.0/19\",\n    servicePeeringRange: \"172.23.0.0/20\",\n    serviceSubnetRange: \"172.22.0.0/22\",\n    vpcSubnetRange: \"172.20.0.0/22\",\n    workspaceIds: [],\n});\n```\n```python\nimport pulumi\nimport pulumi_astronomer as astronomer\n\naws_example = astronomer.Cluster(\"awsExample\",\n    type=\"DEDICATED\",\n    region=\"us-east-1\",\n    cloud_provider=\"AWS\",\n    vpc_subnet_range=\"172.20.0.0/20\",\n    workspace_ids=[],\n    timeouts={\n        \"create\": \"3h\",\n        \"update\": \"2h\",\n        \"delete\": \"1h\",\n    })\nazure_example = astronomer.Cluster(\"azureExample\",\n    type=\"DEDICATED\",\n    region=\"westus2\",\n    cloud_provider=\"AZURE\",\n    vpc_subnet_range=\"172.20.0.0/19\",\n    workspace_ids=[\"clv4wcf6f003u01m3zp7gsvzg\"])\ngcp_example = astronomer.Cluster(\"gcpExample\",\n    type=\"DEDICATED\",\n    region=\"us-central1\",\n    cloud_provider=\"GCP\",\n    pod_subnet_range=\"172.21.0.0/19\",\n    service_peering_range=\"172.23.0.0/20\",\n    service_subnet_range=\"172.22.0.0/22\",\n    vpc_subnet_range=\"172.20.0.0/22\",\n    workspace_ids=[])\nimported_cluster = astronomer.Cluster(\"importedCluster\",\n    type=\"DEDICATED\",\n    region=\"us-central1\",\n    cloud_provider=\"GCP\",\n    pod_subnet_range=\"172.21.0.0/19\",\n    service_peering_range=\"172.23.0.0/20\",\n    service_subnet_range=\"172.22.0.0/22\",\n    vpc_subnet_range=\"172.20.0.0/22\",\n    workspace_ids=[])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Astronomer = RyanPip.Astronomer;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var awsExample = new Astronomer.Cluster(\"awsExample\", new()\n    {\n        Type = \"DEDICATED\",\n        Region = \"us-east-1\",\n        CloudProvider = \"AWS\",\n        VpcSubnetRange = \"172.20.0.0/20\",\n        WorkspaceIds = new[] {},\n        Timeouts = new Astronomer.Inputs.ClusterTimeoutsArgs\n        {\n            Create = \"3h\",\n            Update = \"2h\",\n            Delete = \"1h\",\n        },\n    });\n\n    var azureExample = new Astronomer.Cluster(\"azureExample\", new()\n    {\n        Type = \"DEDICATED\",\n        Region = \"westus2\",\n        CloudProvider = \"AZURE\",\n        VpcSubnetRange = \"172.20.0.0/19\",\n        WorkspaceIds = new[]\n        {\n            \"clv4wcf6f003u01m3zp7gsvzg\",\n        },\n    });\n\n    var gcpExample = new Astronomer.Cluster(\"gcpExample\", new()\n    {\n        Type = \"DEDICATED\",\n        Region = \"us-central1\",\n        CloudProvider = \"GCP\",\n        PodSubnetRange = \"172.21.0.0/19\",\n        ServicePeeringRange = \"172.23.0.0/20\",\n        ServiceSubnetRange = \"172.22.0.0/22\",\n        VpcSubnetRange = \"172.20.0.0/22\",\n        WorkspaceIds = new[] {},\n    });\n\n    var importedCluster = new Astronomer.Cluster(\"importedCluster\", new()\n    {\n        Type = \"DEDICATED\",\n        Region = \"us-central1\",\n        CloudProvider = \"GCP\",\n        PodSubnetRange = \"172.21.0.0/19\",\n        ServicePeeringRange = \"172.23.0.0/20\",\n        ServiceSubnetRange = \"172.22.0.0/22\",\n        VpcSubnetRange = \"172.20.0.0/22\",\n        WorkspaceIds = new[] {},\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/ryan-pip/pulumi-astronomer/sdk/go/astronomer\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := astronomer.NewCluster(ctx, \"awsExample\", \u0026astronomer.ClusterArgs{\n\t\t\tType:           pulumi.String(\"DEDICATED\"),\n\t\t\tRegion:         pulumi.String(\"us-east-1\"),\n\t\t\tCloudProvider:  pulumi.String(\"AWS\"),\n\t\t\tVpcSubnetRange: pulumi.String(\"172.20.0.0/20\"),\n\t\t\tWorkspaceIds:   pulumi.StringArray{},\n\t\t\tTimeouts: \u0026astronomer.ClusterTimeoutsArgs{\n\t\t\t\tCreate: pulumi.String(\"3h\"),\n\t\t\t\tUpdate: pulumi.String(\"2h\"),\n\t\t\t\tDelete: pulumi.String(\"1h\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = astronomer.NewCluster(ctx, \"azureExample\", \u0026astronomer.ClusterArgs{\n\t\t\tType:           pulumi.String(\"DEDICATED\"),\n\t\t\tRegion:         pulumi.String(\"westus2\"),\n\t\t\tCloudProvider:  pulumi.String(\"AZURE\"),\n\t\t\tVpcSubnetRange: pulumi.String(\"172.20.0.0/19\"),\n\t\t\tWorkspaceIds: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"clv4wcf6f003u01m3zp7gsvzg\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = astronomer.NewCluster(ctx, \"gcpExample\", \u0026astronomer.ClusterArgs{\n\t\t\tType:                pulumi.String(\"DEDICATED\"),\n\t\t\tRegion:              pulumi.String(\"us-central1\"),\n\t\t\tCloudProvider:       pulumi.String(\"GCP\"),\n\t\t\tPodSubnetRange:      pulumi.String(\"172.21.0.0/19\"),\n\t\t\tServicePeeringRange: pulumi.String(\"172.23.0.0/20\"),\n\t\t\tServiceSubnetRange:  pulumi.String(\"172.22.0.0/22\"),\n\t\t\tVpcSubnetRange:      pulumi.String(\"172.20.0.0/22\"),\n\t\t\tWorkspaceIds:        pulumi.StringArray{},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = astronomer.NewCluster(ctx, \"importedCluster\", \u0026astronomer.ClusterArgs{\n\t\t\tType:                pulumi.String(\"DEDICATED\"),\n\t\t\tRegion:              pulumi.String(\"us-central1\"),\n\t\t\tCloudProvider:       pulumi.String(\"GCP\"),\n\t\t\tPodSubnetRange:      pulumi.String(\"172.21.0.0/19\"),\n\t\t\tServicePeeringRange: pulumi.String(\"172.23.0.0/20\"),\n\t\t\tServiceSubnetRange:  pulumi.String(\"172.22.0.0/22\"),\n\t\t\tVpcSubnetRange:      pulumi.String(\"172.20.0.0/22\"),\n\t\t\tWorkspaceIds:        pulumi.StringArray{},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.astronomer.Cluster;\nimport com.pulumi.astronomer.ClusterArgs;\nimport com.pulumi.astronomer.inputs.ClusterTimeoutsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var awsExample = new Cluster(\"awsExample\", ClusterArgs.builder()\n            .type(\"DEDICATED\")\n            .region(\"us-east-1\")\n            .cloudProvider(\"AWS\")\n            .vpcSubnetRange(\"172.20.0.0/20\")\n            .workspaceIds()\n            .timeouts(ClusterTimeoutsArgs.builder()\n                .create(\"3h\")\n                .update(\"2h\")\n                .delete(\"1h\")\n                .build())\n            .build());\n\n        var azureExample = new Cluster(\"azureExample\", ClusterArgs.builder()\n            .type(\"DEDICATED\")\n            .region(\"westus2\")\n            .cloudProvider(\"AZURE\")\n            .vpcSubnetRange(\"172.20.0.0/19\")\n            .workspaceIds(\"clv4wcf6f003u01m3zp7gsvzg\")\n            .build());\n\n        var gcpExample = new Cluster(\"gcpExample\", ClusterArgs.builder()\n            .type(\"DEDICATED\")\n            .region(\"us-central1\")\n            .cloudProvider(\"GCP\")\n            .podSubnetRange(\"172.21.0.0/19\")\n            .servicePeeringRange(\"172.23.0.0/20\")\n            .serviceSubnetRange(\"172.22.0.0/22\")\n            .vpcSubnetRange(\"172.20.0.0/22\")\n            .workspaceIds()\n            .build());\n\n        var importedCluster = new Cluster(\"importedCluster\", ClusterArgs.builder()\n            .type(\"DEDICATED\")\n            .region(\"us-central1\")\n            .cloudProvider(\"GCP\")\n            .podSubnetRange(\"172.21.0.0/19\")\n            .servicePeeringRange(\"172.23.0.0/20\")\n            .serviceSubnetRange(\"172.22.0.0/22\")\n            .vpcSubnetRange(\"172.20.0.0/22\")\n            .workspaceIds()\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  awsExample:\n    type: astronomer:Cluster\n    properties:\n      type: DEDICATED\n      region: us-east-1\n      cloudProvider: AWS\n      vpcSubnetRange: 172.20.0.0/20\n      workspaceIds: []\n      timeouts:\n        create: 3h\n        update: 2h\n        delete: 1h\n  azureExample:\n    type: astronomer:Cluster\n    properties:\n      type: DEDICATED\n      region: westus2\n      cloudProvider: AZURE\n      vpcSubnetRange: 172.20.0.0/19\n      workspaceIds:\n        - clv4wcf6f003u01m3zp7gsvzg\n  gcpExample:\n    type: astronomer:Cluster\n    properties:\n      type: DEDICATED\n      region: us-central1\n      cloudProvider: GCP\n      podSubnetRange: 172.21.0.0/19\n      servicePeeringRange: 172.23.0.0/20\n      serviceSubnetRange: 172.22.0.0/22\n      vpcSubnetRange: 172.20.0.0/22\n      workspaceIds: []\n  importedCluster:\n    type: astronomer:Cluster\n    properties:\n      type: DEDICATED\n      region: us-central1\n      cloudProvider: GCP\n      podSubnetRange: 172.21.0.0/19\n      servicePeeringRange: 172.23.0.0/20\n      serviceSubnetRange: 172.22.0.0/22\n      vpcSubnetRange: 172.20.0.0/22\n      workspaceIds: []\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "properties": {
                "cloudProvider": {
                    "type": "string",
                    "description": "Cluster cloud provider - if changed, the cluster will be recreated.\n"
                },
                "createdAt": {
                    "type": "string",
                    "description": "Cluster creation timestamp\n"
                },
                "dbInstanceType": {
                    "type": "string",
                    "description": "Cluster database instance type\n"
                },
                "healthStatus": {
                    "$ref": "#/types/astronomer:index/ClusterHealthStatus:ClusterHealthStatus",
                    "description": "Cluster health status\n"
                },
                "isLimited": {
                    "type": "boolean",
                    "description": "Whether the cluster is limited\n"
                },
                "metadata": {
                    "$ref": "#/types/astronomer:index/ClusterMetadata:ClusterMetadata",
                    "description": "Cluster metadata\n"
                },
                "name": {
                    "type": "string",
                    "description": "Cluster name\n"
                },
                "nodePools": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/astronomer:index/ClusterNodePool:ClusterNodePool"
                    },
                    "description": "Cluster node pools\n"
                },
                "podSubnetRange": {
                    "type": "string",
                    "description": "Cluster pod subnet range - required for 'GCP' clusters. If changed, the cluster will be recreated.\n"
                },
                "providerAccount": {
                    "type": "string",
                    "description": "Cluster provider account\n"
                },
                "region": {
                    "type": "string",
                    "description": "Cluster region - if changed, the cluster will be recreated.\n"
                },
                "servicePeeringRange": {
                    "type": "string",
                    "description": "Cluster service peering range - required for 'GCP' clusters. If changed, the cluster will be recreated.\n"
                },
                "serviceSubnetRange": {
                    "type": "string",
                    "description": "Cluster service subnet range - required for 'GCP' clusters. If changed, the cluster will be recreated.\n"
                },
                "status": {
                    "type": "string",
                    "description": "Cluster status\n"
                },
                "tenantId": {
                    "type": "string",
                    "description": "Cluster tenant ID\n"
                },
                "timeouts": {
                    "$ref": "#/types/astronomer:index/ClusterTimeouts:ClusterTimeouts"
                },
                "type": {
                    "type": "string",
                    "description": "Cluster type\n"
                },
                "updatedAt": {
                    "type": "string",
                    "description": "Cluster last updated timestamp\n"
                },
                "vpcSubnetRange": {
                    "type": "string",
                    "description": "Cluster VPC subnet range. If changed, the cluster will be recreated.\n"
                },
                "workspaceIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Cluster workspace IDs\n"
                }
            },
            "required": [
                "cloudProvider",
                "createdAt",
                "dbInstanceType",
                "healthStatus",
                "isLimited",
                "metadata",
                "name",
                "nodePools",
                "providerAccount",
                "region",
                "status",
                "tenantId",
                "type",
                "updatedAt",
                "vpcSubnetRange",
                "workspaceIds"
            ],
            "inputProperties": {
                "cloudProvider": {
                    "type": "string",
                    "description": "Cluster cloud provider - if changed, the cluster will be recreated.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Cluster name\n"
                },
                "podSubnetRange": {
                    "type": "string",
                    "description": "Cluster pod subnet range - required for 'GCP' clusters. If changed, the cluster will be recreated.\n"
                },
                "region": {
                    "type": "string",
                    "description": "Cluster region - if changed, the cluster will be recreated.\n"
                },
                "servicePeeringRange": {
                    "type": "string",
                    "description": "Cluster service peering range - required for 'GCP' clusters. If changed, the cluster will be recreated.\n"
                },
                "serviceSubnetRange": {
                    "type": "string",
                    "description": "Cluster service subnet range - required for 'GCP' clusters. If changed, the cluster will be recreated.\n"
                },
                "timeouts": {
                    "$ref": "#/types/astronomer:index/ClusterTimeouts:ClusterTimeouts"
                },
                "type": {
                    "type": "string",
                    "description": "Cluster type\n"
                },
                "vpcSubnetRange": {
                    "type": "string",
                    "description": "Cluster VPC subnet range. If changed, the cluster will be recreated.\n"
                },
                "workspaceIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Cluster workspace IDs\n"
                }
            },
            "requiredInputs": [
                "cloudProvider",
                "region",
                "type",
                "vpcSubnetRange",
                "workspaceIds"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Cluster resources.\n",
                "properties": {
                    "cloudProvider": {
                        "type": "string",
                        "description": "Cluster cloud provider - if changed, the cluster will be recreated.\n"
                    },
                    "createdAt": {
                        "type": "string",
                        "description": "Cluster creation timestamp\n"
                    },
                    "dbInstanceType": {
                        "type": "string",
                        "description": "Cluster database instance type\n"
                    },
                    "healthStatus": {
                        "$ref": "#/types/astronomer:index/ClusterHealthStatus:ClusterHealthStatus",
                        "description": "Cluster health status\n"
                    },
                    "isLimited": {
                        "type": "boolean",
                        "description": "Whether the cluster is limited\n"
                    },
                    "metadata": {
                        "$ref": "#/types/astronomer:index/ClusterMetadata:ClusterMetadata",
                        "description": "Cluster metadata\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Cluster name\n"
                    },
                    "nodePools": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/astronomer:index/ClusterNodePool:ClusterNodePool"
                        },
                        "description": "Cluster node pools\n"
                    },
                    "podSubnetRange": {
                        "type": "string",
                        "description": "Cluster pod subnet range - required for 'GCP' clusters. If changed, the cluster will be recreated.\n"
                    },
                    "providerAccount": {
                        "type": "string",
                        "description": "Cluster provider account\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "Cluster region - if changed, the cluster will be recreated.\n"
                    },
                    "servicePeeringRange": {
                        "type": "string",
                        "description": "Cluster service peering range - required for 'GCP' clusters. If changed, the cluster will be recreated.\n"
                    },
                    "serviceSubnetRange": {
                        "type": "string",
                        "description": "Cluster service subnet range - required for 'GCP' clusters. If changed, the cluster will be recreated.\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "Cluster status\n"
                    },
                    "tenantId": {
                        "type": "string",
                        "description": "Cluster tenant ID\n"
                    },
                    "timeouts": {
                        "$ref": "#/types/astronomer:index/ClusterTimeouts:ClusterTimeouts"
                    },
                    "type": {
                        "type": "string",
                        "description": "Cluster type\n"
                    },
                    "updatedAt": {
                        "type": "string",
                        "description": "Cluster last updated timestamp\n"
                    },
                    "vpcSubnetRange": {
                        "type": "string",
                        "description": "Cluster VPC subnet range. If changed, the cluster will be recreated.\n"
                    },
                    "workspaceIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Cluster workspace IDs\n"
                    }
                },
                "type": "object"
            }
        },
        "astronomer:index/deployment:Deployment": {
            "description": "Deployment resource\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.astronomer.Deployment;\nimport com.pulumi.astronomer.DeploymentArgs;\nimport com.pulumi.astronomer.inputs.DeploymentEnvironmentVariableArgs;\nimport com.pulumi.astronomer.inputs.DeploymentWorkerQueueArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var dedicated = new Deployment(\"dedicated\", DeploymentArgs.builder()\n            .originalAstroRuntimeVersion(\"11.3.0\")\n            .description(\"an example deployment\")\n            .type(\"DEDICATED\")\n            .clusterId(\"clv17vgft000801kkydsws63x\")\n            .contactEmails(\"preview@astronomer.test\")\n            .defaultTaskPodCpu(\"0.25\")\n            .defaultTaskPodMemory(\"0.5Gi\")\n            .executor(\"KUBERNETES\")\n            .isCicdEnforced(true)\n            .isDagDeployEnabled(true)\n            .isDevelopmentMode(false)\n            .isHighAvailability(true)\n            .resourceQuotaCpu(\"10\")\n            .resourceQuotaMemory(\"20Gi\")\n            .schedulerSize(\"SMALL\")\n            .workspaceId(\"clnp86ly5000401ndaga21g81\")\n            .environmentVariables(DeploymentEnvironmentVariableArgs.builder()\n                .key(\"key1\")\n                .value(\"value1\")\n                .is_secret(false)\n                .build())\n            .build());\n\n        var standard = new Deployment(\"standard\", DeploymentArgs.builder()\n            .originalAstroRuntimeVersion(\"11.3.0\")\n            .description(\"an example deployment\")\n            .type(\"STANDARD\")\n            .cloudProvider(\"AWS\")\n            .region(\"us-east-1\")\n            .contactEmails()\n            .defaultTaskPodCpu(\"0.25\")\n            .defaultTaskPodMemory(\"0.5Gi\")\n            .executor(\"CELERY\")\n            .isCicdEnforced(true)\n            .isDagDeployEnabled(true)\n            .isDevelopmentMode(false)\n            .isHighAvailability(false)\n            .resourceQuotaCpu(\"10\")\n            .resourceQuotaMemory(\"20Gi\")\n            .schedulerSize(\"SMALL\")\n            .workspaceId(\"clnp86ly500a401ndaga20g81\")\n            .environmentVariables()\n            .workerQueues(DeploymentWorkerQueueArgs.builder()\n                .name(\"default\")\n                .is_default(true)\n                .astro_machine(\"A5\")\n                .max_worker_count(10)\n                .min_worker_count(0)\n                .worker_concurrency(1)\n                .build())\n            .build());\n\n        var hybrid = new Deployment(\"hybrid\", DeploymentArgs.builder()\n            .originalAstroRuntimeVersion(\"11.3.0\")\n            .description(\"an example deployment\")\n            .type(\"HYBRID\")\n            .clusterId(\"clnp86ly5000401ndagu20g81\")\n            .taskPodNodePoolId(\"clnp86ly5000301ndzfxz895w\")\n            .contactEmails(\"example@astronomer.io\")\n            .executor(\"KUBERNETES\")\n            .isCicdEnforced(true)\n            .isDagDeployEnabled(true)\n            .schedulerReplicas(1)\n            .schedulerAu(5)\n            .workspaceId(\"clnp86ly5000401ndaga20g81\")\n            .environmentVariables(DeploymentEnvironmentVariableArgs.builder()\n                .key(\"key1\")\n                .value(\"value1\")\n                .is_secret(false)\n                .build())\n            .build());\n\n        var hybridCelery = new Deployment(\"hybridCelery\", DeploymentArgs.builder()\n            .originalAstroRuntimeVersion(\"11.3.0\")\n            .description(\"an example deployment with celery executor\")\n            .type(\"HYBRID\")\n            .clusterId(\"clnp86ly5000401ndagu20g81\")\n            .contactEmails(\"example@astronomer.io\")\n            .executor(\"CELERY\")\n            .isCicdEnforced(true)\n            .isDagDeployEnabled(true)\n            .schedulerReplicas(1)\n            .schedulerAu(5)\n            .workspaceId(\"clnp86ly5000401ndaga20g81\")\n            .environmentVariables(DeploymentEnvironmentVariableArgs.builder()\n                .key(\"key1\")\n                .value(\"value1\")\n                .is_secret(false)\n                .build())\n            .workerQueues(DeploymentWorkerQueueArgs.builder()\n                .name(\"default\")\n                .is_default(true)\n                .node_pool_id(\"clnp86ly5000301ndzfxz895w\")\n                .max_worker_count(10)\n                .min_worker_count(0)\n                .worker_concurrency(1)\n                .build())\n            .build());\n\n        var importedDeployment = new Deployment(\"importedDeployment\", DeploymentArgs.builder()\n            .description(\"an existing deployment\")\n            .type(\"DEDICATED\")\n            .clusterId(\"clv17vgft000801kkydsws63x\")\n            .contactEmails(\"preview@astronomer.test\")\n            .defaultTaskPodCpu(\"0.25\")\n            .defaultTaskPodMemory(\"0.5Gi\")\n            .executor(\"KUBERNETES\")\n            .isCicdEnforced(true)\n            .isDagDeployEnabled(true)\n            .isDevelopmentMode(false)\n            .isHighAvailability(true)\n            .resourceQuotaCpu(\"10\")\n            .resourceQuotaMemory(\"20Gi\")\n            .schedulerSize(\"SMALL\")\n            .workspaceId(\"clnp86ly5000401ndaga21g81\")\n            .environmentVariables()\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  dedicated:\n    type: astronomer:Deployment\n    properties:\n      originalAstroRuntimeVersion: 11.3.0\n      description: an example deployment\n      type: DEDICATED\n      clusterId: clv17vgft000801kkydsws63x\n      contactEmails:\n        - preview@astronomer.test\n      defaultTaskPodCpu: '0.25'\n      defaultTaskPodMemory: 0.5Gi\n      executor: KUBERNETES\n      isCicdEnforced: true\n      isDagDeployEnabled: true\n      isDevelopmentMode: false\n      isHighAvailability: true\n      resourceQuotaCpu: '10'\n      resourceQuotaMemory: 20Gi\n      schedulerSize: SMALL\n      workspaceId: clnp86ly5000401ndaga21g81\n      environmentVariables:\n        - key: key1\n          value: value1\n          is_secret: false\n  standard:\n    type: astronomer:Deployment\n    properties:\n      originalAstroRuntimeVersion: 11.3.0\n      description: an example deployment\n      type: STANDARD\n      cloudProvider: AWS\n      region: us-east-1\n      contactEmails: []\n      defaultTaskPodCpu: '0.25'\n      defaultTaskPodMemory: 0.5Gi\n      executor: CELERY\n      isCicdEnforced: true\n      isDagDeployEnabled: true\n      isDevelopmentMode: false\n      isHighAvailability: false\n      resourceQuotaCpu: '10'\n      resourceQuotaMemory: 20Gi\n      schedulerSize: SMALL\n      workspaceId: clnp86ly500a401ndaga20g81\n      environmentVariables: []\n      workerQueues:\n        - name: default\n          is_default: true\n          astro_machine: A5\n          max_worker_count: 10\n          min_worker_count: 0\n          worker_concurrency: 1\n  hybrid:\n    type: astronomer:Deployment\n    properties:\n      originalAstroRuntimeVersion: 11.3.0\n      description: an example deployment\n      type: HYBRID\n      clusterId: clnp86ly5000401ndagu20g81\n      taskPodNodePoolId: clnp86ly5000301ndzfxz895w\n      contactEmails:\n        - example@astronomer.io\n      executor: KUBERNETES\n      isCicdEnforced: true\n      isDagDeployEnabled: true\n      schedulerReplicas: 1\n      schedulerAu: 5\n      workspaceId: clnp86ly5000401ndaga20g81\n      environmentVariables:\n        - key: key1\n          value: value1\n          is_secret: false\n  hybridCelery:\n    type: astronomer:Deployment\n    properties:\n      originalAstroRuntimeVersion: 11.3.0\n      description: an example deployment with celery executor\n      type: HYBRID\n      clusterId: clnp86ly5000401ndagu20g81\n      contactEmails:\n        - example@astronomer.io\n      executor: CELERY\n      isCicdEnforced: true\n      isDagDeployEnabled: true\n      schedulerReplicas: 1\n      schedulerAu: 5\n      workspaceId: clnp86ly5000401ndaga20g81\n      environmentVariables:\n        - key: key1\n          value: value1\n          is_secret: false\n      workerQueues:\n        - name: default\n          is_default: true\n          node_pool_id: clnp86ly5000301ndzfxz895w\n          max_worker_count: 10\n          min_worker_count: 0\n          worker_concurrency: 1\n  importedDeployment:\n    type: astronomer:Deployment\n    properties:\n      description: an existing deployment\n      type: DEDICATED\n      clusterId: clv17vgft000801kkydsws63x\n      contactEmails:\n        - preview@astronomer.test\n      defaultTaskPodCpu: '0.25'\n      defaultTaskPodMemory: 0.5Gi\n      executor: KUBERNETES\n      isCicdEnforced: true\n      isDagDeployEnabled: true\n      isDevelopmentMode: false\n      isHighAvailability: true\n      resourceQuotaCpu: '10'\n      resourceQuotaMemory: 20Gi\n      schedulerSize: SMALL\n      workspaceId: clnp86ly5000401ndaga21g81\n      environmentVariables: []\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "properties": {
                "airflowVersion": {
                    "type": "string",
                    "description": "Deployment Airflow version\n"
                },
                "astroRuntimeVersion": {
                    "type": "string",
                    "description": "Deployment's current Astro Runtime version\n"
                },
                "cloudProvider": {
                    "type": "string",
                    "description": "Deployment cloud provider - required for 'STANDARD' deployments. If changing this value, the deployment will be recreated in the new cloud provider\n"
                },
                "clusterId": {
                    "type": "string",
                    "description": "Deployment cluster identifier - required for 'HYBRID' and 'DEDICATED' deployments. If changing this value, the deployment will be recreated in the new cluster\n"
                },
                "contactEmails": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Deployment contact emails\n"
                },
                "createdAt": {
                    "type": "string",
                    "description": "Deployment creation timestamp\n"
                },
                "createdBy": {
                    "$ref": "#/types/astronomer:index/DeploymentCreatedBy:DeploymentCreatedBy",
                    "description": "Deployment creator\n"
                },
                "dagTarballVersion": {
                    "type": "string",
                    "description": "Deployment DAG tarball version\n"
                },
                "defaultTaskPodCpu": {
                    "type": "string",
                    "description": "Deployment default task pod CPU - required for 'STANDARD' and 'DEDICATED' deployments\n"
                },
                "defaultTaskPodMemory": {
                    "type": "string",
                    "description": "Deployment default task pod memory - required for 'STANDARD' and 'DEDICATED' deployments\n"
                },
                "description": {
                    "type": "string",
                    "description": "Deployment description\n"
                },
                "desiredDagTarballVersion": {
                    "type": "string",
                    "description": "Deployment desired DAG tarball version\n"
                },
                "environmentVariables": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/astronomer:index/DeploymentEnvironmentVariable:DeploymentEnvironmentVariable"
                    },
                    "description": "Deployment environment variables\n"
                },
                "executor": {
                    "type": "string",
                    "description": "Deployment executor\n"
                },
                "externalIps": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Deployment external IPs\n"
                },
                "imageRepository": {
                    "type": "string",
                    "description": "Deployment image repository\n"
                },
                "imageTag": {
                    "type": "string",
                    "description": "Deployment image tag\n"
                },
                "imageVersion": {
                    "type": "string",
                    "description": "Deployment image version\n"
                },
                "isCicdEnforced": {
                    "type": "boolean",
                    "description": "Deployment CI/CD enforced\n"
                },
                "isDagDeployEnabled": {
                    "type": "boolean",
                    "description": "Whether DAG deploy is enabled - Changing this value may disrupt your deployment. Read more at https://docs.astronomer.io/astro/deploy-dags#enable-or-disable-dag-only-deploys-on-a-deployment\n"
                },
                "isDevelopmentMode": {
                    "type": "boolean",
                    "description": "Deployment development mode - required for 'STANDARD' and 'DEDICATED' deployments. If changing from 'False' to 'True', the deployment will be recreated\n"
                },
                "isHighAvailability": {
                    "type": "boolean",
                    "description": "Deployment high availability - required for 'STANDARD' and 'DEDICATED' deployments\n"
                },
                "name": {
                    "type": "string",
                    "description": "Deployment name\n"
                },
                "namespace": {
                    "type": "string",
                    "description": "Deployment namespace\n"
                },
                "oidcIssuerUrl": {
                    "type": "string",
                    "description": "Deployment OIDC issuer URL\n"
                },
                "originalAstroRuntimeVersion": {
                    "type": "string"
                },
                "region": {
                    "type": "string",
                    "description": "Deployment region - required for 'STANDARD' deployments. If changing this value, the deployment will be recreated in the new region\n"
                },
                "resourceQuotaCpu": {
                    "type": "string",
                    "description": "Deployment resource quota CPU - required for 'STANDARD' and 'DEDICATED' deployments\n"
                },
                "resourceQuotaMemory": {
                    "type": "string",
                    "description": "Deployment resource quota memory - required for 'STANDARD' and 'DEDICATED' deployments\n"
                },
                "scalingSpec": {
                    "$ref": "#/types/astronomer:index/DeploymentScalingSpec:DeploymentScalingSpec",
                    "description": "Deployment scaling spec - only for 'STANDARD' and 'DEDICATED' deployments\n"
                },
                "scalingStatus": {
                    "$ref": "#/types/astronomer:index/DeploymentScalingStatus:DeploymentScalingStatus",
                    "description": "Deployment scaling status\n"
                },
                "schedulerAu": {
                    "type": "integer",
                    "description": "Deployment scheduler AU - required for 'HYBRID' deployments\n"
                },
                "schedulerCpu": {
                    "type": "string",
                    "description": "Deployment scheduler CPU\n"
                },
                "schedulerMemory": {
                    "type": "string",
                    "description": "Deployment scheduler memory\n"
                },
                "schedulerReplicas": {
                    "type": "integer",
                    "description": "Deployment scheduler replicas - required for 'HYBRID' deployments\n"
                },
                "schedulerSize": {
                    "type": "string",
                    "description": "Deployment scheduler size - required for 'STANDARD' and 'DEDICATED' deployments\n"
                },
                "status": {
                    "type": "string",
                    "description": "Deployment status\n"
                },
                "statusReason": {
                    "type": "string",
                    "description": "Deployment status reason\n"
                },
                "taskPodNodePoolId": {
                    "type": "string",
                    "description": "Deployment task pod node pool identifier - required if executor is 'KUBERNETES' and type is 'HYBRID'\n"
                },
                "type": {
                    "type": "string",
                    "description": "Deployment type - if changing this value, the deployment will be recreated with the new type\n"
                },
                "updatedAt": {
                    "type": "string",
                    "description": "Deployment last updated timestamp\n"
                },
                "updatedBy": {
                    "$ref": "#/types/astronomer:index/DeploymentUpdatedBy:DeploymentUpdatedBy",
                    "description": "Deployment updater\n"
                },
                "webserverAirflowApiUrl": {
                    "type": "string",
                    "description": "Deployment webserver Airflow API URL\n"
                },
                "webserverIngressHostname": {
                    "type": "string",
                    "description": "Deployment webserver ingress hostname\n"
                },
                "webserverUrl": {
                    "type": "string",
                    "description": "Deployment webserver URL\n"
                },
                "workerQueues": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/astronomer:index/DeploymentWorkerQueue:DeploymentWorkerQueue"
                    },
                    "description": "Deployment worker queues - required for deployments with 'CELERY' executor. For 'STANDARD' and 'DEDICATED' deployments, use astro*machine. For 'HYBRID' deployments, use node*pool*id.\n"
                },
                "workloadIdentity": {
                    "type": "string",
                    "description": "Deployment workload identity. This value can be changed via the Astro API if applicable.\n"
                },
                "workspaceId": {
                    "type": "string",
                    "description": "Deployment workspace identifier - if changing this value, the deployment will be recreated in the new workspace\n"
                }
            },
            "required": [
                "airflowVersion",
                "astroRuntimeVersion",
                "cloudProvider",
                "clusterId",
                "contactEmails",
                "createdAt",
                "createdBy",
                "dagTarballVersion",
                "description",
                "desiredDagTarballVersion",
                "environmentVariables",
                "executor",
                "externalIps",
                "imageRepository",
                "imageTag",
                "imageVersion",
                "isCicdEnforced",
                "isDagDeployEnabled",
                "name",
                "namespace",
                "oidcIssuerUrl",
                "region",
                "scalingStatus",
                "schedulerCpu",
                "schedulerMemory",
                "schedulerReplicas",
                "status",
                "statusReason",
                "type",
                "updatedAt",
                "updatedBy",
                "webserverAirflowApiUrl",
                "webserverIngressHostname",
                "webserverUrl",
                "workloadIdentity",
                "workspaceId"
            ],
            "inputProperties": {
                "cloudProvider": {
                    "type": "string",
                    "description": "Deployment cloud provider - required for 'STANDARD' deployments. If changing this value, the deployment will be recreated in the new cloud provider\n"
                },
                "clusterId": {
                    "type": "string",
                    "description": "Deployment cluster identifier - required for 'HYBRID' and 'DEDICATED' deployments. If changing this value, the deployment will be recreated in the new cluster\n"
                },
                "contactEmails": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Deployment contact emails\n"
                },
                "defaultTaskPodCpu": {
                    "type": "string",
                    "description": "Deployment default task pod CPU - required for 'STANDARD' and 'DEDICATED' deployments\n"
                },
                "defaultTaskPodMemory": {
                    "type": "string",
                    "description": "Deployment default task pod memory - required for 'STANDARD' and 'DEDICATED' deployments\n"
                },
                "description": {
                    "type": "string",
                    "description": "Deployment description\n"
                },
                "environmentVariables": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/astronomer:index/DeploymentEnvironmentVariable:DeploymentEnvironmentVariable"
                    },
                    "description": "Deployment environment variables\n"
                },
                "executor": {
                    "type": "string",
                    "description": "Deployment executor\n"
                },
                "isCicdEnforced": {
                    "type": "boolean",
                    "description": "Deployment CI/CD enforced\n"
                },
                "isDagDeployEnabled": {
                    "type": "boolean",
                    "description": "Whether DAG deploy is enabled - Changing this value may disrupt your deployment. Read more at https://docs.astronomer.io/astro/deploy-dags#enable-or-disable-dag-only-deploys-on-a-deployment\n"
                },
                "isDevelopmentMode": {
                    "type": "boolean",
                    "description": "Deployment development mode - required for 'STANDARD' and 'DEDICATED' deployments. If changing from 'False' to 'True', the deployment will be recreated\n"
                },
                "isHighAvailability": {
                    "type": "boolean",
                    "description": "Deployment high availability - required for 'STANDARD' and 'DEDICATED' deployments\n"
                },
                "name": {
                    "type": "string",
                    "description": "Deployment name\n"
                },
                "originalAstroRuntimeVersion": {
                    "type": "string"
                },
                "region": {
                    "type": "string",
                    "description": "Deployment region - required for 'STANDARD' deployments. If changing this value, the deployment will be recreated in the new region\n"
                },
                "resourceQuotaCpu": {
                    "type": "string",
                    "description": "Deployment resource quota CPU - required for 'STANDARD' and 'DEDICATED' deployments\n"
                },
                "resourceQuotaMemory": {
                    "type": "string",
                    "description": "Deployment resource quota memory - required for 'STANDARD' and 'DEDICATED' deployments\n"
                },
                "scalingSpec": {
                    "$ref": "#/types/astronomer:index/DeploymentScalingSpec:DeploymentScalingSpec",
                    "description": "Deployment scaling spec - only for 'STANDARD' and 'DEDICATED' deployments\n"
                },
                "schedulerAu": {
                    "type": "integer",
                    "description": "Deployment scheduler AU - required for 'HYBRID' deployments\n"
                },
                "schedulerReplicas": {
                    "type": "integer",
                    "description": "Deployment scheduler replicas - required for 'HYBRID' deployments\n"
                },
                "schedulerSize": {
                    "type": "string",
                    "description": "Deployment scheduler size - required for 'STANDARD' and 'DEDICATED' deployments\n"
                },
                "taskPodNodePoolId": {
                    "type": "string",
                    "description": "Deployment task pod node pool identifier - required if executor is 'KUBERNETES' and type is 'HYBRID'\n"
                },
                "type": {
                    "type": "string",
                    "description": "Deployment type - if changing this value, the deployment will be recreated with the new type\n"
                },
                "workerQueues": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/astronomer:index/DeploymentWorkerQueue:DeploymentWorkerQueue"
                    },
                    "description": "Deployment worker queues - required for deployments with 'CELERY' executor. For 'STANDARD' and 'DEDICATED' deployments, use astro*machine. For 'HYBRID' deployments, use node*pool*id.\n"
                },
                "workspaceId": {
                    "type": "string",
                    "description": "Deployment workspace identifier - if changing this value, the deployment will be recreated in the new workspace\n"
                }
            },
            "requiredInputs": [
                "contactEmails",
                "description",
                "environmentVariables",
                "executor",
                "isCicdEnforced",
                "isDagDeployEnabled",
                "type",
                "workspaceId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Deployment resources.\n",
                "properties": {
                    "airflowVersion": {
                        "type": "string",
                        "description": "Deployment Airflow version\n"
                    },
                    "astroRuntimeVersion": {
                        "type": "string",
                        "description": "Deployment's current Astro Runtime version\n"
                    },
                    "cloudProvider": {
                        "type": "string",
                        "description": "Deployment cloud provider - required for 'STANDARD' deployments. If changing this value, the deployment will be recreated in the new cloud provider\n"
                    },
                    "clusterId": {
                        "type": "string",
                        "description": "Deployment cluster identifier - required for 'HYBRID' and 'DEDICATED' deployments. If changing this value, the deployment will be recreated in the new cluster\n"
                    },
                    "contactEmails": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Deployment contact emails\n"
                    },
                    "createdAt": {
                        "type": "string",
                        "description": "Deployment creation timestamp\n"
                    },
                    "createdBy": {
                        "$ref": "#/types/astronomer:index/DeploymentCreatedBy:DeploymentCreatedBy",
                        "description": "Deployment creator\n"
                    },
                    "dagTarballVersion": {
                        "type": "string",
                        "description": "Deployment DAG tarball version\n"
                    },
                    "defaultTaskPodCpu": {
                        "type": "string",
                        "description": "Deployment default task pod CPU - required for 'STANDARD' and 'DEDICATED' deployments\n"
                    },
                    "defaultTaskPodMemory": {
                        "type": "string",
                        "description": "Deployment default task pod memory - required for 'STANDARD' and 'DEDICATED' deployments\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Deployment description\n"
                    },
                    "desiredDagTarballVersion": {
                        "type": "string",
                        "description": "Deployment desired DAG tarball version\n"
                    },
                    "environmentVariables": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/astronomer:index/DeploymentEnvironmentVariable:DeploymentEnvironmentVariable"
                        },
                        "description": "Deployment environment variables\n"
                    },
                    "executor": {
                        "type": "string",
                        "description": "Deployment executor\n"
                    },
                    "externalIps": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Deployment external IPs\n"
                    },
                    "imageRepository": {
                        "type": "string",
                        "description": "Deployment image repository\n"
                    },
                    "imageTag": {
                        "type": "string",
                        "description": "Deployment image tag\n"
                    },
                    "imageVersion": {
                        "type": "string",
                        "description": "Deployment image version\n"
                    },
                    "isCicdEnforced": {
                        "type": "boolean",
                        "description": "Deployment CI/CD enforced\n"
                    },
                    "isDagDeployEnabled": {
                        "type": "boolean",
                        "description": "Whether DAG deploy is enabled - Changing this value may disrupt your deployment. Read more at https://docs.astronomer.io/astro/deploy-dags#enable-or-disable-dag-only-deploys-on-a-deployment\n"
                    },
                    "isDevelopmentMode": {
                        "type": "boolean",
                        "description": "Deployment development mode - required for 'STANDARD' and 'DEDICATED' deployments. If changing from 'False' to 'True', the deployment will be recreated\n"
                    },
                    "isHighAvailability": {
                        "type": "boolean",
                        "description": "Deployment high availability - required for 'STANDARD' and 'DEDICATED' deployments\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Deployment name\n"
                    },
                    "namespace": {
                        "type": "string",
                        "description": "Deployment namespace\n"
                    },
                    "oidcIssuerUrl": {
                        "type": "string",
                        "description": "Deployment OIDC issuer URL\n"
                    },
                    "originalAstroRuntimeVersion": {
                        "type": "string"
                    },
                    "region": {
                        "type": "string",
                        "description": "Deployment region - required for 'STANDARD' deployments. If changing this value, the deployment will be recreated in the new region\n"
                    },
                    "resourceQuotaCpu": {
                        "type": "string",
                        "description": "Deployment resource quota CPU - required for 'STANDARD' and 'DEDICATED' deployments\n"
                    },
                    "resourceQuotaMemory": {
                        "type": "string",
                        "description": "Deployment resource quota memory - required for 'STANDARD' and 'DEDICATED' deployments\n"
                    },
                    "scalingSpec": {
                        "$ref": "#/types/astronomer:index/DeploymentScalingSpec:DeploymentScalingSpec",
                        "description": "Deployment scaling spec - only for 'STANDARD' and 'DEDICATED' deployments\n"
                    },
                    "scalingStatus": {
                        "$ref": "#/types/astronomer:index/DeploymentScalingStatus:DeploymentScalingStatus",
                        "description": "Deployment scaling status\n"
                    },
                    "schedulerAu": {
                        "type": "integer",
                        "description": "Deployment scheduler AU - required for 'HYBRID' deployments\n"
                    },
                    "schedulerCpu": {
                        "type": "string",
                        "description": "Deployment scheduler CPU\n"
                    },
                    "schedulerMemory": {
                        "type": "string",
                        "description": "Deployment scheduler memory\n"
                    },
                    "schedulerReplicas": {
                        "type": "integer",
                        "description": "Deployment scheduler replicas - required for 'HYBRID' deployments\n"
                    },
                    "schedulerSize": {
                        "type": "string",
                        "description": "Deployment scheduler size - required for 'STANDARD' and 'DEDICATED' deployments\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "Deployment status\n"
                    },
                    "statusReason": {
                        "type": "string",
                        "description": "Deployment status reason\n"
                    },
                    "taskPodNodePoolId": {
                        "type": "string",
                        "description": "Deployment task pod node pool identifier - required if executor is 'KUBERNETES' and type is 'HYBRID'\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "Deployment type - if changing this value, the deployment will be recreated with the new type\n"
                    },
                    "updatedAt": {
                        "type": "string",
                        "description": "Deployment last updated timestamp\n"
                    },
                    "updatedBy": {
                        "$ref": "#/types/astronomer:index/DeploymentUpdatedBy:DeploymentUpdatedBy",
                        "description": "Deployment updater\n"
                    },
                    "webserverAirflowApiUrl": {
                        "type": "string",
                        "description": "Deployment webserver Airflow API URL\n"
                    },
                    "webserverIngressHostname": {
                        "type": "string",
                        "description": "Deployment webserver ingress hostname\n"
                    },
                    "webserverUrl": {
                        "type": "string",
                        "description": "Deployment webserver URL\n"
                    },
                    "workerQueues": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/astronomer:index/DeploymentWorkerQueue:DeploymentWorkerQueue"
                        },
                        "description": "Deployment worker queues - required for deployments with 'CELERY' executor. For 'STANDARD' and 'DEDICATED' deployments, use astro*machine. For 'HYBRID' deployments, use node*pool*id.\n"
                    },
                    "workloadIdentity": {
                        "type": "string",
                        "description": "Deployment workload identity. This value can be changed via the Astro API if applicable.\n"
                    },
                    "workspaceId": {
                        "type": "string",
                        "description": "Deployment workspace identifier - if changing this value, the deployment will be recreated in the new workspace\n"
                    }
                },
                "type": "object"
            }
        },
        "astronomer:index/hybridClusterWorkspaceAuthorization:HybridClusterWorkspaceAuthorization": {
            "description": "Hybrid cluster workspace authorization resource\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as astronomer from \"@ryan-pip/pulumi_astronomer\";\n\nconst example = new astronomer.HybridClusterWorkspaceAuthorization(\"example\", {\n    clusterId: \"clk8h0fv1006801j8yysfybbt\",\n    workspaceIds: [\n        \"cl70oe7cu445571iynrkthtybl\",\n        \"cl70oe7cu445571iynrkthacsd\",\n    ],\n});\nconst importedClusterWorkspaceAuthorization = new astronomer.HybridClusterWorkspaceAuthorization(\"importedClusterWorkspaceAuthorization\", {\n    clusterId: \"clk8h0fv1006801j8yysfybbt\",\n    workspaceIds: [\"cl70oe7cu445571iynrkthtybl\"],\n});\n```\n```python\nimport pulumi\nimport pulumi_astronomer as astronomer\n\nexample = astronomer.HybridClusterWorkspaceAuthorization(\"example\",\n    cluster_id=\"clk8h0fv1006801j8yysfybbt\",\n    workspace_ids=[\n        \"cl70oe7cu445571iynrkthtybl\",\n        \"cl70oe7cu445571iynrkthacsd\",\n    ])\nimported_cluster_workspace_authorization = astronomer.HybridClusterWorkspaceAuthorization(\"importedClusterWorkspaceAuthorization\",\n    cluster_id=\"clk8h0fv1006801j8yysfybbt\",\n    workspace_ids=[\"cl70oe7cu445571iynrkthtybl\"])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Astronomer = RyanPip.Astronomer;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new Astronomer.HybridClusterWorkspaceAuthorization(\"example\", new()\n    {\n        ClusterId = \"clk8h0fv1006801j8yysfybbt\",\n        WorkspaceIds = new[]\n        {\n            \"cl70oe7cu445571iynrkthtybl\",\n            \"cl70oe7cu445571iynrkthacsd\",\n        },\n    });\n\n    var importedClusterWorkspaceAuthorization = new Astronomer.HybridClusterWorkspaceAuthorization(\"importedClusterWorkspaceAuthorization\", new()\n    {\n        ClusterId = \"clk8h0fv1006801j8yysfybbt\",\n        WorkspaceIds = new[]\n        {\n            \"cl70oe7cu445571iynrkthtybl\",\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/ryan-pip/pulumi-astronomer/sdk/go/astronomer\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := astronomer.NewHybridClusterWorkspaceAuthorization(ctx, \"example\", \u0026astronomer.HybridClusterWorkspaceAuthorizationArgs{\n\t\t\tClusterId: pulumi.String(\"clk8h0fv1006801j8yysfybbt\"),\n\t\t\tWorkspaceIds: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"cl70oe7cu445571iynrkthtybl\"),\n\t\t\t\tpulumi.String(\"cl70oe7cu445571iynrkthacsd\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = astronomer.NewHybridClusterWorkspaceAuthorization(ctx, \"importedClusterWorkspaceAuthorization\", \u0026astronomer.HybridClusterWorkspaceAuthorizationArgs{\n\t\t\tClusterId: pulumi.String(\"clk8h0fv1006801j8yysfybbt\"),\n\t\t\tWorkspaceIds: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"cl70oe7cu445571iynrkthtybl\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.astronomer.HybridClusterWorkspaceAuthorization;\nimport com.pulumi.astronomer.HybridClusterWorkspaceAuthorizationArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new HybridClusterWorkspaceAuthorization(\"example\", HybridClusterWorkspaceAuthorizationArgs.builder()\n            .clusterId(\"clk8h0fv1006801j8yysfybbt\")\n            .workspaceIds(            \n                \"cl70oe7cu445571iynrkthtybl\",\n                \"cl70oe7cu445571iynrkthacsd\")\n            .build());\n\n        var importedClusterWorkspaceAuthorization = new HybridClusterWorkspaceAuthorization(\"importedClusterWorkspaceAuthorization\", HybridClusterWorkspaceAuthorizationArgs.builder()\n            .clusterId(\"clk8h0fv1006801j8yysfybbt\")\n            .workspaceIds(\"cl70oe7cu445571iynrkthtybl\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: astronomer:HybridClusterWorkspaceAuthorization\n    properties:\n      clusterId: clk8h0fv1006801j8yysfybbt\n      workspaceIds:\n        - cl70oe7cu445571iynrkthtybl\n        - cl70oe7cu445571iynrkthacsd\n  importedClusterWorkspaceAuthorization:\n    type: astronomer:HybridClusterWorkspaceAuthorization\n    properties:\n      clusterId: clk8h0fv1006801j8yysfybbt\n      workspaceIds:\n        - cl70oe7cu445571iynrkthtybl\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "properties": {
                "clusterId": {
                    "type": "string",
                    "description": "The ID of the hybrid cluster to set authorizations for\n"
                },
                "workspaceIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The IDs of the workspaces to authorize for the hybrid cluster\n"
                }
            },
            "required": [
                "clusterId"
            ],
            "inputProperties": {
                "clusterId": {
                    "type": "string",
                    "description": "The ID of the hybrid cluster to set authorizations for\n"
                },
                "workspaceIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The IDs of the workspaces to authorize for the hybrid cluster\n"
                }
            },
            "requiredInputs": [
                "clusterId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering HybridClusterWorkspaceAuthorization resources.\n",
                "properties": {
                    "clusterId": {
                        "type": "string",
                        "description": "The ID of the hybrid cluster to set authorizations for\n"
                    },
                    "workspaceIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The IDs of the workspaces to authorize for the hybrid cluster\n"
                    }
                },
                "type": "object"
            }
        },
        "astronomer:index/team:Team": {
            "description": "Team resource\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.astronomer.Team;\nimport com.pulumi.astronomer.TeamArgs;\nimport com.pulumi.astronomer.inputs.TeamWorkspaceRoleArgs;\nimport com.pulumi.astronomer.inputs.TeamDeploymentRoleArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var team = new Team(\"team\", TeamArgs.builder()\n            .description(\"team description\")\n            .memberIds(\"clhpichn8002m01mqa4ocs7g6\")\n            .organizationRole(\"ORGANIZATION_OWNER\")\n            .workspaceRoles(TeamWorkspaceRoleArgs.builder()\n                .workspace_id(\"clx42sxw501gl01o0gjenthnh\")\n                .role(\"WORKSPACE_OWNER\")\n                .build())\n            .deploymentRoles(TeamDeploymentRoleArgs.builder()\n                .deployment_id(\"clyn6kxud003x01mtxmccegnh\")\n                .role(\"DEPLOYMENT_ADMIN\")\n                .build())\n            .build());\n\n        var teamWithNoOptionalFields = new Team(\"teamWithNoOptionalFields\", TeamArgs.builder()\n            .organizationRole(\"ORGANIZATION_OWNER\")\n            .build());\n\n        var importedTeam = new Team(\"importedTeam\", TeamArgs.builder()\n            .description(\"imported team description\")\n            .memberIds(\"clhpichn8002m01mqa4ocs7g6\")\n            .organizationRole(\"ORGANIZATION_OWNER\")\n            .workspaceRoles(TeamWorkspaceRoleArgs.builder()\n                .workspace_id(\"clx42sxw501gl01o0gjenthnh\")\n                .role(\"WORKSPACE_OWNER\")\n                .build())\n            .deploymentRoles(TeamDeploymentRoleArgs.builder()\n                .deployment_id(\"clyn6kxud003x01mtxmccegnh\")\n                .role(\"DEPLOYMENT_ADMIN\")\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  team:\n    type: astronomer:Team\n    properties:\n      description: team description\n      memberIds:\n        - clhpichn8002m01mqa4ocs7g6\n      organizationRole: ORGANIZATION_OWNER\n      workspaceRoles:\n        - workspace_id: clx42sxw501gl01o0gjenthnh\n          role: WORKSPACE_OWNER\n      deploymentRoles:\n        - deployment_id: clyn6kxud003x01mtxmccegnh\n          role: DEPLOYMENT_ADMIN\n  teamWithNoOptionalFields:\n    type: astronomer:Team\n    properties:\n      organizationRole: ORGANIZATION_OWNER\n  importedTeam:\n    type: astronomer:Team\n    properties:\n      description: imported team description\n      memberIds:\n        - clhpichn8002m01mqa4ocs7g6\n      organizationRole: ORGANIZATION_OWNER\n      workspaceRoles:\n        - workspace_id: clx42sxw501gl01o0gjenthnh\n          role: WORKSPACE_OWNER\n      deploymentRoles:\n        - deployment_id: clyn6kxud003x01mtxmccegnh\n          role: DEPLOYMENT_ADMIN\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "properties": {
                "createdAt": {
                    "type": "string",
                    "description": "Team creation timestamp\n"
                },
                "createdBy": {
                    "$ref": "#/types/astronomer:index/TeamCreatedBy:TeamCreatedBy",
                    "description": "Team creator\n"
                },
                "deploymentRoles": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/astronomer:index/TeamDeploymentRole:TeamDeploymentRole"
                    },
                    "description": "The roles to assign to the Deployments\n"
                },
                "description": {
                    "type": "string",
                    "description": "Team description\n"
                },
                "isIdpManaged": {
                    "type": "boolean",
                    "description": "Whether the Team is managed by an identity provider\n"
                },
                "memberIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The IDs of the users to add to the Team\n"
                },
                "name": {
                    "type": "string",
                    "description": "Team name\n"
                },
                "organizationRole": {
                    "type": "string",
                    "description": "The role to assign to the Organization\n"
                },
                "rolesCount": {
                    "type": "integer",
                    "description": "Number of roles assigned to the Team\n"
                },
                "updatedAt": {
                    "type": "string",
                    "description": "Team last updated timestamp\n"
                },
                "updatedBy": {
                    "$ref": "#/types/astronomer:index/TeamUpdatedBy:TeamUpdatedBy",
                    "description": "Team updater\n"
                },
                "workspaceRoles": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/astronomer:index/TeamWorkspaceRole:TeamWorkspaceRole"
                    },
                    "description": "The roles to assign to the Workspaces\n"
                }
            },
            "required": [
                "createdAt",
                "createdBy",
                "isIdpManaged",
                "name",
                "organizationRole",
                "rolesCount",
                "updatedAt",
                "updatedBy"
            ],
            "inputProperties": {
                "deploymentRoles": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/astronomer:index/TeamDeploymentRole:TeamDeploymentRole"
                    },
                    "description": "The roles to assign to the Deployments\n"
                },
                "description": {
                    "type": "string",
                    "description": "Team description\n"
                },
                "memberIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The IDs of the users to add to the Team\n"
                },
                "name": {
                    "type": "string",
                    "description": "Team name\n"
                },
                "organizationRole": {
                    "type": "string",
                    "description": "The role to assign to the Organization\n"
                },
                "workspaceRoles": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/astronomer:index/TeamWorkspaceRole:TeamWorkspaceRole"
                    },
                    "description": "The roles to assign to the Workspaces\n"
                }
            },
            "requiredInputs": [
                "organizationRole"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Team resources.\n",
                "properties": {
                    "createdAt": {
                        "type": "string",
                        "description": "Team creation timestamp\n"
                    },
                    "createdBy": {
                        "$ref": "#/types/astronomer:index/TeamCreatedBy:TeamCreatedBy",
                        "description": "Team creator\n"
                    },
                    "deploymentRoles": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/astronomer:index/TeamDeploymentRole:TeamDeploymentRole"
                        },
                        "description": "The roles to assign to the Deployments\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Team description\n"
                    },
                    "isIdpManaged": {
                        "type": "boolean",
                        "description": "Whether the Team is managed by an identity provider\n"
                    },
                    "memberIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The IDs of the users to add to the Team\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Team name\n"
                    },
                    "organizationRole": {
                        "type": "string",
                        "description": "The role to assign to the Organization\n"
                    },
                    "rolesCount": {
                        "type": "integer",
                        "description": "Number of roles assigned to the Team\n"
                    },
                    "updatedAt": {
                        "type": "string",
                        "description": "Team last updated timestamp\n"
                    },
                    "updatedBy": {
                        "$ref": "#/types/astronomer:index/TeamUpdatedBy:TeamUpdatedBy",
                        "description": "Team updater\n"
                    },
                    "workspaceRoles": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/astronomer:index/TeamWorkspaceRole:TeamWorkspaceRole"
                        },
                        "description": "The roles to assign to the Workspaces\n"
                    }
                },
                "type": "object"
            }
        },
        "astronomer:index/teamRoles:TeamRoles": {
            "description": "Team Roles resource\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.astronomer.TeamRoles;\nimport com.pulumi.astronomer.TeamRolesArgs;\nimport com.pulumi.astronomer.inputs.TeamRolesWorkspaceRoleArgs;\nimport com.pulumi.astronomer.inputs.TeamRolesDeploymentRoleArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var organizationRoleOnly = new TeamRoles(\"organizationRoleOnly\", TeamRolesArgs.builder()\n            .teamId(\"clnp86ly5000401ndaga21g81\")\n            .organizationRole(\"ORGANIZATION_MEMBER\")\n            .build());\n\n        var workspaceRoles = new TeamRoles(\"workspaceRoles\", TeamRolesArgs.builder()\n            .teamId(\"clnp86ly5000401ndaga21g81\")\n            .organizationRole(\"ORGANIZATION_MEMBER\")\n            .workspaceRoles(            \n                TeamRolesWorkspaceRoleArgs.builder()\n                    .workspace_id(\"clwp86ly5000401ndaga21g85\")\n                    .role(\"WORKSPACE_ACCESSOR\")\n                    .build(),\n                TeamRolesWorkspaceRoleArgs.builder()\n                    .workspace_id(\"clwp86ly5000401ndaga21g82\")\n                    .role(\"WORKSPACE_MEMBER\")\n                    .build())\n            .build());\n\n        var deploymentRoles = new TeamRoles(\"deploymentRoles\", TeamRolesArgs.builder()\n            .teamId(\"clnp86ly5000401ndaga21g81\")\n            .organizationRole(\"ORGANIZATION_MEMBER\")\n            .deploymentRoles(TeamRolesDeploymentRoleArgs.builder()\n                .deployment_id(\"cldp86ly5000401ndaga21g86\")\n                .role(\"DEPLOYMENT_ADMIN\")\n                .build())\n            .build());\n\n        var allRoles = new TeamRoles(\"allRoles\", TeamRolesArgs.builder()\n            .teamId(\"clnp86ly5000401ndaga21g81\")\n            .organizationRole(\"ORGANIZATION_MEMBER\")\n            .workspaceRoles(            \n                TeamRolesWorkspaceRoleArgs.builder()\n                    .workspace_id(\"clwp86ly5000401ndaga21g85\")\n                    .role(\"WORKSPACE_OWNER\")\n                    .build(),\n                TeamRolesWorkspaceRoleArgs.builder()\n                    .workspace_id(\"clwp86ly5000401ndaga21g82\")\n                    .role(\"WORKSPACE_MEMBER\")\n                    .build())\n            .deploymentRoles(TeamRolesDeploymentRoleArgs.builder()\n                .deployment_id(\"cldp86ly5000401ndaga21g86\")\n                .role(\"my custom role\")\n                .build())\n            .build());\n\n        var importedTeamRoles = new TeamRoles(\"importedTeamRoles\", TeamRolesArgs.builder()\n            .teamId(\"clnp86ly5000401ndaga21g81\")\n            .organizationRole(\"ORGANIZATION_MEMBER\")\n            .workspaceRoles(TeamRolesWorkspaceRoleArgs.builder()\n                .workspace_id(\"clwp86ly5000401ndaga21g85\")\n                .role(\"WORKSPACE_OWNER\")\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  organizationRoleOnly:\n    type: astronomer:TeamRoles\n    properties:\n      teamId: clnp86ly5000401ndaga21g81\n      organizationRole: ORGANIZATION_MEMBER\n  workspaceRoles:\n    type: astronomer:TeamRoles\n    properties:\n      teamId: clnp86ly5000401ndaga21g81\n      organizationRole: ORGANIZATION_MEMBER\n      workspaceRoles:\n        - workspace_id: clwp86ly5000401ndaga21g85\n          role: WORKSPACE_ACCESSOR\n        - workspace_id: clwp86ly5000401ndaga21g82\n          role: WORKSPACE_MEMBER\n  deploymentRoles:\n    type: astronomer:TeamRoles\n    properties:\n      teamId: clnp86ly5000401ndaga21g81\n      organizationRole: ORGANIZATION_MEMBER\n      deploymentRoles:\n        - deployment_id: cldp86ly5000401ndaga21g86\n          role: DEPLOYMENT_ADMIN\n  allRoles:\n    type: astronomer:TeamRoles\n    properties:\n      teamId: clnp86ly5000401ndaga21g81\n      organizationRole: ORGANIZATION_MEMBER\n      workspaceRoles:\n        - workspace_id: clwp86ly5000401ndaga21g85\n          role: WORKSPACE_OWNER\n        - workspace_id: clwp86ly5000401ndaga21g82\n          role: WORKSPACE_MEMBER\n      deploymentRoles:\n        - deployment_id: cldp86ly5000401ndaga21g86\n          role: my custom role\n  importedTeamRoles:\n    type: astronomer:TeamRoles\n    properties:\n      teamId: clnp86ly5000401ndaga21g81\n      organizationRole: ORGANIZATION_MEMBER\n      workspaceRoles:\n        - workspace_id: clwp86ly5000401ndaga21g85\n          role: WORKSPACE_OWNER\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "properties": {
                "deploymentRoles": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/astronomer:index/TeamRolesDeploymentRole:TeamRolesDeploymentRole"
                    },
                    "description": "The roles to assign to the deployments\n"
                },
                "organizationRole": {
                    "type": "string",
                    "description": "The role to assign to the organization\n"
                },
                "teamId": {
                    "type": "string",
                    "description": "The ID of the team to assign the roles to\n"
                },
                "workspaceRoles": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/astronomer:index/TeamRolesWorkspaceRole:TeamRolesWorkspaceRole"
                    },
                    "description": "The roles to assign to the workspaces\n"
                }
            },
            "required": [
                "organizationRole",
                "teamId"
            ],
            "inputProperties": {
                "deploymentRoles": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/astronomer:index/TeamRolesDeploymentRole:TeamRolesDeploymentRole"
                    },
                    "description": "The roles to assign to the deployments\n"
                },
                "organizationRole": {
                    "type": "string",
                    "description": "The role to assign to the organization\n"
                },
                "teamId": {
                    "type": "string",
                    "description": "The ID of the team to assign the roles to\n"
                },
                "workspaceRoles": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/astronomer:index/TeamRolesWorkspaceRole:TeamRolesWorkspaceRole"
                    },
                    "description": "The roles to assign to the workspaces\n"
                }
            },
            "requiredInputs": [
                "organizationRole",
                "teamId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering TeamRoles resources.\n",
                "properties": {
                    "deploymentRoles": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/astronomer:index/TeamRolesDeploymentRole:TeamRolesDeploymentRole"
                        },
                        "description": "The roles to assign to the deployments\n"
                    },
                    "organizationRole": {
                        "type": "string",
                        "description": "The role to assign to the organization\n"
                    },
                    "teamId": {
                        "type": "string",
                        "description": "The ID of the team to assign the roles to\n"
                    },
                    "workspaceRoles": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/astronomer:index/TeamRolesWorkspaceRole:TeamRolesWorkspaceRole"
                        },
                        "description": "The roles to assign to the workspaces\n"
                    }
                },
                "type": "object"
            }
        },
        "astronomer:index/userInvite:UserInvite": {
            "description": "User Invite resource\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as astronomer from \"@ryan-pip/pulumi_astronomer\";\n\nconst userInvite = new astronomer.UserInvite(\"userInvite\", {\n    email: \"email@organization.com\",\n    role: \"ORGANIZATION_MEMBER\",\n});\n```\n```python\nimport pulumi\nimport pulumi_astronomer as astronomer\n\nuser_invite = astronomer.UserInvite(\"userInvite\",\n    email=\"email@organization.com\",\n    role=\"ORGANIZATION_MEMBER\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Astronomer = RyanPip.Astronomer;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var userInvite = new Astronomer.UserInvite(\"userInvite\", new()\n    {\n        Email = \"email@organization.com\",\n        Role = \"ORGANIZATION_MEMBER\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/ryan-pip/pulumi-astronomer/sdk/go/astronomer\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := astronomer.NewUserInvite(ctx, \"userInvite\", \u0026astronomer.UserInviteArgs{\n\t\t\tEmail: pulumi.String(\"email@organization.com\"),\n\t\t\tRole:  pulumi.String(\"ORGANIZATION_MEMBER\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.astronomer.UserInvite;\nimport com.pulumi.astronomer.UserInviteArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var userInvite = new UserInvite(\"userInvite\", UserInviteArgs.builder()\n            .email(\"email@organization.com\")\n            .role(\"ORGANIZATION_MEMBER\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  userInvite:\n    type: astronomer:UserInvite\n    properties:\n      email: email@organization.com\n      role: ORGANIZATION_MEMBER\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "properties": {
                "email": {
                    "type": "string",
                    "description": "The email address of the user being invited\n"
                },
                "expiresAt": {
                    "type": "string",
                    "description": "The expiration date of the invite\n"
                },
                "inviteId": {
                    "type": "string",
                    "description": "The ID of the invite\n"
                },
                "invitee": {
                    "$ref": "#/types/astronomer:index/UserInviteInvitee:UserInviteInvitee",
                    "description": "The profile of the invitee\n"
                },
                "inviter": {
                    "$ref": "#/types/astronomer:index/UserInviteInviter:UserInviteInviter",
                    "description": "The profile of the inviter\n"
                },
                "role": {
                    "type": "string",
                    "description": "The Organization role to assign to the user\n"
                },
                "userId": {
                    "type": "string",
                    "description": "The ID of the user\n"
                }
            },
            "required": [
                "email",
                "expiresAt",
                "inviteId",
                "invitee",
                "inviter",
                "role",
                "userId"
            ],
            "inputProperties": {
                "email": {
                    "type": "string",
                    "description": "The email address of the user being invited\n"
                },
                "role": {
                    "type": "string",
                    "description": "The Organization role to assign to the user\n"
                }
            },
            "requiredInputs": [
                "email",
                "role"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering UserInvite resources.\n",
                "properties": {
                    "email": {
                        "type": "string",
                        "description": "The email address of the user being invited\n"
                    },
                    "expiresAt": {
                        "type": "string",
                        "description": "The expiration date of the invite\n"
                    },
                    "inviteId": {
                        "type": "string",
                        "description": "The ID of the invite\n"
                    },
                    "invitee": {
                        "$ref": "#/types/astronomer:index/UserInviteInvitee:UserInviteInvitee",
                        "description": "The profile of the invitee\n"
                    },
                    "inviter": {
                        "$ref": "#/types/astronomer:index/UserInviteInviter:UserInviteInviter",
                        "description": "The profile of the inviter\n"
                    },
                    "role": {
                        "type": "string",
                        "description": "The Organization role to assign to the user\n"
                    },
                    "userId": {
                        "type": "string",
                        "description": "The ID of the user\n"
                    }
                },
                "type": "object"
            }
        },
        "astronomer:index/userRoles:UserRoles": {
            "description": "User Roles resource\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.astronomer.UserRoles;\nimport com.pulumi.astronomer.UserRolesArgs;\nimport com.pulumi.astronomer.inputs.UserRolesWorkspaceRoleArgs;\nimport com.pulumi.astronomer.inputs.UserRolesDeploymentRoleArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var organizationRoleOnly = new UserRoles(\"organizationRoleOnly\", UserRolesArgs.builder()\n            .userId(\"clzaftcaz006001lhkey6qzzg\")\n            .organizationRole(\"ORGANIZATION_OWNER\")\n            .build());\n\n        var workspaceRoles = new UserRoles(\"workspaceRoles\", UserRolesArgs.builder()\n            .userId(\"clzaftcaz006001lhkey6qzzg\")\n            .organizationRole(\"ORGANIZATION_MEMBER\")\n            .workspaceRoles(UserRolesWorkspaceRoleArgs.builder()\n                .workspace_id(\"clx42sxw501gl01o0gjenthnh\")\n                .role(\"WORKSPACE_MEMBER\")\n                .build())\n            .build());\n\n        var deploymentRoles = new UserRoles(\"deploymentRoles\", UserRolesArgs.builder()\n            .userId(\"clzaftcaz006001lhkey6qzzg\")\n            .organizationRole(\"ORGANIZATION_MEMBER\")\n            .deploymentRoles(UserRolesDeploymentRoleArgs.builder()\n                .deployment_id(\"clyn6kxud003x01mtxmccegnh\")\n                .role(\"DEPLOYMENT_ADMIN\")\n                .build())\n            .build());\n\n        var allRoles = new UserRoles(\"allRoles\", UserRolesArgs.builder()\n            .userId(\"clzaftcaz006001lhkey6qzzg\")\n            .organizationRole(\"ORGANIZATION_MEMBER\")\n            .workspaceRoles(            \n                UserRolesWorkspaceRoleArgs.builder()\n                    .workspace_id(\"clx42sxw501gl01o0gjenthnh\")\n                    .role(\"WORKSPACE_OWNER\")\n                    .build(),\n                UserRolesWorkspaceRoleArgs.builder()\n                    .workspace_id(\"clzafte7z006001lhkey6qzzb\")\n                    .role(\"WORKSPACE_MEMBER\")\n                    .build())\n            .deploymentRoles(UserRolesDeploymentRoleArgs.builder()\n                .deployment_id(\"clyn6kxud003x01mtxmccegnh\")\n                .role(\"my custom role\")\n                .build())\n            .build());\n\n        var importedUserRoles = new UserRoles(\"importedUserRoles\", UserRolesArgs.builder()\n            .userId(\"clzaftcaz006001lhkey6qzzg\")\n            .organizationRole(\"ORGANIZATION_MEMBER\")\n            .workspaceRoles(            \n                UserRolesWorkspaceRoleArgs.builder()\n                    .workspace_id(\"clx42sxw501gl01o0gjenthnh\")\n                    .role(\"WORKSPACE_OWNER\")\n                    .build(),\n                UserRolesWorkspaceRoleArgs.builder()\n                    .workspace_id(\"clzafte7z006001lhkey6qzzb\")\n                    .role(\"WORKSPACE_MEMBER\")\n                    .build())\n            .deploymentRoles(UserRolesDeploymentRoleArgs.builder()\n                .deployment_id(\"clyn6kxud003x01mtxmccegnh\")\n                .role(\"my custom role\")\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  organizationRoleOnly:\n    type: astronomer:UserRoles\n    properties:\n      userId: clzaftcaz006001lhkey6qzzg\n      organizationRole: ORGANIZATION_OWNER\n  workspaceRoles:\n    type: astronomer:UserRoles\n    properties:\n      userId: clzaftcaz006001lhkey6qzzg\n      organizationRole: ORGANIZATION_MEMBER\n      workspaceRoles:\n        - workspace_id: clx42sxw501gl01o0gjenthnh\n          role: WORKSPACE_MEMBER\n  deploymentRoles:\n    type: astronomer:UserRoles\n    properties:\n      userId: clzaftcaz006001lhkey6qzzg\n      organizationRole: ORGANIZATION_MEMBER\n      deploymentRoles:\n        - deployment_id: clyn6kxud003x01mtxmccegnh\n          role: DEPLOYMENT_ADMIN\n  allRoles:\n    type: astronomer:UserRoles\n    properties:\n      userId: clzaftcaz006001lhkey6qzzg\n      organizationRole: ORGANIZATION_MEMBER\n      workspaceRoles:\n        - workspace_id: clx42sxw501gl01o0gjenthnh\n          role: WORKSPACE_OWNER\n        - workspace_id: clzafte7z006001lhkey6qzzb\n          role: WORKSPACE_MEMBER\n      deploymentRoles:\n        - deployment_id: clyn6kxud003x01mtxmccegnh\n          role: my custom role\n  importedUserRoles:\n    type: astronomer:UserRoles\n    properties:\n      userId: clzaftcaz006001lhkey6qzzg\n      organizationRole: ORGANIZATION_MEMBER\n      workspaceRoles:\n        - workspace_id: clx42sxw501gl01o0gjenthnh\n          role: WORKSPACE_OWNER\n        - workspace_id: clzafte7z006001lhkey6qzzb\n          role: WORKSPACE_MEMBER\n      deploymentRoles:\n        - deployment_id: clyn6kxud003x01mtxmccegnh\n          role: my custom role\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "properties": {
                "deploymentRoles": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/astronomer:index/UserRolesDeploymentRole:UserRolesDeploymentRole"
                    },
                    "description": "The roles to assign to the deployments\n"
                },
                "organizationRole": {
                    "type": "string",
                    "description": "The role to assign to the organization\n"
                },
                "userId": {
                    "type": "string",
                    "description": "The ID of the user to assign the roles to\n"
                },
                "workspaceRoles": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/astronomer:index/UserRolesWorkspaceRole:UserRolesWorkspaceRole"
                    },
                    "description": "The roles to assign to the workspaces\n"
                }
            },
            "required": [
                "organizationRole",
                "userId"
            ],
            "inputProperties": {
                "deploymentRoles": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/astronomer:index/UserRolesDeploymentRole:UserRolesDeploymentRole"
                    },
                    "description": "The roles to assign to the deployments\n"
                },
                "organizationRole": {
                    "type": "string",
                    "description": "The role to assign to the organization\n"
                },
                "userId": {
                    "type": "string",
                    "description": "The ID of the user to assign the roles to\n"
                },
                "workspaceRoles": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/astronomer:index/UserRolesWorkspaceRole:UserRolesWorkspaceRole"
                    },
                    "description": "The roles to assign to the workspaces\n"
                }
            },
            "requiredInputs": [
                "organizationRole",
                "userId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering UserRoles resources.\n",
                "properties": {
                    "deploymentRoles": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/astronomer:index/UserRolesDeploymentRole:UserRolesDeploymentRole"
                        },
                        "description": "The roles to assign to the deployments\n"
                    },
                    "organizationRole": {
                        "type": "string",
                        "description": "The role to assign to the organization\n"
                    },
                    "userId": {
                        "type": "string",
                        "description": "The ID of the user to assign the roles to\n"
                    },
                    "workspaceRoles": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/astronomer:index/UserRolesWorkspaceRole:UserRolesWorkspaceRole"
                        },
                        "description": "The roles to assign to the workspaces\n"
                    }
                },
                "type": "object"
            }
        },
        "astronomer:index/workspace:Workspace": {
            "description": "Workspace resource\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as astronomer from \"@ryan-pip/pulumi_astronomer\";\n\nconst example = new astronomer.Workspace(\"example\", {\n    description: \"my first workspace\",\n    cicdEnforcedDefault: true,\n});\nconst importedWorkspace = new astronomer.Workspace(\"importedWorkspace\", {\n    description: \"an existing workspace\",\n    cicdEnforcedDefault: true,\n});\n```\n```python\nimport pulumi\nimport pulumi_astronomer as astronomer\n\nexample = astronomer.Workspace(\"example\",\n    description=\"my first workspace\",\n    cicd_enforced_default=True)\nimported_workspace = astronomer.Workspace(\"importedWorkspace\",\n    description=\"an existing workspace\",\n    cicd_enforced_default=True)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Astronomer = RyanPip.Astronomer;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new Astronomer.Workspace(\"example\", new()\n    {\n        Description = \"my first workspace\",\n        CicdEnforcedDefault = true,\n    });\n\n    var importedWorkspace = new Astronomer.Workspace(\"importedWorkspace\", new()\n    {\n        Description = \"an existing workspace\",\n        CicdEnforcedDefault = true,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/ryan-pip/pulumi-astronomer/sdk/go/astronomer\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := astronomer.NewWorkspace(ctx, \"example\", \u0026astronomer.WorkspaceArgs{\n\t\t\tDescription:         pulumi.String(\"my first workspace\"),\n\t\t\tCicdEnforcedDefault: pulumi.Bool(true),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = astronomer.NewWorkspace(ctx, \"importedWorkspace\", \u0026astronomer.WorkspaceArgs{\n\t\t\tDescription:         pulumi.String(\"an existing workspace\"),\n\t\t\tCicdEnforcedDefault: pulumi.Bool(true),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.astronomer.Workspace;\nimport com.pulumi.astronomer.WorkspaceArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new Workspace(\"example\", WorkspaceArgs.builder()\n            .description(\"my first workspace\")\n            .cicdEnforcedDefault(true)\n            .build());\n\n        var importedWorkspace = new Workspace(\"importedWorkspace\", WorkspaceArgs.builder()\n            .description(\"an existing workspace\")\n            .cicdEnforcedDefault(true)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: astronomer:Workspace\n    properties:\n      description: my first workspace\n      cicdEnforcedDefault: true\n  importedWorkspace:\n    type: astronomer:Workspace\n    properties:\n      description: an existing workspace\n      cicdEnforcedDefault: true\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "properties": {
                "cicdEnforcedDefault": {
                    "type": "boolean",
                    "description": "Whether new Deployments enforce CI/CD deploys by default\n"
                },
                "createdAt": {
                    "type": "string",
                    "description": "Workspace creation timestamp\n"
                },
                "createdBy": {
                    "$ref": "#/types/astronomer:index/WorkspaceCreatedBy:WorkspaceCreatedBy",
                    "description": "Workspace creator\n"
                },
                "description": {
                    "type": "string",
                    "description": "Workspace description\n"
                },
                "name": {
                    "type": "string",
                    "description": "Workspace name\n"
                },
                "updatedAt": {
                    "type": "string",
                    "description": "Workspace last updated timestamp\n"
                },
                "updatedBy": {
                    "$ref": "#/types/astronomer:index/WorkspaceUpdatedBy:WorkspaceUpdatedBy",
                    "description": "Workspace updater\n"
                }
            },
            "required": [
                "cicdEnforcedDefault",
                "createdAt",
                "createdBy",
                "description",
                "name",
                "updatedAt",
                "updatedBy"
            ],
            "inputProperties": {
                "cicdEnforcedDefault": {
                    "type": "boolean",
                    "description": "Whether new Deployments enforce CI/CD deploys by default\n"
                },
                "description": {
                    "type": "string",
                    "description": "Workspace description\n"
                },
                "name": {
                    "type": "string",
                    "description": "Workspace name\n"
                }
            },
            "requiredInputs": [
                "cicdEnforcedDefault",
                "description"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Workspace resources.\n",
                "properties": {
                    "cicdEnforcedDefault": {
                        "type": "boolean",
                        "description": "Whether new Deployments enforce CI/CD deploys by default\n"
                    },
                    "createdAt": {
                        "type": "string",
                        "description": "Workspace creation timestamp\n"
                    },
                    "createdBy": {
                        "$ref": "#/types/astronomer:index/WorkspaceCreatedBy:WorkspaceCreatedBy",
                        "description": "Workspace creator\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Workspace description\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Workspace name\n"
                    },
                    "updatedAt": {
                        "type": "string",
                        "description": "Workspace last updated timestamp\n"
                    },
                    "updatedBy": {
                        "$ref": "#/types/astronomer:index/WorkspaceUpdatedBy:WorkspaceUpdatedBy",
                        "description": "Workspace updater\n"
                    }
                },
                "type": "object"
            }
        }
    },
    "functions": {
        "astronomer:index/getApiToken:getApiToken": {
            "description": "API Token data source\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as astronomer from \"@pulumi/astronomer\";\n\nconst exampleApiToken = astronomer.getApiToken({\n    id: \"clxm4836f00ql01me3nigmcr6\",\n});\nexport const apiToken = exampleApiToken;\n```\n```python\nimport pulumi\nimport pulumi_astronomer as astronomer\n\nexample_api_token = astronomer.get_api_token(id=\"clxm4836f00ql01me3nigmcr6\")\npulumi.export(\"apiToken\", example_api_token)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Astronomer = Pulumi.Astronomer;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleApiToken = Astronomer.GetApiToken.Invoke(new()\n    {\n        Id = \"clxm4836f00ql01me3nigmcr6\",\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"apiToken\"] = exampleApiToken,\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/ryan-pip/pulumi-astronomer/sdk/go/astronomer\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleApiToken, err := astronomer.LookupApiToken(ctx, \u0026astronomer.LookupApiTokenArgs{\n\t\t\tId: \"clxm4836f00ql01me3nigmcr6\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"apiToken\", exampleApiToken)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.astronomer.AstronomerFunctions;\nimport com.pulumi.astronomer.inputs.GetApiTokenArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var exampleApiToken = AstronomerFunctions.getApiToken(GetApiTokenArgs.builder()\n            .id(\"clxm4836f00ql01me3nigmcr6\")\n            .build());\n\n        ctx.export(\"apiToken\", exampleApiToken.applyValue(getApiTokenResult -\u003e getApiTokenResult));\n    }\n}\n```\n```yaml\nvariables:\n  exampleApiToken:\n    fn::invoke:\n      function: astronomer:getApiToken\n      arguments:\n        id: clxm4836f00ql01me3nigmcr6\noutputs:\n  # Output the API token using pulumi up\n  apiToken: ${exampleApiToken}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getApiToken.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "API Token identifier\n"
                    }
                },
                "type": "object",
                "required": [
                    "id"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getApiToken.\n",
                "properties": {
                    "createdAt": {
                        "type": "string",
                        "description": "API Token creation timestamp\n"
                    },
                    "createdBy": {
                        "$ref": "#/types/astronomer:index/getApiTokenCreatedBy:getApiTokenCreatedBy",
                        "description": "API Token creator\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "API Token description\n"
                    },
                    "endAt": {
                        "type": "string",
                        "description": "time when the API token will expire in UTC\n"
                    },
                    "expiryPeriodInDays": {
                        "type": "integer",
                        "description": "API Token expiry period in days\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "API Token identifier\n"
                    },
                    "lastUsedAt": {
                        "type": "string",
                        "description": "API Token last used timestamp\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "API Token name\n"
                    },
                    "roles": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/astronomer:index/getApiTokenRole:getApiTokenRole"
                        },
                        "description": "The roles assigned to the API Token\n"
                    },
                    "shortToken": {
                        "type": "string",
                        "description": "API Token short token\n"
                    },
                    "startAt": {
                        "type": "string",
                        "description": "time when the API token will become valid in UTC\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "API Token type\n"
                    },
                    "updatedAt": {
                        "type": "string",
                        "description": "API Token last updated timestamp\n"
                    },
                    "updatedBy": {
                        "$ref": "#/types/astronomer:index/getApiTokenUpdatedBy:getApiTokenUpdatedBy",
                        "description": "API Token updater\n"
                    }
                },
                "type": "object",
                "required": [
                    "createdAt",
                    "createdBy",
                    "description",
                    "endAt",
                    "expiryPeriodInDays",
                    "id",
                    "lastUsedAt",
                    "name",
                    "roles",
                    "shortToken",
                    "startAt",
                    "type",
                    "updatedAt",
                    "updatedBy"
                ]
            }
        },
        "astronomer:index/getApiTokens:getApiTokens": {
            "description": "API Tokens data source\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as astronomer from \"@pulumi/astronomer\";\n\nconst exampleApiTokens = astronomer.getApiTokens({});\nconst organizationOnlyExample = astronomer.getApiTokens({\n    includeOnlyOrganizationTokens: true,\n});\nconst workspaceExample = astronomer.getApiTokens({\n    workspaceId: \"clx42sxw501gl01o0gjenthnh\",\n});\nconst deploymentExample = astronomer.getApiTokens({\n    deploymentId: \"clx44jyu001m201m5dzsbexqr\",\n});\nexport const apiTokens = exampleApiTokens;\n```\n```python\nimport pulumi\nimport pulumi_astronomer as astronomer\n\nexample_api_tokens = astronomer.get_api_tokens()\norganization_only_example = astronomer.get_api_tokens(include_only_organization_tokens=True)\nworkspace_example = astronomer.get_api_tokens(workspace_id=\"clx42sxw501gl01o0gjenthnh\")\ndeployment_example = astronomer.get_api_tokens(deployment_id=\"clx44jyu001m201m5dzsbexqr\")\npulumi.export(\"apiTokens\", example_api_tokens)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Astronomer = Pulumi.Astronomer;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleApiTokens = Astronomer.GetApiTokens.Invoke();\n\n    var organizationOnlyExample = Astronomer.GetApiTokens.Invoke(new()\n    {\n        IncludeOnlyOrganizationTokens = true,\n    });\n\n    var workspaceExample = Astronomer.GetApiTokens.Invoke(new()\n    {\n        WorkspaceId = \"clx42sxw501gl01o0gjenthnh\",\n    });\n\n    var deploymentExample = Astronomer.GetApiTokens.Invoke(new()\n    {\n        DeploymentId = \"clx44jyu001m201m5dzsbexqr\",\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"apiTokens\"] = exampleApiTokens,\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/ryan-pip/pulumi-astronomer/sdk/go/astronomer\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleApiTokens, err := astronomer.GetApiTokens(ctx, \u0026astronomer.GetApiTokensArgs{}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = astronomer.GetApiTokens(ctx, \u0026astronomer.GetApiTokensArgs{\n\t\t\tIncludeOnlyOrganizationTokens: pulumi.BoolRef(true),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = astronomer.GetApiTokens(ctx, \u0026astronomer.GetApiTokensArgs{\n\t\t\tWorkspaceId: pulumi.StringRef(\"clx42sxw501gl01o0gjenthnh\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = astronomer.GetApiTokens(ctx, \u0026astronomer.GetApiTokensArgs{\n\t\t\tDeploymentId: pulumi.StringRef(\"clx44jyu001m201m5dzsbexqr\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"apiTokens\", exampleApiTokens)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.astronomer.AstronomerFunctions;\nimport com.pulumi.astronomer.inputs.GetApiTokensArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var exampleApiTokens = AstronomerFunctions.getApiTokens();\n\n        final var organizationOnlyExample = AstronomerFunctions.getApiTokens(GetApiTokensArgs.builder()\n            .includeOnlyOrganizationTokens(true)\n            .build());\n\n        final var workspaceExample = AstronomerFunctions.getApiTokens(GetApiTokensArgs.builder()\n            .workspaceId(\"clx42sxw501gl01o0gjenthnh\")\n            .build());\n\n        final var deploymentExample = AstronomerFunctions.getApiTokens(GetApiTokensArgs.builder()\n            .deploymentId(\"clx44jyu001m201m5dzsbexqr\")\n            .build());\n\n        ctx.export(\"apiTokens\", exampleApiTokens.applyValue(getApiTokensResult -\u003e getApiTokensResult));\n    }\n}\n```\n```yaml\nvariables:\n  exampleApiTokens:\n    fn::invoke:\n      function: astronomer:getApiTokens\n      arguments: {}\n  organizationOnlyExample:\n    fn::invoke:\n      function: astronomer:getApiTokens\n      arguments:\n        includeOnlyOrganizationTokens: true\n  workspaceExample:\n    fn::invoke:\n      function: astronomer:getApiTokens\n      arguments:\n        workspaceId: clx42sxw501gl01o0gjenthnh\n  deploymentExample:\n    fn::invoke:\n      function: astronomer:getApiTokens\n      arguments:\n        deploymentId: clx44jyu001m201m5dzsbexqr\noutputs:\n  # Output the API tokens using pulumi up\n  apiTokens: ${exampleApiTokens}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getApiTokens.\n",
                "properties": {
                    "deploymentId": {
                        "type": "string"
                    },
                    "includeOnlyOrganizationTokens": {
                        "type": "boolean"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getApiTokens.\n",
                "properties": {
                    "apiTokens": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/astronomer:index/getApiTokensApiToken:getApiTokensApiToken"
                        }
                    },
                    "deploymentId": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "includeOnlyOrganizationTokens": {
                        "type": "boolean"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "apiTokens",
                    "id"
                ]
            }
        },
        "astronomer:index/getCluster:getCluster": {
            "description": "Cluster data source\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as astronomer from \"@pulumi/astronomer\";\n\nconst exampleCluster = astronomer.getCluster({\n    id: \"clozc036j01to01jrlgvueo8t\",\n});\nexport const cluster = exampleCluster;\n```\n```python\nimport pulumi\nimport pulumi_astronomer as astronomer\n\nexample_cluster = astronomer.get_cluster(id=\"clozc036j01to01jrlgvueo8t\")\npulumi.export(\"cluster\", example_cluster)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Astronomer = Pulumi.Astronomer;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleCluster = Astronomer.GetCluster.Invoke(new()\n    {\n        Id = \"clozc036j01to01jrlgvueo8t\",\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"cluster\"] = exampleCluster,\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/ryan-pip/pulumi-astronomer/sdk/go/astronomer\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleCluster, err := astronomer.LookupCluster(ctx, \u0026astronomer.LookupClusterArgs{\n\t\t\tId: \"clozc036j01to01jrlgvueo8t\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"cluster\", exampleCluster)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.astronomer.AstronomerFunctions;\nimport com.pulumi.astronomer.inputs.GetClusterArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var exampleCluster = AstronomerFunctions.getCluster(GetClusterArgs.builder()\n            .id(\"clozc036j01to01jrlgvueo8t\")\n            .build());\n\n        ctx.export(\"cluster\", exampleCluster.applyValue(getClusterResult -\u003e getClusterResult));\n    }\n}\n```\n```yaml\nvariables:\n  exampleCluster:\n    fn::invoke:\n      function: astronomer:getCluster\n      arguments:\n        id: clozc036j01to01jrlgvueo8t\noutputs:\n  # Output the cluster value using pulumi up\n  cluster: ${exampleCluster}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getCluster.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Cluster identifier\n"
                    }
                },
                "type": "object",
                "required": [
                    "id"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getCluster.\n",
                "properties": {
                    "cloudProvider": {
                        "type": "string",
                        "description": "Cluster cloud provider\n"
                    },
                    "createdAt": {
                        "type": "string",
                        "description": "Cluster creation timestamp\n"
                    },
                    "dbInstanceType": {
                        "type": "string",
                        "description": "Cluster database instance type\n"
                    },
                    "healthStatus": {
                        "$ref": "#/types/astronomer:index/getClusterHealthStatus:getClusterHealthStatus",
                        "description": "Cluster health status\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "Cluster identifier\n"
                    },
                    "isLimited": {
                        "type": "boolean",
                        "description": "Whether the cluster is limited\n"
                    },
                    "metadata": {
                        "$ref": "#/types/astronomer:index/getClusterMetadata:getClusterMetadata",
                        "description": "Cluster metadata\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Cluster name\n"
                    },
                    "nodePools": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/astronomer:index/getClusterNodePool:getClusterNodePool"
                        },
                        "description": "Cluster node pools\n"
                    },
                    "podSubnetRange": {
                        "type": "string",
                        "description": "Cluster pod subnet range\n"
                    },
                    "providerAccount": {
                        "type": "string",
                        "description": "Cluster provider account\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "Cluster region\n"
                    },
                    "servicePeeringRange": {
                        "type": "string",
                        "description": "Cluster service peering range\n"
                    },
                    "serviceSubnetRange": {
                        "type": "string",
                        "description": "Cluster service subnet range\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "Cluster status\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/astronomer:index/getClusterTag:getClusterTag"
                        },
                        "description": "Cluster tags\n"
                    },
                    "tenantId": {
                        "type": "string",
                        "description": "Cluster tenant ID\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "Cluster type\n"
                    },
                    "updatedAt": {
                        "type": "string",
                        "description": "Cluster last updated timestamp\n"
                    },
                    "vpcSubnetRange": {
                        "type": "string",
                        "description": "Cluster VPC subnet range\n"
                    },
                    "workspaceIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Cluster workspace IDs\n"
                    }
                },
                "type": "object",
                "required": [
                    "cloudProvider",
                    "createdAt",
                    "dbInstanceType",
                    "healthStatus",
                    "id",
                    "isLimited",
                    "metadata",
                    "name",
                    "nodePools",
                    "podSubnetRange",
                    "providerAccount",
                    "region",
                    "servicePeeringRange",
                    "serviceSubnetRange",
                    "status",
                    "tags",
                    "tenantId",
                    "type",
                    "updatedAt",
                    "vpcSubnetRange",
                    "workspaceIds"
                ]
            }
        },
        "astronomer:index/getClusterOptions:getClusterOptions": {
            "description": "ClusterOptions data source\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as astronomer from \"@pulumi/astronomer\";\n\nconst exampleClusterOptions = astronomer.getClusterOptions({\n    type: \"HYBRID\",\n});\nconst exampleClusterOptionsFilterByProvider = astronomer.getClusterOptions({\n    type: \"HYBRID\",\n    cloudProvider: \"AWS\",\n});\nexport const clusterOptions = exampleClusterOptions;\n```\n```python\nimport pulumi\nimport pulumi_astronomer as astronomer\n\nexample_cluster_options = astronomer.get_cluster_options(type=\"HYBRID\")\nexample_cluster_options_filter_by_provider = astronomer.get_cluster_options(type=\"HYBRID\",\n    cloud_provider=\"AWS\")\npulumi.export(\"clusterOptions\", example_cluster_options)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Astronomer = Pulumi.Astronomer;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleClusterOptions = Astronomer.GetClusterOptions.Invoke(new()\n    {\n        Type = \"HYBRID\",\n    });\n\n    var exampleClusterOptionsFilterByProvider = Astronomer.GetClusterOptions.Invoke(new()\n    {\n        Type = \"HYBRID\",\n        CloudProvider = \"AWS\",\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"clusterOptions\"] = exampleClusterOptions,\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/ryan-pip/pulumi-astronomer/sdk/go/astronomer\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleClusterOptions, err := astronomer.GetClusterOptions(ctx, \u0026astronomer.GetClusterOptionsArgs{\n\t\t\tType: \"HYBRID\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = astronomer.GetClusterOptions(ctx, \u0026astronomer.GetClusterOptionsArgs{\n\t\t\tType:          \"HYBRID\",\n\t\t\tCloudProvider: pulumi.StringRef(\"AWS\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"clusterOptions\", exampleClusterOptions)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.astronomer.AstronomerFunctions;\nimport com.pulumi.astronomer.inputs.GetClusterOptionsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var exampleClusterOptions = AstronomerFunctions.getClusterOptions(GetClusterOptionsArgs.builder()\n            .type(\"HYBRID\")\n            .build());\n\n        final var exampleClusterOptionsFilterByProvider = AstronomerFunctions.getClusterOptions(GetClusterOptionsArgs.builder()\n            .type(\"HYBRID\")\n            .cloudProvider(\"AWS\")\n            .build());\n\n        ctx.export(\"clusterOptions\", exampleClusterOptions.applyValue(getClusterOptionsResult -\u003e getClusterOptionsResult));\n    }\n}\n```\n```yaml\nvariables:\n  exampleClusterOptions:\n    fn::invoke:\n      function: astronomer:getClusterOptions\n      arguments:\n        type: HYBRID\n  exampleClusterOptionsFilterByProvider:\n    fn::invoke:\n      function: astronomer:getClusterOptions\n      arguments:\n        type: HYBRID\n        cloudProvider: AWS\noutputs:\n  # Output the cluster options value using pulumi up\n  clusterOptions: ${exampleClusterOptions}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getClusterOptions.\n",
                "properties": {
                    "cloudProvider": {
                        "type": "string"
                    },
                    "type": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "type"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getClusterOptions.\n",
                "properties": {
                    "cloudProvider": {
                        "type": "string"
                    },
                    "clusterOptions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/astronomer:index/getClusterOptionsClusterOption:getClusterOptionsClusterOption"
                        }
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "type": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "clusterOptions",
                    "type",
                    "id"
                ]
            }
        },
        "astronomer:index/getClusters:getClusters": {
            "description": "Clusters data source\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as astronomer from \"@pulumi/astronomer\";\n\nconst exampleClusters = astronomer.getClusters({});\nconst exampleClustersFilterByNames = astronomer.getClusters({\n    names: [\"my cluster\"],\n});\nconst exampleClustersFilterByCloudProvider = astronomer.getClusters({\n    cloudProvider: \"AWS\",\n});\nexport const clusters = exampleClusters;\n```\n```python\nimport pulumi\nimport pulumi_astronomer as astronomer\n\nexample_clusters = astronomer.get_clusters()\nexample_clusters_filter_by_names = astronomer.get_clusters(names=[\"my cluster\"])\nexample_clusters_filter_by_cloud_provider = astronomer.get_clusters(cloud_provider=\"AWS\")\npulumi.export(\"clusters\", example_clusters)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Astronomer = Pulumi.Astronomer;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleClusters = Astronomer.GetClusters.Invoke();\n\n    var exampleClustersFilterByNames = Astronomer.GetClusters.Invoke(new()\n    {\n        Names = new[]\n        {\n            \"my cluster\",\n        },\n    });\n\n    var exampleClustersFilterByCloudProvider = Astronomer.GetClusters.Invoke(new()\n    {\n        CloudProvider = \"AWS\",\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"clusters\"] = exampleClusters,\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/ryan-pip/pulumi-astronomer/sdk/go/astronomer\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleClusters, err := astronomer.GetClusters(ctx, \u0026astronomer.GetClustersArgs{}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = astronomer.GetClusters(ctx, \u0026astronomer.GetClustersArgs{\n\t\t\tNames: []string{\n\t\t\t\t\"my cluster\",\n\t\t\t},\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = astronomer.GetClusters(ctx, \u0026astronomer.GetClustersArgs{\n\t\t\tCloudProvider: pulumi.StringRef(\"AWS\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"clusters\", exampleClusters)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.astronomer.AstronomerFunctions;\nimport com.pulumi.astronomer.inputs.GetClustersArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var exampleClusters = AstronomerFunctions.getClusters();\n\n        final var exampleClustersFilterByNames = AstronomerFunctions.getClusters(GetClustersArgs.builder()\n            .names(\"my cluster\")\n            .build());\n\n        final var exampleClustersFilterByCloudProvider = AstronomerFunctions.getClusters(GetClustersArgs.builder()\n            .cloudProvider(\"AWS\")\n            .build());\n\n        ctx.export(\"clusters\", exampleClusters.applyValue(getClustersResult -\u003e getClustersResult));\n    }\n}\n```\n```yaml\nvariables:\n  exampleClusters:\n    fn::invoke:\n      function: astronomer:getClusters\n      arguments: {}\n  exampleClustersFilterByNames:\n    fn::invoke:\n      function: astronomer:getClusters\n      arguments:\n        names:\n          - my cluster\n  exampleClustersFilterByCloudProvider:\n    fn::invoke:\n      function: astronomer:getClusters\n      arguments:\n        cloudProvider: AWS\noutputs:\n  # Output the clusters value using pulumi up\n  clusters: ${exampleClusters}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getClusters.\n",
                "properties": {
                    "cloudProvider": {
                        "type": "string"
                    },
                    "names": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getClusters.\n",
                "properties": {
                    "cloudProvider": {
                        "type": "string"
                    },
                    "clusters": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/astronomer:index/getClustersCluster:getClustersCluster"
                        }
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "names": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "type": "object",
                "required": [
                    "clusters",
                    "id"
                ]
            }
        },
        "astronomer:index/getDeployment:getDeployment": {
            "description": "Deployment data source\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as astronomer from \"@pulumi/astronomer\";\n\nconst exampleDeployment = astronomer.getDeployment({\n    id: \"clozc036j01to01jrlgvueo8t\",\n});\nexport const deployment = exampleDeployment;\n```\n```python\nimport pulumi\nimport pulumi_astronomer as astronomer\n\nexample_deployment = astronomer.get_deployment(id=\"clozc036j01to01jrlgvueo8t\")\npulumi.export(\"deployment\", example_deployment)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Astronomer = Pulumi.Astronomer;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleDeployment = Astronomer.GetDeployment.Invoke(new()\n    {\n        Id = \"clozc036j01to01jrlgvueo8t\",\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"deployment\"] = exampleDeployment,\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/ryan-pip/pulumi-astronomer/sdk/go/astronomer\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleDeployment, err := astronomer.LookupDeployment(ctx, \u0026astronomer.LookupDeploymentArgs{\n\t\t\tId: \"clozc036j01to01jrlgvueo8t\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"deployment\", exampleDeployment)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.astronomer.AstronomerFunctions;\nimport com.pulumi.astronomer.inputs.GetDeploymentArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var exampleDeployment = AstronomerFunctions.getDeployment(GetDeploymentArgs.builder()\n            .id(\"clozc036j01to01jrlgvueo8t\")\n            .build());\n\n        ctx.export(\"deployment\", exampleDeployment.applyValue(getDeploymentResult -\u003e getDeploymentResult));\n    }\n}\n```\n```yaml\nvariables:\n  exampleDeployment:\n    fn::invoke:\n      function: astronomer:getDeployment\n      arguments:\n        id: clozc036j01to01jrlgvueo8t\noutputs:\n  # Output the deployment value using pulumi up\n  deployment: ${exampleDeployment}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getDeployment.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Deployment identifier\n"
                    }
                },
                "type": "object",
                "required": [
                    "id"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getDeployment.\n",
                "properties": {
                    "airflowVersion": {
                        "type": "string",
                        "description": "Deployment Airflow version\n"
                    },
                    "astroRuntimeVersion": {
                        "type": "string",
                        "description": "Deployment Astro Runtime version\n"
                    },
                    "cloudProvider": {
                        "type": "string",
                        "description": "Deployment cloud provider\n"
                    },
                    "clusterId": {
                        "type": "string",
                        "description": "Deployment cluster identifier\n"
                    },
                    "contactEmails": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Deployment contact emails\n"
                    },
                    "createdAt": {
                        "type": "string",
                        "description": "Deployment creation timestamp\n"
                    },
                    "createdBy": {
                        "$ref": "#/types/astronomer:index/getDeploymentCreatedBy:getDeploymentCreatedBy",
                        "description": "Deployment creator\n"
                    },
                    "dagTarballVersion": {
                        "type": "string",
                        "description": "Deployment DAG tarball version\n"
                    },
                    "defaultTaskPodCpu": {
                        "type": "string",
                        "description": "Deployment default task pod CPU\n"
                    },
                    "defaultTaskPodMemory": {
                        "type": "string",
                        "description": "Deployment default task pod memory\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Deployment description\n"
                    },
                    "desiredDagTarballVersion": {
                        "type": "string",
                        "description": "Deployment desired DAG tarball version\n"
                    },
                    "environmentVariables": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/astronomer:index/getDeploymentEnvironmentVariable:getDeploymentEnvironmentVariable"
                        },
                        "description": "Deployment environment variables\n"
                    },
                    "executor": {
                        "type": "string",
                        "description": "Deployment executor\n"
                    },
                    "externalIps": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Deployment external IPs\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "Deployment identifier\n"
                    },
                    "imageRepository": {
                        "type": "string",
                        "description": "Deployment image repository\n"
                    },
                    "imageTag": {
                        "type": "string",
                        "description": "Deployment image tag\n"
                    },
                    "imageVersion": {
                        "type": "string",
                        "description": "Deployment image version\n"
                    },
                    "isCicdEnforced": {
                        "type": "boolean",
                        "description": "Whether the Deployment enforces CI/CD deploys\n"
                    },
                    "isDagDeployEnabled": {
                        "type": "boolean",
                        "description": "Whether DAG deploy is enabled\n"
                    },
                    "isDevelopmentMode": {
                        "type": "boolean",
                        "description": "Whether Deployment is in development mode\n"
                    },
                    "isHighAvailability": {
                        "type": "boolean",
                        "description": "Whether Deployment has high availability\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Deployment name\n"
                    },
                    "namespace": {
                        "type": "string",
                        "description": "Deployment namespace\n"
                    },
                    "oidcIssuerUrl": {
                        "type": "string",
                        "description": "Deployment OIDC issuer URL\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "Deployment region\n"
                    },
                    "resourceQuotaCpu": {
                        "type": "string",
                        "description": "Deployment resource quota CPU\n"
                    },
                    "resourceQuotaMemory": {
                        "type": "string",
                        "description": "Deployment resource quota memory\n"
                    },
                    "scalingSpec": {
                        "$ref": "#/types/astronomer:index/getDeploymentScalingSpec:getDeploymentScalingSpec",
                        "description": "Deployment scaling spec\n"
                    },
                    "scalingStatus": {
                        "$ref": "#/types/astronomer:index/getDeploymentScalingStatus:getDeploymentScalingStatus",
                        "description": "Deployment scaling status\n"
                    },
                    "schedulerAu": {
                        "type": "integer",
                        "description": "Deployment scheduler AU\n"
                    },
                    "schedulerCpu": {
                        "type": "string",
                        "description": "Deployment scheduler CPU\n"
                    },
                    "schedulerMemory": {
                        "type": "string",
                        "description": "Deployment scheduler memory\n"
                    },
                    "schedulerReplicas": {
                        "type": "integer",
                        "description": "Deployment scheduler replicas\n"
                    },
                    "schedulerSize": {
                        "type": "string",
                        "description": "Deployment scheduler size\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "Deployment status\n"
                    },
                    "statusReason": {
                        "type": "string",
                        "description": "Deployment status reason\n"
                    },
                    "taskPodNodePoolId": {
                        "type": "string",
                        "description": "Deployment task pod node pool identifier\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "Deployment type\n"
                    },
                    "updatedAt": {
                        "type": "string",
                        "description": "Deployment last updated timestamp\n"
                    },
                    "updatedBy": {
                        "$ref": "#/types/astronomer:index/getDeploymentUpdatedBy:getDeploymentUpdatedBy",
                        "description": "Deployment updater\n"
                    },
                    "webserverAirflowApiUrl": {
                        "type": "string",
                        "description": "Deployment webserver Airflow API URL\n"
                    },
                    "webserverIngressHostname": {
                        "type": "string",
                        "description": "Deployment webserver ingress hostname\n"
                    },
                    "webserverUrl": {
                        "type": "string",
                        "description": "Deployment webserver URL\n"
                    },
                    "workerQueues": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/astronomer:index/getDeploymentWorkerQueue:getDeploymentWorkerQueue"
                        },
                        "description": "Deployment worker queues\n"
                    },
                    "workloadIdentity": {
                        "type": "string",
                        "description": "Deployment workload identity\n"
                    },
                    "workspaceId": {
                        "type": "string",
                        "description": "Deployment workspace identifier\n"
                    }
                },
                "type": "object",
                "required": [
                    "airflowVersion",
                    "astroRuntimeVersion",
                    "cloudProvider",
                    "clusterId",
                    "contactEmails",
                    "createdAt",
                    "createdBy",
                    "dagTarballVersion",
                    "defaultTaskPodCpu",
                    "defaultTaskPodMemory",
                    "description",
                    "desiredDagTarballVersion",
                    "environmentVariables",
                    "executor",
                    "externalIps",
                    "id",
                    "imageRepository",
                    "imageTag",
                    "imageVersion",
                    "isCicdEnforced",
                    "isDagDeployEnabled",
                    "isDevelopmentMode",
                    "isHighAvailability",
                    "name",
                    "namespace",
                    "oidcIssuerUrl",
                    "region",
                    "resourceQuotaCpu",
                    "resourceQuotaMemory",
                    "scalingSpec",
                    "scalingStatus",
                    "schedulerAu",
                    "schedulerCpu",
                    "schedulerMemory",
                    "schedulerReplicas",
                    "schedulerSize",
                    "status",
                    "statusReason",
                    "taskPodNodePoolId",
                    "type",
                    "updatedAt",
                    "updatedBy",
                    "webserverAirflowApiUrl",
                    "webserverIngressHostname",
                    "webserverUrl",
                    "workerQueues",
                    "workloadIdentity",
                    "workspaceId"
                ]
            }
        },
        "astronomer:index/getDeploymentOptions:getDeploymentOptions": {
            "description": "Deployment options data source\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as astronomer from \"@pulumi/astronomer\";\n\nconst exampleDeploymentOptions = astronomer.getDeploymentOptions({});\nconst exampleWithDeploymentIdQueryParam = astronomer.getDeploymentOptions({\n    deploymentId: \"clozc036j01to01jrlgvueo8t\",\n});\nconst exampleWithDeploymentTypeQueryParam = astronomer.getDeploymentOptions({\n    deploymentType: \"DEDICATED\",\n});\nconst exampleWithExecutorQueryParam = astronomer.getDeploymentOptions({\n    executor: \"CELERY\",\n});\nconst exampleWithCloudProviderQueryParam = astronomer.getDeploymentOptions({\n    cloudProvider: \"AWS\",\n});\nexport const deploymentOptions = exampleDeploymentOptions;\n```\n```python\nimport pulumi\nimport pulumi_astronomer as astronomer\n\nexample_deployment_options = astronomer.get_deployment_options()\nexample_with_deployment_id_query_param = astronomer.get_deployment_options(deployment_id=\"clozc036j01to01jrlgvueo8t\")\nexample_with_deployment_type_query_param = astronomer.get_deployment_options(deployment_type=\"DEDICATED\")\nexample_with_executor_query_param = astronomer.get_deployment_options(executor=\"CELERY\")\nexample_with_cloud_provider_query_param = astronomer.get_deployment_options(cloud_provider=\"AWS\")\npulumi.export(\"deploymentOptions\", example_deployment_options)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Astronomer = Pulumi.Astronomer;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleDeploymentOptions = Astronomer.GetDeploymentOptions.Invoke();\n\n    var exampleWithDeploymentIdQueryParam = Astronomer.GetDeploymentOptions.Invoke(new()\n    {\n        DeploymentId = \"clozc036j01to01jrlgvueo8t\",\n    });\n\n    var exampleWithDeploymentTypeQueryParam = Astronomer.GetDeploymentOptions.Invoke(new()\n    {\n        DeploymentType = \"DEDICATED\",\n    });\n\n    var exampleWithExecutorQueryParam = Astronomer.GetDeploymentOptions.Invoke(new()\n    {\n        Executor = \"CELERY\",\n    });\n\n    var exampleWithCloudProviderQueryParam = Astronomer.GetDeploymentOptions.Invoke(new()\n    {\n        CloudProvider = \"AWS\",\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"deploymentOptions\"] = exampleDeploymentOptions,\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/ryan-pip/pulumi-astronomer/sdk/go/astronomer\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleDeploymentOptions, err := astronomer.GetDeploymentOptions(ctx, \u0026astronomer.GetDeploymentOptionsArgs{}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = astronomer.GetDeploymentOptions(ctx, \u0026astronomer.GetDeploymentOptionsArgs{\n\t\t\tDeploymentId: pulumi.StringRef(\"clozc036j01to01jrlgvueo8t\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = astronomer.GetDeploymentOptions(ctx, \u0026astronomer.GetDeploymentOptionsArgs{\n\t\t\tDeploymentType: pulumi.StringRef(\"DEDICATED\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = astronomer.GetDeploymentOptions(ctx, \u0026astronomer.GetDeploymentOptionsArgs{\n\t\t\tExecutor: pulumi.StringRef(\"CELERY\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = astronomer.GetDeploymentOptions(ctx, \u0026astronomer.GetDeploymentOptionsArgs{\n\t\t\tCloudProvider: pulumi.StringRef(\"AWS\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"deploymentOptions\", exampleDeploymentOptions)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.astronomer.AstronomerFunctions;\nimport com.pulumi.astronomer.inputs.GetDeploymentOptionsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var exampleDeploymentOptions = AstronomerFunctions.getDeploymentOptions();\n\n        final var exampleWithDeploymentIdQueryParam = AstronomerFunctions.getDeploymentOptions(GetDeploymentOptionsArgs.builder()\n            .deploymentId(\"clozc036j01to01jrlgvueo8t\")\n            .build());\n\n        final var exampleWithDeploymentTypeQueryParam = AstronomerFunctions.getDeploymentOptions(GetDeploymentOptionsArgs.builder()\n            .deploymentType(\"DEDICATED\")\n            .build());\n\n        final var exampleWithExecutorQueryParam = AstronomerFunctions.getDeploymentOptions(GetDeploymentOptionsArgs.builder()\n            .executor(\"CELERY\")\n            .build());\n\n        final var exampleWithCloudProviderQueryParam = AstronomerFunctions.getDeploymentOptions(GetDeploymentOptionsArgs.builder()\n            .cloudProvider(\"AWS\")\n            .build());\n\n        ctx.export(\"deploymentOptions\", exampleDeploymentOptions.applyValue(getDeploymentOptionsResult -\u003e getDeploymentOptionsResult));\n    }\n}\n```\n```yaml\nvariables:\n  exampleDeploymentOptions:\n    fn::invoke:\n      function: astronomer:getDeploymentOptions\n      arguments: {}\n  exampleWithDeploymentIdQueryParam:\n    fn::invoke:\n      function: astronomer:getDeploymentOptions\n      arguments:\n        deploymentId: clozc036j01to01jrlgvueo8t\n  exampleWithDeploymentTypeQueryParam:\n    fn::invoke:\n      function: astronomer:getDeploymentOptions\n      arguments:\n        deploymentType: DEDICATED\n  exampleWithExecutorQueryParam:\n    fn::invoke:\n      function: astronomer:getDeploymentOptions\n      arguments:\n        executor: CELERY\n  exampleWithCloudProviderQueryParam:\n    fn::invoke:\n      function: astronomer:getDeploymentOptions\n      arguments:\n        cloudProvider: AWS\noutputs:\n  # Output the deployment options value using pulumi up\n  deploymentOptions: ${exampleDeploymentOptions}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getDeploymentOptions.\n",
                "properties": {
                    "cloudProvider": {
                        "type": "string",
                        "description": "Cloud provider\n"
                    },
                    "deploymentId": {
                        "type": "string",
                        "description": "Deployment ID\n"
                    },
                    "deploymentType": {
                        "type": "string",
                        "description": "Deployment type\n"
                    },
                    "executor": {
                        "type": "string",
                        "description": "Executor\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getDeploymentOptions.\n",
                "properties": {
                    "cloudProvider": {
                        "type": "string",
                        "description": "Cloud provider\n"
                    },
                    "deploymentId": {
                        "type": "string",
                        "description": "Deployment ID\n"
                    },
                    "deploymentType": {
                        "type": "string",
                        "description": "Deployment type\n"
                    },
                    "executor": {
                        "type": "string",
                        "description": "Executor\n"
                    },
                    "executors": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Available executors\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "resourceQuotas": {
                        "$ref": "#/types/astronomer:index/getDeploymentOptionsResourceQuotas:getDeploymentOptionsResourceQuotas",
                        "description": "Resource quota options\n"
                    },
                    "runtimeReleases": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/astronomer:index/getDeploymentOptionsRuntimeRelease:getDeploymentOptionsRuntimeRelease"
                        },
                        "description": "Available Astro Runtime versions\n"
                    },
                    "schedulerMachines": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/astronomer:index/getDeploymentOptionsSchedulerMachine:getDeploymentOptionsSchedulerMachine"
                        },
                        "description": "Available scheduler sizes\n"
                    },
                    "workerMachines": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/astronomer:index/getDeploymentOptionsWorkerMachine:getDeploymentOptionsWorkerMachine"
                        },
                        "description": "Available worker machine types\n"
                    },
                    "workerQueues": {
                        "$ref": "#/types/astronomer:index/getDeploymentOptionsWorkerQueues:getDeploymentOptionsWorkerQueues",
                        "description": "Available worker queue options\n"
                    },
                    "workloadIdentityOptions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/astronomer:index/getDeploymentOptionsWorkloadIdentityOption:getDeploymentOptionsWorkloadIdentityOption"
                        },
                        "description": "Available workload identity options\n"
                    }
                },
                "type": "object",
                "required": [
                    "executors",
                    "resourceQuotas",
                    "runtimeReleases",
                    "schedulerMachines",
                    "workerMachines",
                    "workerQueues",
                    "workloadIdentityOptions",
                    "id"
                ]
            }
        },
        "astronomer:index/getDeployments:getDeployments": {
            "description": "Deployments data source\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as astronomer from \"@pulumi/astronomer\";\n\nconst exampleDeployments = astronomer.getDeployments({});\nconst exampleDeploymentsFilterByNames = astronomer.getDeployments({\n    names: [\"my deployment\"],\n});\nconst exampleDeploymentsFilterByDeploymentIds = astronomer.getDeployments({\n    deploymentIds: [\"clozc036j01to01jrlgvueo8t\"],\n});\nconst exampleDeploymentsFilterByWorkspaceIds = astronomer.getDeployments({\n    workspaceIds: [\"clozc036j01to01jrlgvu798d\"],\n});\nexport const deployments = exampleDeployments;\n```\n```python\nimport pulumi\nimport pulumi_astronomer as astronomer\n\nexample_deployments = astronomer.get_deployments()\nexample_deployments_filter_by_names = astronomer.get_deployments(names=[\"my deployment\"])\nexample_deployments_filter_by_deployment_ids = astronomer.get_deployments(deployment_ids=[\"clozc036j01to01jrlgvueo8t\"])\nexample_deployments_filter_by_workspace_ids = astronomer.get_deployments(workspace_ids=[\"clozc036j01to01jrlgvu798d\"])\npulumi.export(\"deployments\", example_deployments)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Astronomer = Pulumi.Astronomer;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleDeployments = Astronomer.GetDeployments.Invoke();\n\n    var exampleDeploymentsFilterByNames = Astronomer.GetDeployments.Invoke(new()\n    {\n        Names = new[]\n        {\n            \"my deployment\",\n        },\n    });\n\n    var exampleDeploymentsFilterByDeploymentIds = Astronomer.GetDeployments.Invoke(new()\n    {\n        DeploymentIds = new[]\n        {\n            \"clozc036j01to01jrlgvueo8t\",\n        },\n    });\n\n    var exampleDeploymentsFilterByWorkspaceIds = Astronomer.GetDeployments.Invoke(new()\n    {\n        WorkspaceIds = new[]\n        {\n            \"clozc036j01to01jrlgvu798d\",\n        },\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"deployments\"] = exampleDeployments,\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/ryan-pip/pulumi-astronomer/sdk/go/astronomer\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleDeployments, err := astronomer.GetDeployments(ctx, \u0026astronomer.GetDeploymentsArgs{}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = astronomer.GetDeployments(ctx, \u0026astronomer.GetDeploymentsArgs{\n\t\t\tNames: []string{\n\t\t\t\t\"my deployment\",\n\t\t\t},\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = astronomer.GetDeployments(ctx, \u0026astronomer.GetDeploymentsArgs{\n\t\t\tDeploymentIds: []string{\n\t\t\t\t\"clozc036j01to01jrlgvueo8t\",\n\t\t\t},\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = astronomer.GetDeployments(ctx, \u0026astronomer.GetDeploymentsArgs{\n\t\t\tWorkspaceIds: []string{\n\t\t\t\t\"clozc036j01to01jrlgvu798d\",\n\t\t\t},\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"deployments\", exampleDeployments)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.astronomer.AstronomerFunctions;\nimport com.pulumi.astronomer.inputs.GetDeploymentsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var exampleDeployments = AstronomerFunctions.getDeployments();\n\n        final var exampleDeploymentsFilterByNames = AstronomerFunctions.getDeployments(GetDeploymentsArgs.builder()\n            .names(\"my deployment\")\n            .build());\n\n        final var exampleDeploymentsFilterByDeploymentIds = AstronomerFunctions.getDeployments(GetDeploymentsArgs.builder()\n            .deploymentIds(\"clozc036j01to01jrlgvueo8t\")\n            .build());\n\n        final var exampleDeploymentsFilterByWorkspaceIds = AstronomerFunctions.getDeployments(GetDeploymentsArgs.builder()\n            .workspaceIds(\"clozc036j01to01jrlgvu798d\")\n            .build());\n\n        ctx.export(\"deployments\", exampleDeployments.applyValue(getDeploymentsResult -\u003e getDeploymentsResult));\n    }\n}\n```\n```yaml\nvariables:\n  exampleDeployments:\n    fn::invoke:\n      function: astronomer:getDeployments\n      arguments: {}\n  exampleDeploymentsFilterByNames:\n    fn::invoke:\n      function: astronomer:getDeployments\n      arguments:\n        names:\n          - my deployment\n  exampleDeploymentsFilterByDeploymentIds:\n    fn::invoke:\n      function: astronomer:getDeployments\n      arguments:\n        deploymentIds:\n          - clozc036j01to01jrlgvueo8t\n  exampleDeploymentsFilterByWorkspaceIds:\n    fn::invoke:\n      function: astronomer:getDeployments\n      arguments:\n        workspaceIds:\n          - clozc036j01to01jrlgvu798d\noutputs:\n  # Output the deployments value using pulumi up\n  deployments: ${exampleDeployments}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getDeployments.\n",
                "properties": {
                    "deploymentIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "names": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "workspaceIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getDeployments.\n",
                "properties": {
                    "deploymentIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "deployments": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/astronomer:index/getDeploymentsDeployment:getDeploymentsDeployment"
                        }
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "names": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "workspaceIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "type": "object",
                "required": [
                    "deployments",
                    "id"
                ]
            }
        },
        "astronomer:index/getOrganization:getOrganization": {
            "description": "Organization data source\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as astronomer from \"@pulumi/astronomer\";\n\nconst exampleOrganization = astronomer.getOrganization({});\nexport const organization = exampleOrganization;\n```\n```python\nimport pulumi\nimport pulumi_astronomer as astronomer\n\nexample_organization = astronomer.get_organization()\npulumi.export(\"organization\", example_organization)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Astronomer = Pulumi.Astronomer;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleOrganization = Astronomer.GetOrganization.Invoke();\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"organization\"] = exampleOrganization,\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/ryan-pip/pulumi-astronomer/sdk/go/astronomer\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleOrganization, err := astronomer.GetOrganization(ctx, map[string]interface{}{}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"organization\", exampleOrganization)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.astronomer.AstronomerFunctions;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var exampleOrganization = AstronomerFunctions.getOrganization();\n\n        ctx.export(\"organization\", exampleOrganization.applyValue(getOrganizationResult -\u003e getOrganizationResult));\n    }\n}\n```\n```yaml\nvariables:\n  exampleOrganization:\n    fn::invoke:\n      function: astronomer:getOrganization\n      arguments: {}\noutputs:\n  # Output the organization value using pulumi up\n  organization: ${exampleOrganization}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "outputs": {
                "description": "A collection of values returned by getOrganization.\n",
                "properties": {
                    "billingEmail": {
                        "type": "string",
                        "description": "Organization billing email\n"
                    },
                    "createdAt": {
                        "type": "string",
                        "description": "Organization creation timestamp\n"
                    },
                    "createdBy": {
                        "$ref": "#/types/astronomer:index/getOrganizationCreatedBy:getOrganizationCreatedBy",
                        "description": "Organization creator\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "Organization identifier\n"
                    },
                    "isScimEnabled": {
                        "type": "boolean",
                        "description": "Whether SCIM is enabled for the organization\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Organization name\n"
                    },
                    "paymentMethod": {
                        "type": "string",
                        "description": "Organization payment method\n"
                    },
                    "product": {
                        "type": "string",
                        "description": "Organization product type\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "Organization status\n"
                    },
                    "supportPlan": {
                        "type": "string",
                        "description": "Organization support plan\n"
                    },
                    "trialExpiresAt": {
                        "type": "string",
                        "description": "Organization trial expiration timestamp\n"
                    },
                    "updatedAt": {
                        "type": "string",
                        "description": "Organization last updated timestamp\n"
                    },
                    "updatedBy": {
                        "$ref": "#/types/astronomer:index/getOrganizationUpdatedBy:getOrganizationUpdatedBy",
                        "description": "Organization updater\n"
                    }
                },
                "type": "object",
                "required": [
                    "billingEmail",
                    "createdAt",
                    "createdBy",
                    "id",
                    "isScimEnabled",
                    "name",
                    "paymentMethod",
                    "product",
                    "status",
                    "supportPlan",
                    "trialExpiresAt",
                    "updatedAt",
                    "updatedBy"
                ]
            }
        },
        "astronomer:index/getTeam:getTeam": {
            "description": "Team data source\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as astronomer from \"@pulumi/astronomer\";\n\nconst exampleTeam = astronomer.getTeam({\n    id: \"clwbclrc100bl01ozjj5s4jmq\",\n});\nexport const team = exampleTeam;\n```\n```python\nimport pulumi\nimport pulumi_astronomer as astronomer\n\nexample_team = astronomer.get_team(id=\"clwbclrc100bl01ozjj5s4jmq\")\npulumi.export(\"team\", example_team)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Astronomer = Pulumi.Astronomer;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleTeam = Astronomer.GetTeam.Invoke(new()\n    {\n        Id = \"clwbclrc100bl01ozjj5s4jmq\",\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"team\"] = exampleTeam,\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/ryan-pip/pulumi-astronomer/sdk/go/astronomer\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleTeam, err := astronomer.LookupTeam(ctx, \u0026astronomer.LookupTeamArgs{\n\t\t\tId: \"clwbclrc100bl01ozjj5s4jmq\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"team\", exampleTeam)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.astronomer.AstronomerFunctions;\nimport com.pulumi.astronomer.inputs.GetTeamArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var exampleTeam = AstronomerFunctions.getTeam(GetTeamArgs.builder()\n            .id(\"clwbclrc100bl01ozjj5s4jmq\")\n            .build());\n\n        ctx.export(\"team\", exampleTeam.applyValue(getTeamResult -\u003e getTeamResult));\n    }\n}\n```\n```yaml\nvariables:\n  exampleTeam:\n    fn::invoke:\n      function: astronomer:getTeam\n      arguments:\n        id: clwbclrc100bl01ozjj5s4jmq\noutputs:\n  # Output the team value using pulumi up\n  team: ${exampleTeam}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getTeam.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Team ID\n"
                    }
                },
                "type": "object",
                "required": [
                    "id"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getTeam.\n",
                "properties": {
                    "createdAt": {
                        "type": "string",
                        "description": "Team creation timestamp\n"
                    },
                    "createdBy": {
                        "$ref": "#/types/astronomer:index/getTeamCreatedBy:getTeamCreatedBy",
                        "description": "Team creator\n"
                    },
                    "deploymentRoles": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/astronomer:index/getTeamDeploymentRole:getTeamDeploymentRole"
                        },
                        "description": "The roles assigned to the Deployments\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Team description\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "Team ID\n"
                    },
                    "isIdpManaged": {
                        "type": "boolean",
                        "description": "Whether the Team is managed by an identity provider\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Team name\n"
                    },
                    "organizationRole": {
                        "type": "string",
                        "description": "The role assigned to the Organization\n"
                    },
                    "rolesCount": {
                        "type": "integer",
                        "description": "Number of roles assigned to the Team\n"
                    },
                    "updatedAt": {
                        "type": "string",
                        "description": "Team last updated timestamp\n"
                    },
                    "updatedBy": {
                        "$ref": "#/types/astronomer:index/getTeamUpdatedBy:getTeamUpdatedBy",
                        "description": "Team updater\n"
                    },
                    "workspaceRoles": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/astronomer:index/getTeamWorkspaceRole:getTeamWorkspaceRole"
                        },
                        "description": "The roles assigned to the Workspaces\n"
                    }
                },
                "type": "object",
                "required": [
                    "createdAt",
                    "createdBy",
                    "deploymentRoles",
                    "description",
                    "id",
                    "isIdpManaged",
                    "name",
                    "organizationRole",
                    "rolesCount",
                    "updatedAt",
                    "updatedBy",
                    "workspaceRoles"
                ]
            }
        },
        "astronomer:index/getTeams:getTeams": {
            "description": "Teams data source\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as astronomer from \"@pulumi/astronomer\";\n\nconst exampleTeamsTeams = astronomer.getTeams({});\nconst exampleTeamsFilterByNames = astronomer.getTeams({\n    names: [\n        \"my first team\",\n        \"my second team\",\n    ],\n});\nexport const exampleTeams = exampleTeamsTeams;\n```\n```python\nimport pulumi\nimport pulumi_astronomer as astronomer\n\nexample_teams_teams = astronomer.get_teams()\nexample_teams_filter_by_names = astronomer.get_teams(names=[\n    \"my first team\",\n    \"my second team\",\n])\npulumi.export(\"exampleTeams\", example_teams_teams)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Astronomer = Pulumi.Astronomer;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleTeamsTeams = Astronomer.GetTeams.Invoke();\n\n    var exampleTeamsFilterByNames = Astronomer.GetTeams.Invoke(new()\n    {\n        Names = new[]\n        {\n            \"my first team\",\n            \"my second team\",\n        },\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"exampleTeams\"] = exampleTeamsTeams,\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/ryan-pip/pulumi-astronomer/sdk/go/astronomer\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleTeamsTeams, err := astronomer.GetTeams(ctx, \u0026astronomer.GetTeamsArgs{}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = astronomer.GetTeams(ctx, \u0026astronomer.GetTeamsArgs{\n\t\t\tNames: []string{\n\t\t\t\t\"my first team\",\n\t\t\t\t\"my second team\",\n\t\t\t},\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"exampleTeams\", exampleTeamsTeams)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.astronomer.AstronomerFunctions;\nimport com.pulumi.astronomer.inputs.GetTeamsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var exampleTeamsTeams = AstronomerFunctions.getTeams();\n\n        final var exampleTeamsFilterByNames = AstronomerFunctions.getTeams(GetTeamsArgs.builder()\n            .names(            \n                \"my first team\",\n                \"my second team\")\n            .build());\n\n        ctx.export(\"exampleTeams\", exampleTeamsTeams.applyValue(getTeamsResult -\u003e getTeamsResult));\n    }\n}\n```\n```yaml\nvariables:\n  exampleTeamsTeams:\n    fn::invoke:\n      function: astronomer:getTeams\n      arguments: {}\n  exampleTeamsFilterByNames:\n    fn::invoke:\n      function: astronomer:getTeams\n      arguments:\n        names:\n          - my first team\n          - my second team\noutputs:\n  # Output the teams value using pulumi up\n  exampleTeams: ${exampleTeamsTeams}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getTeams.\n",
                "properties": {
                    "names": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getTeams.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "names": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "teams": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/astronomer:index/getTeamsTeam:getTeamsTeam"
                        }
                    }
                },
                "type": "object",
                "required": [
                    "teams",
                    "id"
                ]
            }
        },
        "astronomer:index/getUser:getUser": {
            "description": "User data source\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as astronomer from \"@pulumi/astronomer\";\n\nconst exampleUser = astronomer.getUser({\n    id: \"clhpichn8002m01mqa4ocs7g6\",\n});\nexport const user = exampleUser;\n```\n```python\nimport pulumi\nimport pulumi_astronomer as astronomer\n\nexample_user = astronomer.get_user(id=\"clhpichn8002m01mqa4ocs7g6\")\npulumi.export(\"user\", example_user)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Astronomer = Pulumi.Astronomer;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleUser = Astronomer.GetUser.Invoke(new()\n    {\n        Id = \"clhpichn8002m01mqa4ocs7g6\",\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"user\"] = exampleUser,\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/ryan-pip/pulumi-astronomer/sdk/go/astronomer\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleUser, err := astronomer.GetUser(ctx, \u0026astronomer.GetUserArgs{\n\t\t\tId: \"clhpichn8002m01mqa4ocs7g6\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"user\", exampleUser)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.astronomer.AstronomerFunctions;\nimport com.pulumi.astronomer.inputs.GetUserArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var exampleUser = AstronomerFunctions.getUser(GetUserArgs.builder()\n            .id(\"clhpichn8002m01mqa4ocs7g6\")\n            .build());\n\n        ctx.export(\"user\", exampleUser.applyValue(getUserResult -\u003e getUserResult));\n    }\n}\n```\n```yaml\nvariables:\n  exampleUser:\n    fn::invoke:\n      function: astronomer:getUser\n      arguments:\n        id: clhpichn8002m01mqa4ocs7g6\noutputs:\n  # Output the user value using pulumi up\n  user: ${exampleUser}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getUser.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "User identifier\n"
                    }
                },
                "type": "object",
                "required": [
                    "id"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getUser.\n",
                "properties": {
                    "avatarUrl": {
                        "type": "string",
                        "description": "User avatar URL\n"
                    },
                    "createdAt": {
                        "type": "string",
                        "description": "User creation timestamp\n"
                    },
                    "deploymentRoles": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/astronomer:index/getUserDeploymentRole:getUserDeploymentRole"
                        },
                        "description": "The roles assigned to the deployments\n"
                    },
                    "fullName": {
                        "type": "string",
                        "description": "User full name\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "User identifier\n"
                    },
                    "organizationRole": {
                        "type": "string",
                        "description": "The role assigned to the organization\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "User status\n"
                    },
                    "updatedAt": {
                        "type": "string",
                        "description": "User last updated timestamp\n"
                    },
                    "username": {
                        "type": "string",
                        "description": "User username\n"
                    },
                    "workspaceRoles": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/astronomer:index/getUserWorkspaceRole:getUserWorkspaceRole"
                        },
                        "description": "The roles assigned to the workspaces\n"
                    }
                },
                "type": "object",
                "required": [
                    "avatarUrl",
                    "createdAt",
                    "deploymentRoles",
                    "fullName",
                    "id",
                    "organizationRole",
                    "status",
                    "updatedAt",
                    "username",
                    "workspaceRoles"
                ]
            }
        },
        "astronomer:index/getUsers:getUsers": {
            "description": "Users data source\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as astronomer from \"@pulumi/astronomer\";\n\nconst exampleUsersUsers = astronomer.getUsers({});\nconst exampleUsersFilterByWorkspaceId = astronomer.getUsers({\n    workspaceId: \"clx42sxw501gl01o0gjenthnh\",\n});\nconst exampleUsersFilterByDeploymentId = astronomer.getUsers({\n    deploymentId: \"clx44jyu001m201m5dzsbexqr\",\n});\nexport const exampleUsers = exampleUsersUsers;\n```\n```python\nimport pulumi\nimport pulumi_astronomer as astronomer\n\nexample_users_users = astronomer.get_users()\nexample_users_filter_by_workspace_id = astronomer.get_users(workspace_id=\"clx42sxw501gl01o0gjenthnh\")\nexample_users_filter_by_deployment_id = astronomer.get_users(deployment_id=\"clx44jyu001m201m5dzsbexqr\")\npulumi.export(\"exampleUsers\", example_users_users)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Astronomer = Pulumi.Astronomer;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleUsersUsers = Astronomer.GetUsers.Invoke();\n\n    var exampleUsersFilterByWorkspaceId = Astronomer.GetUsers.Invoke(new()\n    {\n        WorkspaceId = \"clx42sxw501gl01o0gjenthnh\",\n    });\n\n    var exampleUsersFilterByDeploymentId = Astronomer.GetUsers.Invoke(new()\n    {\n        DeploymentId = \"clx44jyu001m201m5dzsbexqr\",\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"exampleUsers\"] = exampleUsersUsers,\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/ryan-pip/pulumi-astronomer/sdk/go/astronomer\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleUsersUsers, err := astronomer.GetUsers(ctx, \u0026astronomer.GetUsersArgs{}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = astronomer.GetUsers(ctx, \u0026astronomer.GetUsersArgs{\n\t\t\tWorkspaceId: pulumi.StringRef(\"clx42sxw501gl01o0gjenthnh\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = astronomer.GetUsers(ctx, \u0026astronomer.GetUsersArgs{\n\t\t\tDeploymentId: pulumi.StringRef(\"clx44jyu001m201m5dzsbexqr\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"exampleUsers\", exampleUsersUsers)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.astronomer.AstronomerFunctions;\nimport com.pulumi.astronomer.inputs.GetUsersArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var exampleUsersUsers = AstronomerFunctions.getUsers();\n\n        final var exampleUsersFilterByWorkspaceId = AstronomerFunctions.getUsers(GetUsersArgs.builder()\n            .workspaceId(\"clx42sxw501gl01o0gjenthnh\")\n            .build());\n\n        final var exampleUsersFilterByDeploymentId = AstronomerFunctions.getUsers(GetUsersArgs.builder()\n            .deploymentId(\"clx44jyu001m201m5dzsbexqr\")\n            .build());\n\n        ctx.export(\"exampleUsers\", exampleUsersUsers.applyValue(getUsersResult -\u003e getUsersResult));\n    }\n}\n```\n```yaml\nvariables:\n  exampleUsersUsers:\n    fn::invoke:\n      function: astronomer:getUsers\n      arguments: {}\n  exampleUsersFilterByWorkspaceId:\n    fn::invoke:\n      function: astronomer:getUsers\n      arguments:\n        workspaceId: clx42sxw501gl01o0gjenthnh\n  exampleUsersFilterByDeploymentId:\n    fn::invoke:\n      function: astronomer:getUsers\n      arguments:\n        deploymentId: clx44jyu001m201m5dzsbexqr\noutputs:\n  # Output the users value using pulumi up\n  exampleUsers: ${exampleUsersUsers}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getUsers.\n",
                "properties": {
                    "deploymentId": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getUsers.\n",
                "properties": {
                    "deploymentId": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "users": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/astronomer:index/getUsersUser:getUsersUser"
                        }
                    },
                    "workspaceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "users",
                    "id"
                ]
            }
        },
        "astronomer:index/getWorkspace:getWorkspace": {
            "description": "Workspace data source\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as astronomer from \"@pulumi/astronomer\";\n\nconst exampleWorkspace = astronomer.getWorkspace({\n    id: \"clozc036j01to01jrlgvueo8t\",\n});\nexport const workspace = exampleWorkspace;\n```\n```python\nimport pulumi\nimport pulumi_astronomer as astronomer\n\nexample_workspace = astronomer.get_workspace(id=\"clozc036j01to01jrlgvueo8t\")\npulumi.export(\"workspace\", example_workspace)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Astronomer = Pulumi.Astronomer;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleWorkspace = Astronomer.GetWorkspace.Invoke(new()\n    {\n        Id = \"clozc036j01to01jrlgvueo8t\",\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"workspace\"] = exampleWorkspace,\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/ryan-pip/pulumi-astronomer/sdk/go/astronomer\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleWorkspace, err := astronomer.LookupWorkspace(ctx, \u0026astronomer.LookupWorkspaceArgs{\n\t\t\tId: \"clozc036j01to01jrlgvueo8t\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"workspace\", exampleWorkspace)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.astronomer.AstronomerFunctions;\nimport com.pulumi.astronomer.inputs.GetWorkspaceArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var exampleWorkspace = AstronomerFunctions.getWorkspace(GetWorkspaceArgs.builder()\n            .id(\"clozc036j01to01jrlgvueo8t\")\n            .build());\n\n        ctx.export(\"workspace\", exampleWorkspace.applyValue(getWorkspaceResult -\u003e getWorkspaceResult));\n    }\n}\n```\n```yaml\nvariables:\n  exampleWorkspace:\n    fn::invoke:\n      function: astronomer:getWorkspace\n      arguments:\n        id: clozc036j01to01jrlgvueo8t\noutputs:\n  # Output the workspace value using pulumi up\n  workspace: ${exampleWorkspace}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getWorkspace.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Workspace identifier\n"
                    }
                },
                "type": "object",
                "required": [
                    "id"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getWorkspace.\n",
                "properties": {
                    "cicdEnforcedDefault": {
                        "type": "boolean",
                        "description": "Whether new Deployments enforce CI/CD deploys by default\n"
                    },
                    "createdAt": {
                        "type": "string",
                        "description": "Workspace creation timestamp\n"
                    },
                    "createdBy": {
                        "$ref": "#/types/astronomer:index/getWorkspaceCreatedBy:getWorkspaceCreatedBy",
                        "description": "Workspace creator\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Workspace description\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "Workspace identifier\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Workspace name\n"
                    },
                    "updatedAt": {
                        "type": "string",
                        "description": "Workspace last updated timestamp\n"
                    },
                    "updatedBy": {
                        "$ref": "#/types/astronomer:index/getWorkspaceUpdatedBy:getWorkspaceUpdatedBy",
                        "description": "Workspace updater\n"
                    }
                },
                "type": "object",
                "required": [
                    "cicdEnforcedDefault",
                    "createdAt",
                    "createdBy",
                    "description",
                    "id",
                    "name",
                    "updatedAt",
                    "updatedBy"
                ]
            }
        },
        "astronomer:index/getWorkspaces:getWorkspaces": {
            "description": "Workspaces data source\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as astronomer from \"@pulumi/astronomer\";\n\nconst exampleWorkspacesWorkspaces = astronomer.getWorkspaces({});\nconst exampleWorkspacesFilterByWorkspaceIds = astronomer.getWorkspaces({\n    workspaceIds: [\n        \"clozc036j01to01jrlgvueo8t\",\n        \"clozc036j01to01jrlgvueo81\",\n    ],\n});\nconst exampleWorkspacesFilterByNames = astronomer.getWorkspaces({\n    names: [\n        \"my first workspace\",\n        \"my second workspace\",\n    ],\n});\nexport const exampleWorkspaces = exampleWorkspacesWorkspaces;\n```\n```python\nimport pulumi\nimport pulumi_astronomer as astronomer\n\nexample_workspaces_workspaces = astronomer.get_workspaces()\nexample_workspaces_filter_by_workspace_ids = astronomer.get_workspaces(workspace_ids=[\n    \"clozc036j01to01jrlgvueo8t\",\n    \"clozc036j01to01jrlgvueo81\",\n])\nexample_workspaces_filter_by_names = astronomer.get_workspaces(names=[\n    \"my first workspace\",\n    \"my second workspace\",\n])\npulumi.export(\"exampleWorkspaces\", example_workspaces_workspaces)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Astronomer = Pulumi.Astronomer;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleWorkspacesWorkspaces = Astronomer.GetWorkspaces.Invoke();\n\n    var exampleWorkspacesFilterByWorkspaceIds = Astronomer.GetWorkspaces.Invoke(new()\n    {\n        WorkspaceIds = new[]\n        {\n            \"clozc036j01to01jrlgvueo8t\",\n            \"clozc036j01to01jrlgvueo81\",\n        },\n    });\n\n    var exampleWorkspacesFilterByNames = Astronomer.GetWorkspaces.Invoke(new()\n    {\n        Names = new[]\n        {\n            \"my first workspace\",\n            \"my second workspace\",\n        },\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"exampleWorkspaces\"] = exampleWorkspacesWorkspaces,\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/ryan-pip/pulumi-astronomer/sdk/go/astronomer\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleWorkspacesWorkspaces, err := astronomer.GetWorkspaces(ctx, \u0026astronomer.GetWorkspacesArgs{}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = astronomer.GetWorkspaces(ctx, \u0026astronomer.GetWorkspacesArgs{\n\t\t\tWorkspaceIds: []string{\n\t\t\t\t\"clozc036j01to01jrlgvueo8t\",\n\t\t\t\t\"clozc036j01to01jrlgvueo81\",\n\t\t\t},\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = astronomer.GetWorkspaces(ctx, \u0026astronomer.GetWorkspacesArgs{\n\t\t\tNames: []string{\n\t\t\t\t\"my first workspace\",\n\t\t\t\t\"my second workspace\",\n\t\t\t},\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"exampleWorkspaces\", exampleWorkspacesWorkspaces)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.astronomer.AstronomerFunctions;\nimport com.pulumi.astronomer.inputs.GetWorkspacesArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var exampleWorkspacesWorkspaces = AstronomerFunctions.getWorkspaces();\n\n        final var exampleWorkspacesFilterByWorkspaceIds = AstronomerFunctions.getWorkspaces(GetWorkspacesArgs.builder()\n            .workspaceIds(            \n                \"clozc036j01to01jrlgvueo8t\",\n                \"clozc036j01to01jrlgvueo81\")\n            .build());\n\n        final var exampleWorkspacesFilterByNames = AstronomerFunctions.getWorkspaces(GetWorkspacesArgs.builder()\n            .names(            \n                \"my first workspace\",\n                \"my second workspace\")\n            .build());\n\n        ctx.export(\"exampleWorkspaces\", exampleWorkspacesWorkspaces.applyValue(getWorkspacesResult -\u003e getWorkspacesResult));\n    }\n}\n```\n```yaml\nvariables:\n  exampleWorkspacesWorkspaces:\n    fn::invoke:\n      function: astronomer:getWorkspaces\n      arguments: {}\n  exampleWorkspacesFilterByWorkspaceIds:\n    fn::invoke:\n      function: astronomer:getWorkspaces\n      arguments:\n        workspaceIds:\n          - clozc036j01to01jrlgvueo8t\n          - clozc036j01to01jrlgvueo81\n  exampleWorkspacesFilterByNames:\n    fn::invoke:\n      function: astronomer:getWorkspaces\n      arguments:\n        names:\n          - my first workspace\n          - my second workspace\noutputs:\n  # Output the workspaces value using pulumi up\n  exampleWorkspaces: ${exampleWorkspacesWorkspaces}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getWorkspaces.\n",
                "properties": {
                    "names": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "workspaceIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getWorkspaces.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "names": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "workspaceIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "workspaces": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/astronomer:index/getWorkspacesWorkspace:getWorkspacesWorkspace"
                        }
                    }
                },
                "type": "object",
                "required": [
                    "workspaces",
                    "id"
                ]
            }
        }
    }
}