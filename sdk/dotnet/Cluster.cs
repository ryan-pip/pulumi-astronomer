// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace RyanPip.Astronomer
{
    /// <summary>
    /// A cluster within an organization. An Astro cluster is a Kubernetes cluster that hosts the infrastructure required to run Deployments.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Astronomer = RyanPip.Astronomer;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var dedicated = new Astronomer.Workspace("dedicated", new()
    ///     {
    ///         CicdEnforcedDefault = true,
    ///         Description = "Workspace that demos a dedicated deployment set up",
    ///     });
    /// 
    ///     var awsDedicated = new Astronomer.Cluster("awsDedicated", new()
    ///     {
    ///         CloudProvider = "AWS",
    ///         Region = "us-east-1",
    ///         Type = "DEDICATED",
    ///         VpcSubnetRange = "172.20.0.0/20",
    ///         K8sTags = new[] {},
    ///         NodePools = new[] {},
    ///         WorkspaceIds = new[]
    ///         {
    ///             dedicated.Id,
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// </summary>
    [AstronomerResourceType("astronomer:index/cluster:Cluster")]
    public partial class Cluster : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The cluster's cloud provider.
        /// </summary>
        [Output("cloudProvider")]
        public Output<string> CloudProvider { get; private set; } = null!;

        /// <summary>
        /// The type of database instance that is used for the cluster. Required for Hybrid clusters.
        /// </summary>
        [Output("dbInstanceType")]
        public Output<string> DbInstanceType { get; private set; } = null!;

        /// <summary>
        /// Whether the cluster is limited.
        /// </summary>
        [Output("isLimited")]
        public Output<bool> IsLimited { get; private set; } = null!;

        /// <summary>
        /// The Kubernetes tags in the cluster.
        /// </summary>
        [Output("k8sTags")]
        public Output<ImmutableArray<Outputs.ClusterK8sTag>> K8sTags { get; private set; } = null!;

        /// <summary>
        /// The cluster's metadata.
        /// </summary>
        [Output("metadata")]
        public Output<Outputs.ClusterMetadata> Metadata { get; private set; } = null!;

        /// <summary>
        /// The name of the node pool.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The list of node pools to create in the cluster.
        /// </summary>
        [Output("nodePools")]
        public Output<ImmutableArray<Outputs.ClusterNodePool>> NodePools { get; private set; } = null!;

        /// <summary>
        /// The organization this cluster is associated with.
        /// </summary>
        [Output("organizationId")]
        public Output<string> OrganizationId { get; private set; } = null!;

        /// <summary>
        /// The subnet range for Pods. For GCP clusters only.
        /// </summary>
        [Output("podSubnetRange")]
        public Output<string?> PodSubnetRange { get; private set; } = null!;

        /// <summary>
        /// The provider account ID. Required for Hybrid clusters.
        /// </summary>
        [Output("providerAccount")]
        public Output<string> ProviderAccount { get; private set; } = null!;

        /// <summary>
        /// The cluster's region.
        /// </summary>
        [Output("region")]
        public Output<string> Region { get; private set; } = null!;

        /// <summary>
        /// The service peering range. For GCP clusters only.
        /// </summary>
        [Output("servicePeeringRange")]
        public Output<string?> ServicePeeringRange { get; private set; } = null!;

        /// <summary>
        /// The service subnet range. For GCP clusters only.
        /// </summary>
        [Output("serviceSubnetRange")]
        public Output<string?> ServiceSubnetRange { get; private set; } = null!;

        /// <summary>
        /// The tenant ID. For Azure clusters only.
        /// </summary>
        [Output("tenantId")]
        public Output<string> TenantId { get; private set; } = null!;

        /// <summary>
        /// The cluster's type.
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;

        /// <summary>
        /// The VPC subnet range.
        /// </summary>
        [Output("vpcSubnetRange")]
        public Output<string> VpcSubnetRange { get; private set; } = null!;

        /// <summary>
        /// The list of Workspaces that are authorized to the cluster.
        /// </summary>
        [Output("workspaceIds")]
        public Output<ImmutableArray<string>> WorkspaceIds { get; private set; } = null!;


        /// <summary>
        /// Create a Cluster resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Cluster(string name, ClusterArgs args, CustomResourceOptions? options = null)
            : base("astronomer:index/cluster:Cluster", name, args ?? new ClusterArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Cluster(string name, Input<string> id, ClusterState? state = null, CustomResourceOptions? options = null)
            : base("astronomer:index/cluster:Cluster", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/ryan.pip/pulumi-astronomer",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Cluster resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Cluster Get(string name, Input<string> id, ClusterState? state = null, CustomResourceOptions? options = null)
        {
            return new Cluster(name, id, state, options);
        }
    }

    public sealed class ClusterArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The cluster's cloud provider.
        /// </summary>
        [Input("cloudProvider", required: true)]
        public Input<string> CloudProvider { get; set; } = null!;

        /// <summary>
        /// The type of database instance that is used for the cluster. Required for Hybrid clusters.
        /// </summary>
        [Input("dbInstanceType")]
        public Input<string>? DbInstanceType { get; set; }

        [Input("k8sTags")]
        private InputList<Inputs.ClusterK8sTagArgs>? _k8sTags;

        /// <summary>
        /// The Kubernetes tags in the cluster.
        /// </summary>
        public InputList<Inputs.ClusterK8sTagArgs> K8sTags
        {
            get => _k8sTags ?? (_k8sTags = new InputList<Inputs.ClusterK8sTagArgs>());
            set => _k8sTags = value;
        }

        /// <summary>
        /// The name of the node pool.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("nodePools")]
        private InputList<Inputs.ClusterNodePoolArgs>? _nodePools;

        /// <summary>
        /// The list of node pools to create in the cluster.
        /// </summary>
        public InputList<Inputs.ClusterNodePoolArgs> NodePools
        {
            get => _nodePools ?? (_nodePools = new InputList<Inputs.ClusterNodePoolArgs>());
            set => _nodePools = value;
        }

        /// <summary>
        /// The subnet range for Pods. For GCP clusters only.
        /// </summary>
        [Input("podSubnetRange")]
        public Input<string>? PodSubnetRange { get; set; }

        /// <summary>
        /// The provider account ID. Required for Hybrid clusters.
        /// </summary>
        [Input("providerAccount")]
        public Input<string>? ProviderAccount { get; set; }

        /// <summary>
        /// The cluster's region.
        /// </summary>
        [Input("region", required: true)]
        public Input<string> Region { get; set; } = null!;

        /// <summary>
        /// The service peering range. For GCP clusters only.
        /// </summary>
        [Input("servicePeeringRange")]
        public Input<string>? ServicePeeringRange { get; set; }

        /// <summary>
        /// The service subnet range. For GCP clusters only.
        /// </summary>
        [Input("serviceSubnetRange")]
        public Input<string>? ServiceSubnetRange { get; set; }

        /// <summary>
        /// The tenant ID. For Azure clusters only.
        /// </summary>
        [Input("tenantId")]
        public Input<string>? TenantId { get; set; }

        /// <summary>
        /// The cluster's type.
        /// </summary>
        [Input("type", required: true)]
        public Input<string> Type { get; set; } = null!;

        /// <summary>
        /// The VPC subnet range.
        /// </summary>
        [Input("vpcSubnetRange", required: true)]
        public Input<string> VpcSubnetRange { get; set; } = null!;

        [Input("workspaceIds", required: true)]
        private InputList<string>? _workspaceIds;

        /// <summary>
        /// The list of Workspaces that are authorized to the cluster.
        /// </summary>
        public InputList<string> WorkspaceIds
        {
            get => _workspaceIds ?? (_workspaceIds = new InputList<string>());
            set => _workspaceIds = value;
        }

        public ClusterArgs()
        {
        }
        public static new ClusterArgs Empty => new ClusterArgs();
    }

    public sealed class ClusterState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The cluster's cloud provider.
        /// </summary>
        [Input("cloudProvider")]
        public Input<string>? CloudProvider { get; set; }

        /// <summary>
        /// The type of database instance that is used for the cluster. Required for Hybrid clusters.
        /// </summary>
        [Input("dbInstanceType")]
        public Input<string>? DbInstanceType { get; set; }

        /// <summary>
        /// Whether the cluster is limited.
        /// </summary>
        [Input("isLimited")]
        public Input<bool>? IsLimited { get; set; }

        [Input("k8sTags")]
        private InputList<Inputs.ClusterK8sTagGetArgs>? _k8sTags;

        /// <summary>
        /// The Kubernetes tags in the cluster.
        /// </summary>
        public InputList<Inputs.ClusterK8sTagGetArgs> K8sTags
        {
            get => _k8sTags ?? (_k8sTags = new InputList<Inputs.ClusterK8sTagGetArgs>());
            set => _k8sTags = value;
        }

        /// <summary>
        /// The cluster's metadata.
        /// </summary>
        [Input("metadata")]
        public Input<Inputs.ClusterMetadataGetArgs>? Metadata { get; set; }

        /// <summary>
        /// The name of the node pool.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("nodePools")]
        private InputList<Inputs.ClusterNodePoolGetArgs>? _nodePools;

        /// <summary>
        /// The list of node pools to create in the cluster.
        /// </summary>
        public InputList<Inputs.ClusterNodePoolGetArgs> NodePools
        {
            get => _nodePools ?? (_nodePools = new InputList<Inputs.ClusterNodePoolGetArgs>());
            set => _nodePools = value;
        }

        /// <summary>
        /// The organization this cluster is associated with.
        /// </summary>
        [Input("organizationId")]
        public Input<string>? OrganizationId { get; set; }

        /// <summary>
        /// The subnet range for Pods. For GCP clusters only.
        /// </summary>
        [Input("podSubnetRange")]
        public Input<string>? PodSubnetRange { get; set; }

        /// <summary>
        /// The provider account ID. Required for Hybrid clusters.
        /// </summary>
        [Input("providerAccount")]
        public Input<string>? ProviderAccount { get; set; }

        /// <summary>
        /// The cluster's region.
        /// </summary>
        [Input("region")]
        public Input<string>? Region { get; set; }

        /// <summary>
        /// The service peering range. For GCP clusters only.
        /// </summary>
        [Input("servicePeeringRange")]
        public Input<string>? ServicePeeringRange { get; set; }

        /// <summary>
        /// The service subnet range. For GCP clusters only.
        /// </summary>
        [Input("serviceSubnetRange")]
        public Input<string>? ServiceSubnetRange { get; set; }

        /// <summary>
        /// The tenant ID. For Azure clusters only.
        /// </summary>
        [Input("tenantId")]
        public Input<string>? TenantId { get; set; }

        /// <summary>
        /// The cluster's type.
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        /// <summary>
        /// The VPC subnet range.
        /// </summary>
        [Input("vpcSubnetRange")]
        public Input<string>? VpcSubnetRange { get; set; }

        [Input("workspaceIds")]
        private InputList<string>? _workspaceIds;

        /// <summary>
        /// The list of Workspaces that are authorized to the cluster.
        /// </summary>
        public InputList<string> WorkspaceIds
        {
            get => _workspaceIds ?? (_workspaceIds = new InputList<string>());
            set => _workspaceIds = value;
        }

        public ClusterState()
        {
        }
        public static new ClusterState Empty => new ClusterState();
    }
}
