// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace RyanPip.Astronomer
{
    /// <summary>
    /// An Astro Deployment is an Airflow environment that is powered by all core Airflow components.
    /// </summary>
    [AstronomerResourceType("astronomer:index/deployment:Deployment")]
    public partial class Deployment : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Deployment's Astro Runtime version.
        /// </summary>
        [Output("astroRuntimeVersion")]
        public Output<string?> AstroRuntimeVersion { get; private set; } = null!;

        /// <summary>
        /// The cloud provider for the Deployment's cluster. Optional if `ClusterId` is specified.
        /// </summary>
        [Output("cloudProvider")]
        public Output<string> CloudProvider { get; private set; } = null!;

        /// <summary>
        /// The ID of the cluster where the Deployment will be created.
        /// </summary>
        [Output("clusterId")]
        public Output<string?> ClusterId { get; private set; } = null!;

        /// <summary>
        /// The default CPU resource usage for a worker Pod when running the Kubernetes executor or KubernetesPodOperator. Units are in number of CPU cores.
        /// </summary>
        [Output("defaultTaskPodCpu")]
        public Output<string> DefaultTaskPodCpu { get; private set; } = null!;

        /// <summary>
        /// The default memory resource usage for a worker Pod when running the Kubernetes executor or KubernetesPodOperator. Units are in `Gi`. This value must always be twice the value of `DefaultTaskPodCpu`.
        /// </summary>
        [Output("defaultTaskPodMemory")]
        public Output<string> DefaultTaskPodMemory { get; private set; } = null!;

        /// <summary>
        /// The Deployment's description.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// List of environment variables to add to the Deployment.
        /// </summary>
        [Output("environmentVariables")]
        public Output<ImmutableArray<Outputs.DeploymentEnvironmentVariable>> EnvironmentVariables { get; private set; } = null!;

        /// <summary>
        /// The Deployment's executor type.
        /// </summary>
        [Output("executor")]
        public Output<string> Executor { get; private set; } = null!;

        /// <summary>
        /// Whether the Deployment requires that all deploys are made through CI/CD.
        /// </summary>
        [Output("isCicdEnforced")]
        public Output<bool> IsCicdEnforced { get; private set; } = null!;

        /// <summary>
        /// Whether the Deployment has DAG deploys enabled.
        /// </summary>
        [Output("isDagDeployEnabled")]
        public Output<bool> IsDagDeployEnabled { get; private set; } = null!;

        /// <summary>
        /// Whether the Deployment is configured for high availability. If `true`, multiple scheduler pods will be online.
        /// </summary>
        [Output("isHighAvailability")]
        public Output<bool> IsHighAvailability { get; private set; } = null!;

        /// <summary>
        /// The Deployment's name.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The region to host the Deployment in. Optional if `ClusterId` is specified.
        /// </summary>
        [Output("region")]
        public Output<string?> Region { get; private set; } = null!;

        /// <summary>
        /// The CPU quota for worker Pods when running the Kubernetes executor or KubernetesPodOperator. If current CPU usage across all workers exceeds the quota, no new worker Pods can be scheduled. Units are in number of CPU cores.
        /// </summary>
        [Output("resourceQuotaCpu")]
        public Output<string> ResourceQuotaCpu { get; private set; } = null!;

        /// <summary>
        /// The memory quota for worker Pods when running the Kubernetes executor or KubernetesPodOperator. If current memory usage across all workers exceeds the quota, no new worker Pods can be scheduled. Units are in `Gi`. This value must always be twice the value of `ResourceQuotaCpu`.
        /// </summary>
        [Output("resourceQuotaMemory")]
        public Output<string> ResourceQuotaMemory { get; private set; } = null!;

        /// <summary>
        /// The size of the scheduler pod.
        /// </summary>
        [Output("schedulerSize")]
        public Output<string> SchedulerSize { get; private set; } = null!;

        /// <summary>
        /// The node pool ID for the task pods. For KUBERNETES executor only.
        /// </summary>
        [Output("taskPodNodePoolId")]
        public Output<string?> TaskPodNodePoolId { get; private set; } = null!;

        /// <summary>
        /// The type of the Deployment.
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;

        /// <summary>
        /// The list of worker queues configured for the Deployment. Applies only when `Executor` is `CELERY`. At least 1 worker queue is needed. All Deployments need at least 1 worker queue called `default`.
        /// </summary>
        [Output("workerQueues")]
        public Output<ImmutableArray<Outputs.DeploymentWorkerQueue>> WorkerQueues { get; private set; } = null!;

        /// <summary>
        /// The Deployment's workload identity.
        /// </summary>
        [Output("workloadIdentity")]
        public Output<string> WorkloadIdentity { get; private set; } = null!;

        /// <summary>
        /// The ID of the workspace to which the Deployment belongs.
        /// </summary>
        [Output("workspaceId")]
        public Output<string> WorkspaceId { get; private set; } = null!;


        /// <summary>
        /// Create a Deployment resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Deployment(string name, DeploymentArgs args, CustomResourceOptions? options = null)
            : base("astronomer:index/deployment:Deployment", name, args ?? new DeploymentArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Deployment(string name, Input<string> id, DeploymentState? state = null, CustomResourceOptions? options = null)
            : base("astronomer:index/deployment:Deployment", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/ryan.pip/pulumi-astronomer",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Deployment resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Deployment Get(string name, Input<string> id, DeploymentState? state = null, CustomResourceOptions? options = null)
        {
            return new Deployment(name, id, state, options);
        }
    }

    public sealed class DeploymentArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Deployment's Astro Runtime version.
        /// </summary>
        [Input("astroRuntimeVersion")]
        public Input<string>? AstroRuntimeVersion { get; set; }

        /// <summary>
        /// The cloud provider for the Deployment's cluster. Optional if `ClusterId` is specified.
        /// </summary>
        [Input("cloudProvider")]
        public Input<string>? CloudProvider { get; set; }

        /// <summary>
        /// The ID of the cluster where the Deployment will be created.
        /// </summary>
        [Input("clusterId")]
        public Input<string>? ClusterId { get; set; }

        /// <summary>
        /// The default CPU resource usage for a worker Pod when running the Kubernetes executor or KubernetesPodOperator. Units are in number of CPU cores.
        /// </summary>
        [Input("defaultTaskPodCpu", required: true)]
        public Input<string> DefaultTaskPodCpu { get; set; } = null!;

        /// <summary>
        /// The default memory resource usage for a worker Pod when running the Kubernetes executor or KubernetesPodOperator. Units are in `Gi`. This value must always be twice the value of `DefaultTaskPodCpu`.
        /// </summary>
        [Input("defaultTaskPodMemory", required: true)]
        public Input<string> DefaultTaskPodMemory { get; set; } = null!;

        /// <summary>
        /// The Deployment's description.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("environmentVariables")]
        private InputList<Inputs.DeploymentEnvironmentVariableArgs>? _environmentVariables;

        /// <summary>
        /// List of environment variables to add to the Deployment.
        /// </summary>
        public InputList<Inputs.DeploymentEnvironmentVariableArgs> EnvironmentVariables
        {
            get => _environmentVariables ?? (_environmentVariables = new InputList<Inputs.DeploymentEnvironmentVariableArgs>());
            set => _environmentVariables = value;
        }

        /// <summary>
        /// The Deployment's executor type.
        /// </summary>
        [Input("executor", required: true)]
        public Input<string> Executor { get; set; } = null!;

        /// <summary>
        /// Whether the Deployment requires that all deploys are made through CI/CD.
        /// </summary>
        [Input("isCicdEnforced", required: true)]
        public Input<bool> IsCicdEnforced { get; set; } = null!;

        /// <summary>
        /// Whether the Deployment has DAG deploys enabled.
        /// </summary>
        [Input("isDagDeployEnabled", required: true)]
        public Input<bool> IsDagDeployEnabled { get; set; } = null!;

        /// <summary>
        /// Whether the Deployment is configured for high availability. If `true`, multiple scheduler pods will be online.
        /// </summary>
        [Input("isHighAvailability", required: true)]
        public Input<bool> IsHighAvailability { get; set; } = null!;

        /// <summary>
        /// The Deployment's name.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The region to host the Deployment in. Optional if `ClusterId` is specified.
        /// </summary>
        [Input("region")]
        public Input<string>? Region { get; set; }

        /// <summary>
        /// The CPU quota for worker Pods when running the Kubernetes executor or KubernetesPodOperator. If current CPU usage across all workers exceeds the quota, no new worker Pods can be scheduled. Units are in number of CPU cores.
        /// </summary>
        [Input("resourceQuotaCpu", required: true)]
        public Input<string> ResourceQuotaCpu { get; set; } = null!;

        /// <summary>
        /// The memory quota for worker Pods when running the Kubernetes executor or KubernetesPodOperator. If current memory usage across all workers exceeds the quota, no new worker Pods can be scheduled. Units are in `Gi`. This value must always be twice the value of `ResourceQuotaCpu`.
        /// </summary>
        [Input("resourceQuotaMemory", required: true)]
        public Input<string> ResourceQuotaMemory { get; set; } = null!;

        /// <summary>
        /// The size of the scheduler pod.
        /// </summary>
        [Input("schedulerSize", required: true)]
        public Input<string> SchedulerSize { get; set; } = null!;

        /// <summary>
        /// The node pool ID for the task pods. For KUBERNETES executor only.
        /// </summary>
        [Input("taskPodNodePoolId")]
        public Input<string>? TaskPodNodePoolId { get; set; }

        /// <summary>
        /// The type of the Deployment.
        /// </summary>
        [Input("type", required: true)]
        public Input<string> Type { get; set; } = null!;

        [Input("workerQueues")]
        private InputList<Inputs.DeploymentWorkerQueueArgs>? _workerQueues;

        /// <summary>
        /// The list of worker queues configured for the Deployment. Applies only when `Executor` is `CELERY`. At least 1 worker queue is needed. All Deployments need at least 1 worker queue called `default`.
        /// </summary>
        public InputList<Inputs.DeploymentWorkerQueueArgs> WorkerQueues
        {
            get => _workerQueues ?? (_workerQueues = new InputList<Inputs.DeploymentWorkerQueueArgs>());
            set => _workerQueues = value;
        }

        /// <summary>
        /// The ID of the workspace to which the Deployment belongs.
        /// </summary>
        [Input("workspaceId", required: true)]
        public Input<string> WorkspaceId { get; set; } = null!;

        public DeploymentArgs()
        {
        }
        public static new DeploymentArgs Empty => new DeploymentArgs();
    }

    public sealed class DeploymentState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Deployment's Astro Runtime version.
        /// </summary>
        [Input("astroRuntimeVersion")]
        public Input<string>? AstroRuntimeVersion { get; set; }

        /// <summary>
        /// The cloud provider for the Deployment's cluster. Optional if `ClusterId` is specified.
        /// </summary>
        [Input("cloudProvider")]
        public Input<string>? CloudProvider { get; set; }

        /// <summary>
        /// The ID of the cluster where the Deployment will be created.
        /// </summary>
        [Input("clusterId")]
        public Input<string>? ClusterId { get; set; }

        /// <summary>
        /// The default CPU resource usage for a worker Pod when running the Kubernetes executor or KubernetesPodOperator. Units are in number of CPU cores.
        /// </summary>
        [Input("defaultTaskPodCpu")]
        public Input<string>? DefaultTaskPodCpu { get; set; }

        /// <summary>
        /// The default memory resource usage for a worker Pod when running the Kubernetes executor or KubernetesPodOperator. Units are in `Gi`. This value must always be twice the value of `DefaultTaskPodCpu`.
        /// </summary>
        [Input("defaultTaskPodMemory")]
        public Input<string>? DefaultTaskPodMemory { get; set; }

        /// <summary>
        /// The Deployment's description.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("environmentVariables")]
        private InputList<Inputs.DeploymentEnvironmentVariableGetArgs>? _environmentVariables;

        /// <summary>
        /// List of environment variables to add to the Deployment.
        /// </summary>
        public InputList<Inputs.DeploymentEnvironmentVariableGetArgs> EnvironmentVariables
        {
            get => _environmentVariables ?? (_environmentVariables = new InputList<Inputs.DeploymentEnvironmentVariableGetArgs>());
            set => _environmentVariables = value;
        }

        /// <summary>
        /// The Deployment's executor type.
        /// </summary>
        [Input("executor")]
        public Input<string>? Executor { get; set; }

        /// <summary>
        /// Whether the Deployment requires that all deploys are made through CI/CD.
        /// </summary>
        [Input("isCicdEnforced")]
        public Input<bool>? IsCicdEnforced { get; set; }

        /// <summary>
        /// Whether the Deployment has DAG deploys enabled.
        /// </summary>
        [Input("isDagDeployEnabled")]
        public Input<bool>? IsDagDeployEnabled { get; set; }

        /// <summary>
        /// Whether the Deployment is configured for high availability. If `true`, multiple scheduler pods will be online.
        /// </summary>
        [Input("isHighAvailability")]
        public Input<bool>? IsHighAvailability { get; set; }

        /// <summary>
        /// The Deployment's name.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The region to host the Deployment in. Optional if `ClusterId` is specified.
        /// </summary>
        [Input("region")]
        public Input<string>? Region { get; set; }

        /// <summary>
        /// The CPU quota for worker Pods when running the Kubernetes executor or KubernetesPodOperator. If current CPU usage across all workers exceeds the quota, no new worker Pods can be scheduled. Units are in number of CPU cores.
        /// </summary>
        [Input("resourceQuotaCpu")]
        public Input<string>? ResourceQuotaCpu { get; set; }

        /// <summary>
        /// The memory quota for worker Pods when running the Kubernetes executor or KubernetesPodOperator. If current memory usage across all workers exceeds the quota, no new worker Pods can be scheduled. Units are in `Gi`. This value must always be twice the value of `ResourceQuotaCpu`.
        /// </summary>
        [Input("resourceQuotaMemory")]
        public Input<string>? ResourceQuotaMemory { get; set; }

        /// <summary>
        /// The size of the scheduler pod.
        /// </summary>
        [Input("schedulerSize")]
        public Input<string>? SchedulerSize { get; set; }

        /// <summary>
        /// The node pool ID for the task pods. For KUBERNETES executor only.
        /// </summary>
        [Input("taskPodNodePoolId")]
        public Input<string>? TaskPodNodePoolId { get; set; }

        /// <summary>
        /// The type of the Deployment.
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        [Input("workerQueues")]
        private InputList<Inputs.DeploymentWorkerQueueGetArgs>? _workerQueues;

        /// <summary>
        /// The list of worker queues configured for the Deployment. Applies only when `Executor` is `CELERY`. At least 1 worker queue is needed. All Deployments need at least 1 worker queue called `default`.
        /// </summary>
        public InputList<Inputs.DeploymentWorkerQueueGetArgs> WorkerQueues
        {
            get => _workerQueues ?? (_workerQueues = new InputList<Inputs.DeploymentWorkerQueueGetArgs>());
            set => _workerQueues = value;
        }

        /// <summary>
        /// The Deployment's workload identity.
        /// </summary>
        [Input("workloadIdentity")]
        public Input<string>? WorkloadIdentity { get; set; }

        /// <summary>
        /// The ID of the workspace to which the Deployment belongs.
        /// </summary>
        [Input("workspaceId")]
        public Input<string>? WorkspaceId { get; set; }

        public DeploymentState()
        {
        }
        public static new DeploymentState Empty => new DeploymentState();
    }
}
