// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace RyanPip.Astronomer
{
    public static class GetCluster
    {
        /// <summary>
        /// Astronomer Cluster Data Source
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Astronomer = Pulumi.Astronomer;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var importedCluster = Astronomer.GetCluster.Invoke(new()
        ///     {
        ///         Id = "clqoclq8201pp01p0cbt77feb",
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetClusterResult> InvokeAsync(GetClusterArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetClusterResult>("astronomer:index/getCluster:getCluster", args ?? new GetClusterArgs(), options.WithDefaults());

        /// <summary>
        /// Astronomer Cluster Data Source
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Astronomer = Pulumi.Astronomer;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var importedCluster = Astronomer.GetCluster.Invoke(new()
        ///     {
        ///         Id = "clqoclq8201pp01p0cbt77feb",
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetClusterResult> Invoke(GetClusterInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetClusterResult>("astronomer:index/getCluster:getCluster", args ?? new GetClusterInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetClusterArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The cluster's identifier.
        /// </summary>
        [Input("id", required: true)]
        public string Id { get; set; } = null!;

        public GetClusterArgs()
        {
        }
        public static new GetClusterArgs Empty => new GetClusterArgs();
    }

    public sealed class GetClusterInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The cluster's identifier.
        /// </summary>
        [Input("id", required: true)]
        public Input<string> Id { get; set; } = null!;

        public GetClusterInvokeArgs()
        {
        }
        public static new GetClusterInvokeArgs Empty => new GetClusterInvokeArgs();
    }


    [OutputType]
    public sealed class GetClusterResult
    {
        /// <summary>
        /// The cluster's cloud provider.
        /// </summary>
        public readonly string CloudProvider;
        /// <summary>
        /// The type of database instance that is used for the cluster. Required for Hybrid clusters.
        /// </summary>
        public readonly string DbInstanceType;
        /// <summary>
        /// The cluster's identifier.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Whether the cluster is limited.
        /// </summary>
        public readonly bool IsLimited;
        /// <summary>
        /// The Kubernetes tags in the cluster.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetClusterK8sTagResult> K8sTags;
        /// <summary>
        /// The cluster's metadata.
        /// </summary>
        public readonly Outputs.GetClusterMetadataResult Metadata;
        /// <summary>
        /// The cluster's name.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The list of node pools to create in the cluster.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetClusterNodePoolResult> NodePools;
        /// <summary>
        /// The organization this cluster is associated with.
        /// </summary>
        public readonly string OrganizationId;
        /// <summary>
        /// The subnet range for Pods. For GCP clusters only.
        /// </summary>
        public readonly string PodSubnetRange;
        /// <summary>
        /// The provider account ID. Required for Hybrid clusters.
        /// </summary>
        public readonly string ProviderAccount;
        /// <summary>
        /// The cluster's region.
        /// </summary>
        public readonly string Region;
        /// <summary>
        /// The service peering range. For GCP clusters only.
        /// </summary>
        public readonly string ServicePeeringRange;
        /// <summary>
        /// The service subnet range. For GCP clusters only.
        /// </summary>
        public readonly string ServiceSubnetRange;
        /// <summary>
        /// The tenant ID. For Azure clusters only.
        /// </summary>
        public readonly string TenantId;
        /// <summary>
        /// The cluster's type.
        /// </summary>
        public readonly string Type;
        /// <summary>
        /// The VPC subnet range.
        /// </summary>
        public readonly string VpcSubnetRange;
        /// <summary>
        /// The list of Workspaces that are authorized to the cluster.
        /// </summary>
        public readonly ImmutableArray<string> WorkspaceIds;

        [OutputConstructor]
        private GetClusterResult(
            string cloudProvider,

            string dbInstanceType,

            string id,

            bool isLimited,

            ImmutableArray<Outputs.GetClusterK8sTagResult> k8sTags,

            Outputs.GetClusterMetadataResult metadata,

            string name,

            ImmutableArray<Outputs.GetClusterNodePoolResult> nodePools,

            string organizationId,

            string podSubnetRange,

            string providerAccount,

            string region,

            string servicePeeringRange,

            string serviceSubnetRange,

            string tenantId,

            string type,

            string vpcSubnetRange,

            ImmutableArray<string> workspaceIds)
        {
            CloudProvider = cloudProvider;
            DbInstanceType = dbInstanceType;
            Id = id;
            IsLimited = isLimited;
            K8sTags = k8sTags;
            Metadata = metadata;
            Name = name;
            NodePools = nodePools;
            OrganizationId = organizationId;
            PodSubnetRange = podSubnetRange;
            ProviderAccount = providerAccount;
            Region = region;
            ServicePeeringRange = servicePeeringRange;
            ServiceSubnetRange = serviceSubnetRange;
            TenantId = tenantId;
            Type = type;
            VpcSubnetRange = vpcSubnetRange;
            WorkspaceIds = workspaceIds;
        }
    }
}
