// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace RyanPip.Astronomer
{
    public static class GetCluster
    {
        /// <summary>
        /// Cluster data source
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Astronomer = Pulumi.Astronomer;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Astronomer.GetCluster.Invoke(new()
        ///     {
        ///         Id = "clozc036j01to01jrlgvueo8t",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetClusterResult> InvokeAsync(GetClusterArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetClusterResult>("astronomer:index/getCluster:getCluster", args ?? new GetClusterArgs(), options.WithDefaults());

        /// <summary>
        /// Cluster data source
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Astronomer = Pulumi.Astronomer;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Astronomer.GetCluster.Invoke(new()
        ///     {
        ///         Id = "clozc036j01to01jrlgvueo8t",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetClusterResult> Invoke(GetClusterInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetClusterResult>("astronomer:index/getCluster:getCluster", args ?? new GetClusterInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetClusterArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Cluster identifier
        /// </summary>
        [Input("id", required: true)]
        public string Id { get; set; } = null!;

        public GetClusterArgs()
        {
        }
        public static new GetClusterArgs Empty => new GetClusterArgs();
    }

    public sealed class GetClusterInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Cluster identifier
        /// </summary>
        [Input("id", required: true)]
        public Input<string> Id { get; set; } = null!;

        public GetClusterInvokeArgs()
        {
        }
        public static new GetClusterInvokeArgs Empty => new GetClusterInvokeArgs();
    }


    [OutputType]
    public sealed class GetClusterResult
    {
        /// <summary>
        /// Cluster cloud provider
        /// </summary>
        public readonly string CloudProvider;
        /// <summary>
        /// Cluster creation timestamp
        /// </summary>
        public readonly string CreatedAt;
        /// <summary>
        /// Cluster database instance type
        /// </summary>
        public readonly string DbInstanceType;
        /// <summary>
        /// Cluster identifier
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Whether the cluster is limited
        /// </summary>
        public readonly bool IsLimited;
        /// <summary>
        /// Cluster metadata
        /// </summary>
        public readonly Outputs.GetClusterMetadataResult Metadata;
        /// <summary>
        /// Cluster name
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Cluster node pools
        /// </summary>
        public readonly ImmutableArray<Outputs.GetClusterNodePoolResult> NodePools;
        /// <summary>
        /// Cluster pod subnet range
        /// </summary>
        public readonly string PodSubnetRange;
        /// <summary>
        /// Cluster provider account
        /// </summary>
        public readonly string ProviderAccount;
        /// <summary>
        /// Cluster region
        /// </summary>
        public readonly string Region;
        /// <summary>
        /// Cluster service peering range
        /// </summary>
        public readonly string ServicePeeringRange;
        /// <summary>
        /// Cluster service subnet range
        /// </summary>
        public readonly string ServiceSubnetRange;
        /// <summary>
        /// Cluster status
        /// </summary>
        public readonly string Status;
        /// <summary>
        /// Cluster tags
        /// </summary>
        public readonly ImmutableArray<Outputs.GetClusterTagResult> Tags;
        /// <summary>
        /// Cluster tenant ID
        /// </summary>
        public readonly string TenantId;
        /// <summary>
        /// Cluster type
        /// </summary>
        public readonly string Type;
        /// <summary>
        /// Cluster last updated timestamp
        /// </summary>
        public readonly string UpdatedAt;
        /// <summary>
        /// Cluster VPC subnet range
        /// </summary>
        public readonly string VpcSubnetRange;
        /// <summary>
        /// Cluster workspace IDs
        /// </summary>
        public readonly ImmutableArray<string> WorkspaceIds;

        [OutputConstructor]
        private GetClusterResult(
            string cloudProvider,

            string createdAt,

            string dbInstanceType,

            string id,

            bool isLimited,

            Outputs.GetClusterMetadataResult metadata,

            string name,

            ImmutableArray<Outputs.GetClusterNodePoolResult> nodePools,

            string podSubnetRange,

            string providerAccount,

            string region,

            string servicePeeringRange,

            string serviceSubnetRange,

            string status,

            ImmutableArray<Outputs.GetClusterTagResult> tags,

            string tenantId,

            string type,

            string updatedAt,

            string vpcSubnetRange,

            ImmutableArray<string> workspaceIds)
        {
            CloudProvider = cloudProvider;
            CreatedAt = createdAt;
            DbInstanceType = dbInstanceType;
            Id = id;
            IsLimited = isLimited;
            Metadata = metadata;
            Name = name;
            NodePools = nodePools;
            PodSubnetRange = podSubnetRange;
            ProviderAccount = providerAccount;
            Region = region;
            ServicePeeringRange = servicePeeringRange;
            ServiceSubnetRange = serviceSubnetRange;
            Status = status;
            Tags = tags;
            TenantId = tenantId;
            Type = type;
            UpdatedAt = updatedAt;
            VpcSubnetRange = vpcSubnetRange;
            WorkspaceIds = workspaceIds;
        }
    }
}
