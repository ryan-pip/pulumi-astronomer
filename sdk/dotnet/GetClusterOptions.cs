// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace RyanPip.Astronomer
{
    public static class GetClusterOptions
    {
        /// <summary>
        /// ClusterOptions data source
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Astronomer = Pulumi.Astronomer;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var exampleClusterOptions = Astronomer.GetClusterOptions.Invoke(new()
        ///     {
        ///         Type = "HYBRID",
        ///     });
        /// 
        ///     var exampleClusterOptionsFilterByProvider = Astronomer.GetClusterOptions.Invoke(new()
        ///     {
        ///         CloudProvider = "AWS",
        ///         Type = "HYBRID",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetClusterOptionsResult> InvokeAsync(GetClusterOptionsArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetClusterOptionsResult>("astronomer:index/getClusterOptions:getClusterOptions", args ?? new GetClusterOptionsArgs(), options.WithDefaults());

        /// <summary>
        /// ClusterOptions data source
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Astronomer = Pulumi.Astronomer;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var exampleClusterOptions = Astronomer.GetClusterOptions.Invoke(new()
        ///     {
        ///         Type = "HYBRID",
        ///     });
        /// 
        ///     var exampleClusterOptionsFilterByProvider = Astronomer.GetClusterOptions.Invoke(new()
        ///     {
        ///         CloudProvider = "AWS",
        ///         Type = "HYBRID",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetClusterOptionsResult> Invoke(GetClusterOptionsInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetClusterOptionsResult>("astronomer:index/getClusterOptions:getClusterOptions", args ?? new GetClusterOptionsInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetClusterOptionsArgs : global::Pulumi.InvokeArgs
    {
        [Input("cloudProvider")]
        public string? CloudProvider { get; set; }

        [Input("type", required: true)]
        public string Type { get; set; } = null!;

        public GetClusterOptionsArgs()
        {
        }
        public static new GetClusterOptionsArgs Empty => new GetClusterOptionsArgs();
    }

    public sealed class GetClusterOptionsInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("cloudProvider")]
        public Input<string>? CloudProvider { get; set; }

        [Input("type", required: true)]
        public Input<string> Type { get; set; } = null!;

        public GetClusterOptionsInvokeArgs()
        {
        }
        public static new GetClusterOptionsInvokeArgs Empty => new GetClusterOptionsInvokeArgs();
    }


    [OutputType]
    public sealed class GetClusterOptionsResult
    {
        public readonly string? CloudProvider;
        public readonly ImmutableArray<Outputs.GetClusterOptionsClusterOptionResult> ClusterOptions;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string Type;

        [OutputConstructor]
        private GetClusterOptionsResult(
            string? cloudProvider,

            ImmutableArray<Outputs.GetClusterOptionsClusterOptionResult> clusterOptions,

            string id,

            string type)
        {
            CloudProvider = cloudProvider;
            ClusterOptions = clusterOptions;
            Id = id;
            Type = type;
        }
    }
}
