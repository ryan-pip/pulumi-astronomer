// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace RyanPip.Astronomer
{
    public static class GetDeployments
    {
        /// <summary>
        /// Deployments data source
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Astronomer = Pulumi.Astronomer;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var exampleDeployments = Astronomer.GetDeployments.Invoke();
        /// 
        ///     var exampleDeploymentsFilterByNames = Astronomer.GetDeployments.Invoke(new()
        ///     {
        ///         Names = new[]
        ///         {
        ///             "my deployment",
        ///         },
        ///     });
        /// 
        ///     var exampleDeploymentsFilterByDeploymentIds = Astronomer.GetDeployments.Invoke(new()
        ///     {
        ///         DeploymentIds = new[]
        ///         {
        ///             "clozc036j01to01jrlgvueo8t",
        ///         },
        ///     });
        /// 
        ///     var exampleDeploymentsFilterByWorkspaceIds = Astronomer.GetDeployments.Invoke(new()
        ///     {
        ///         WorkspaceIds = new[]
        ///         {
        ///             "clozc036j01to01jrlgvu798d",
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetDeploymentsResult> InvokeAsync(GetDeploymentsArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetDeploymentsResult>("astronomer:index/getDeployments:getDeployments", args ?? new GetDeploymentsArgs(), options.WithDefaults());

        /// <summary>
        /// Deployments data source
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Astronomer = Pulumi.Astronomer;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var exampleDeployments = Astronomer.GetDeployments.Invoke();
        /// 
        ///     var exampleDeploymentsFilterByNames = Astronomer.GetDeployments.Invoke(new()
        ///     {
        ///         Names = new[]
        ///         {
        ///             "my deployment",
        ///         },
        ///     });
        /// 
        ///     var exampleDeploymentsFilterByDeploymentIds = Astronomer.GetDeployments.Invoke(new()
        ///     {
        ///         DeploymentIds = new[]
        ///         {
        ///             "clozc036j01to01jrlgvueo8t",
        ///         },
        ///     });
        /// 
        ///     var exampleDeploymentsFilterByWorkspaceIds = Astronomer.GetDeployments.Invoke(new()
        ///     {
        ///         WorkspaceIds = new[]
        ///         {
        ///             "clozc036j01to01jrlgvu798d",
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetDeploymentsResult> Invoke(GetDeploymentsInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetDeploymentsResult>("astronomer:index/getDeployments:getDeployments", args ?? new GetDeploymentsInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetDeploymentsArgs : global::Pulumi.InvokeArgs
    {
        [Input("deploymentIds")]
        private List<string>? _deploymentIds;
        public List<string> DeploymentIds
        {
            get => _deploymentIds ?? (_deploymentIds = new List<string>());
            set => _deploymentIds = value;
        }

        [Input("names")]
        private List<string>? _names;
        public List<string> Names
        {
            get => _names ?? (_names = new List<string>());
            set => _names = value;
        }

        [Input("workspaceIds")]
        private List<string>? _workspaceIds;
        public List<string> WorkspaceIds
        {
            get => _workspaceIds ?? (_workspaceIds = new List<string>());
            set => _workspaceIds = value;
        }

        public GetDeploymentsArgs()
        {
        }
        public static new GetDeploymentsArgs Empty => new GetDeploymentsArgs();
    }

    public sealed class GetDeploymentsInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("deploymentIds")]
        private InputList<string>? _deploymentIds;
        public InputList<string> DeploymentIds
        {
            get => _deploymentIds ?? (_deploymentIds = new InputList<string>());
            set => _deploymentIds = value;
        }

        [Input("names")]
        private InputList<string>? _names;
        public InputList<string> Names
        {
            get => _names ?? (_names = new InputList<string>());
            set => _names = value;
        }

        [Input("workspaceIds")]
        private InputList<string>? _workspaceIds;
        public InputList<string> WorkspaceIds
        {
            get => _workspaceIds ?? (_workspaceIds = new InputList<string>());
            set => _workspaceIds = value;
        }

        public GetDeploymentsInvokeArgs()
        {
        }
        public static new GetDeploymentsInvokeArgs Empty => new GetDeploymentsInvokeArgs();
    }


    [OutputType]
    public sealed class GetDeploymentsResult
    {
        public readonly ImmutableArray<string> DeploymentIds;
        public readonly ImmutableArray<Outputs.GetDeploymentsDeploymentResult> Deployments;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly ImmutableArray<string> Names;
        public readonly ImmutableArray<string> WorkspaceIds;

        [OutputConstructor]
        private GetDeploymentsResult(
            ImmutableArray<string> deploymentIds,

            ImmutableArray<Outputs.GetDeploymentsDeploymentResult> deployments,

            string id,

            ImmutableArray<string> names,

            ImmutableArray<string> workspaceIds)
        {
            DeploymentIds = deploymentIds;
            Deployments = deployments;
            Id = id;
            Names = names;
            WorkspaceIds = workspaceIds;
        }
    }
}
