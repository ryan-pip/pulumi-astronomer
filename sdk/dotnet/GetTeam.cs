// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace RyanPip.Astronomer
{
    public static class GetTeam
    {
        /// <summary>
        /// Team data source
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Astronomer = Pulumi.Astronomer;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Astronomer.GetTeam.Invoke(new()
        ///     {
        ///         Id = "clwbclrc100bl01ozjj5s4jmq",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetTeamResult> InvokeAsync(GetTeamArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetTeamResult>("astronomer:index/getTeam:getTeam", args ?? new GetTeamArgs(), options.WithDefaults());

        /// <summary>
        /// Team data source
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Astronomer = Pulumi.Astronomer;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Astronomer.GetTeam.Invoke(new()
        ///     {
        ///         Id = "clwbclrc100bl01ozjj5s4jmq",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetTeamResult> Invoke(GetTeamInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetTeamResult>("astronomer:index/getTeam:getTeam", args ?? new GetTeamInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetTeamArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Team identifier
        /// </summary>
        [Input("id", required: true)]
        public string Id { get; set; } = null!;

        public GetTeamArgs()
        {
        }
        public static new GetTeamArgs Empty => new GetTeamArgs();
    }

    public sealed class GetTeamInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Team identifier
        /// </summary>
        [Input("id", required: true)]
        public Input<string> Id { get; set; } = null!;

        public GetTeamInvokeArgs()
        {
        }
        public static new GetTeamInvokeArgs Empty => new GetTeamInvokeArgs();
    }


    [OutputType]
    public sealed class GetTeamResult
    {
        /// <summary>
        /// Team creation timestamp
        /// </summary>
        public readonly string CreatedAt;
        /// <summary>
        /// Team creator
        /// </summary>
        public readonly Outputs.GetTeamCreatedByResult CreatedBy;
        /// <summary>
        /// The roles assigned to the deployments
        /// </summary>
        public readonly ImmutableArray<Outputs.GetTeamDeploymentRoleResult> DeploymentRoles;
        /// <summary>
        /// Team description
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// Team identifier
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Whether the team is managed by an identity provider
        /// </summary>
        public readonly bool IsIdpManaged;
        /// <summary>
        /// Team name
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The role assigned to the organization
        /// </summary>
        public readonly string OrganizationRole;
        /// <summary>
        /// Number of roles assigned to the team
        /// </summary>
        public readonly int RolesCount;
        /// <summary>
        /// Team last updated timestamp
        /// </summary>
        public readonly string UpdatedAt;
        /// <summary>
        /// Team updater
        /// </summary>
        public readonly Outputs.GetTeamUpdatedByResult UpdatedBy;
        /// <summary>
        /// The roles assigned to the workspaces
        /// </summary>
        public readonly ImmutableArray<Outputs.GetTeamWorkspaceRoleResult> WorkspaceRoles;

        [OutputConstructor]
        private GetTeamResult(
            string createdAt,

            Outputs.GetTeamCreatedByResult createdBy,

            ImmutableArray<Outputs.GetTeamDeploymentRoleResult> deploymentRoles,

            string description,

            string id,

            bool isIdpManaged,

            string name,

            string organizationRole,

            int rolesCount,

            string updatedAt,

            Outputs.GetTeamUpdatedByResult updatedBy,

            ImmutableArray<Outputs.GetTeamWorkspaceRoleResult> workspaceRoles)
        {
            CreatedAt = createdAt;
            CreatedBy = createdBy;
            DeploymentRoles = deploymentRoles;
            Description = description;
            Id = id;
            IsIdpManaged = isIdpManaged;
            Name = name;
            OrganizationRole = organizationRole;
            RolesCount = rolesCount;
            UpdatedAt = updatedAt;
            UpdatedBy = updatedBy;
            WorkspaceRoles = workspaceRoles;
        }
    }
}
