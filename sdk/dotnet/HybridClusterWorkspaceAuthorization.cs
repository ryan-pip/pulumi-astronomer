// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace RyanPip.Astronomer
{
    /// <summary>
    /// Hybrid cluster workspace authorization resource
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Astronomer = RyanPip.Astronomer;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Astronomer.HybridClusterWorkspaceAuthorization("example", new()
    ///     {
    ///         ClusterId = "clk8h0fv1006801j8yysfybbt",
    ///         WorkspaceIds = new[]
    ///         {
    ///             "cl70oe7cu445571iynrkthtybl",
    ///             "cl70oe7cu445571iynrkthacsd",
    ///         },
    ///     });
    /// 
    ///     var importedClusterWorkspaceAuthorization = new Astronomer.HybridClusterWorkspaceAuthorization("importedClusterWorkspaceAuthorization", new()
    ///     {
    ///         ClusterId = "clk8h0fv1006801j8yysfybbt",
    ///         WorkspaceIds = new[]
    ///         {
    ///             "cl70oe7cu445571iynrkthtybl",
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// </summary>
    [AstronomerResourceType("astronomer:index/hybridClusterWorkspaceAuthorization:HybridClusterWorkspaceAuthorization")]
    public partial class HybridClusterWorkspaceAuthorization : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The ID of the hybrid cluster to set authorizations for
        /// </summary>
        [Output("clusterId")]
        public Output<string> ClusterId { get; private set; } = null!;

        /// <summary>
        /// The IDs of the workspaces to authorize for the hybrid cluster
        /// </summary>
        [Output("workspaceIds")]
        public Output<ImmutableArray<string>> WorkspaceIds { get; private set; } = null!;


        /// <summary>
        /// Create a HybridClusterWorkspaceAuthorization resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public HybridClusterWorkspaceAuthorization(string name, HybridClusterWorkspaceAuthorizationArgs args, CustomResourceOptions? options = null)
            : base("astronomer:index/hybridClusterWorkspaceAuthorization:HybridClusterWorkspaceAuthorization", name, args ?? new HybridClusterWorkspaceAuthorizationArgs(), MakeResourceOptions(options, ""))
        {
        }

        private HybridClusterWorkspaceAuthorization(string name, Input<string> id, HybridClusterWorkspaceAuthorizationState? state = null, CustomResourceOptions? options = null)
            : base("astronomer:index/hybridClusterWorkspaceAuthorization:HybridClusterWorkspaceAuthorization", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/ryan-pip/pulumi-astronomer",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing HybridClusterWorkspaceAuthorization resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static HybridClusterWorkspaceAuthorization Get(string name, Input<string> id, HybridClusterWorkspaceAuthorizationState? state = null, CustomResourceOptions? options = null)
        {
            return new HybridClusterWorkspaceAuthorization(name, id, state, options);
        }
    }

    public sealed class HybridClusterWorkspaceAuthorizationArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The ID of the hybrid cluster to set authorizations for
        /// </summary>
        [Input("clusterId", required: true)]
        public Input<string> ClusterId { get; set; } = null!;

        [Input("workspaceIds")]
        private InputList<string>? _workspaceIds;

        /// <summary>
        /// The IDs of the workspaces to authorize for the hybrid cluster
        /// </summary>
        public InputList<string> WorkspaceIds
        {
            get => _workspaceIds ?? (_workspaceIds = new InputList<string>());
            set => _workspaceIds = value;
        }

        public HybridClusterWorkspaceAuthorizationArgs()
        {
        }
        public static new HybridClusterWorkspaceAuthorizationArgs Empty => new HybridClusterWorkspaceAuthorizationArgs();
    }

    public sealed class HybridClusterWorkspaceAuthorizationState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The ID of the hybrid cluster to set authorizations for
        /// </summary>
        [Input("clusterId")]
        public Input<string>? ClusterId { get; set; }

        [Input("workspaceIds")]
        private InputList<string>? _workspaceIds;

        /// <summary>
        /// The IDs of the workspaces to authorize for the hybrid cluster
        /// </summary>
        public InputList<string> WorkspaceIds
        {
            get => _workspaceIds ?? (_workspaceIds = new InputList<string>());
            set => _workspaceIds = value;
        }

        public HybridClusterWorkspaceAuthorizationState()
        {
        }
        public static new HybridClusterWorkspaceAuthorizationState Empty => new HybridClusterWorkspaceAuthorizationState();
    }
}
