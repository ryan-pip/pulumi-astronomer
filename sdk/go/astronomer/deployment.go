// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package astronomer

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/ryan-pip/pulumi-astronomer/sdk/go/astronomer/internal"
)

// Deployment resource
type Deployment struct {
	pulumi.CustomResourceState

	// Deployment Airflow version
	AirflowVersion pulumi.StringOutput `pulumi:"airflowVersion"`
	// Deployment's current Astro Runtime version
	AstroRuntimeVersion pulumi.StringOutput `pulumi:"astroRuntimeVersion"`
	// Deployment cloud provider - required for 'STANDARD' deployments. If changing this value, the deployment will be recreated in the new cloud provider
	CloudProvider pulumi.StringOutput `pulumi:"cloudProvider"`
	// Deployment cluster identifier - required for 'HYBRID' and 'DEDICATED' deployments. If changing this value, the deployment will be recreated in the new cluster
	ClusterId pulumi.StringOutput `pulumi:"clusterId"`
	// Deployment contact emails
	ContactEmails pulumi.StringArrayOutput `pulumi:"contactEmails"`
	// Deployment creation timestamp
	CreatedAt pulumi.StringOutput `pulumi:"createdAt"`
	// Deployment creator
	CreatedBy DeploymentCreatedByOutput `pulumi:"createdBy"`
	// Deployment DAG tarball version
	DagTarballVersion pulumi.StringOutput `pulumi:"dagTarballVersion"`
	// Deployment default task pod CPU - required for 'STANDARD' and 'DEDICATED' deployments
	DefaultTaskPodCpu pulumi.StringPtrOutput `pulumi:"defaultTaskPodCpu"`
	// Deployment default task pod memory - required for 'STANDARD' and 'DEDICATED' deployments
	DefaultTaskPodMemory pulumi.StringPtrOutput `pulumi:"defaultTaskPodMemory"`
	// Deployment description
	Description pulumi.StringOutput `pulumi:"description"`
	// Deployment desired DAG tarball version
	DesiredDagTarballVersion pulumi.StringOutput `pulumi:"desiredDagTarballVersion"`
	// Deployment environment variables
	EnvironmentVariables DeploymentEnvironmentVariableArrayOutput `pulumi:"environmentVariables"`
	// Deployment executor
	Executor pulumi.StringOutput `pulumi:"executor"`
	// Deployment external IPs
	ExternalIps pulumi.StringArrayOutput `pulumi:"externalIps"`
	// Deployment image repository
	ImageRepository pulumi.StringOutput `pulumi:"imageRepository"`
	// Deployment image tag
	ImageTag pulumi.StringOutput `pulumi:"imageTag"`
	// Deployment image version
	ImageVersion pulumi.StringOutput `pulumi:"imageVersion"`
	// Deployment CI/CD enforced
	IsCicdEnforced pulumi.BoolOutput `pulumi:"isCicdEnforced"`
	// Whether DAG deploy is enabled - Changing this value may disrupt your deployment. Read more at https://docs.astronomer.io/astro/deploy-dags#enable-or-disable-dag-only-deploys-on-a-deployment
	IsDagDeployEnabled pulumi.BoolOutput `pulumi:"isDagDeployEnabled"`
	// Deployment development mode - required for 'STANDARD' and 'DEDICATED' deployments. If changing from 'False' to 'True', the deployment will be recreated
	IsDevelopmentMode pulumi.BoolPtrOutput `pulumi:"isDevelopmentMode"`
	// Deployment high availability - required for 'STANDARD' and 'DEDICATED' deployments
	IsHighAvailability pulumi.BoolPtrOutput `pulumi:"isHighAvailability"`
	// Deployment name
	Name pulumi.StringOutput `pulumi:"name"`
	// Deployment namespace
	Namespace pulumi.StringOutput `pulumi:"namespace"`
	// Deployment OIDC issuer URL
	OidcIssuerUrl               pulumi.StringOutput    `pulumi:"oidcIssuerUrl"`
	OriginalAstroRuntimeVersion pulumi.StringPtrOutput `pulumi:"originalAstroRuntimeVersion"`
	// Deployment region - required for 'STANDARD' deployments. If changing this value, the deployment will be recreated in the new region
	Region pulumi.StringOutput `pulumi:"region"`
	// Deployment resource quota CPU - required for 'STANDARD' and 'DEDICATED' deployments
	ResourceQuotaCpu pulumi.StringPtrOutput `pulumi:"resourceQuotaCpu"`
	// Deployment resource quota memory - required for 'STANDARD' and 'DEDICATED' deployments
	ResourceQuotaMemory pulumi.StringPtrOutput `pulumi:"resourceQuotaMemory"`
	// Deployment scaling spec - only for 'STANDARD' and 'DEDICATED' deployments
	ScalingSpec DeploymentScalingSpecPtrOutput `pulumi:"scalingSpec"`
	// Deployment scaling status
	ScalingStatus DeploymentScalingStatusOutput `pulumi:"scalingStatus"`
	// Deployment scheduler AU - required for 'HYBRID' deployments
	SchedulerAu pulumi.IntPtrOutput `pulumi:"schedulerAu"`
	// Deployment scheduler CPU
	SchedulerCpu pulumi.StringOutput `pulumi:"schedulerCpu"`
	// Deployment scheduler memory
	SchedulerMemory pulumi.StringOutput `pulumi:"schedulerMemory"`
	// Deployment scheduler replicas - required for 'HYBRID' deployments
	SchedulerReplicas pulumi.IntOutput `pulumi:"schedulerReplicas"`
	// Deployment scheduler size - required for 'STANDARD' and 'DEDICATED' deployments
	SchedulerSize pulumi.StringPtrOutput `pulumi:"schedulerSize"`
	// Deployment status
	Status pulumi.StringOutput `pulumi:"status"`
	// Deployment status reason
	StatusReason pulumi.StringOutput `pulumi:"statusReason"`
	// Deployment task pod node pool identifier - required if executor is 'KUBERNETES' and type is 'HYBRID'
	TaskPodNodePoolId pulumi.StringPtrOutput `pulumi:"taskPodNodePoolId"`
	// Deployment type - if changing this value, the deployment will be recreated with the new type
	Type pulumi.StringOutput `pulumi:"type"`
	// Deployment last updated timestamp
	UpdatedAt pulumi.StringOutput `pulumi:"updatedAt"`
	// Deployment updater
	UpdatedBy DeploymentUpdatedByOutput `pulumi:"updatedBy"`
	// Deployment webserver Airflow API URL
	WebserverAirflowApiUrl pulumi.StringOutput `pulumi:"webserverAirflowApiUrl"`
	// Deployment webserver ingress hostname
	WebserverIngressHostname pulumi.StringOutput `pulumi:"webserverIngressHostname"`
	// Deployment webserver URL
	WebserverUrl pulumi.StringOutput `pulumi:"webserverUrl"`
	// Deployment worker queues - required for deployments with 'CELERY' executor. For 'STANDARD' and 'DEDICATED' deployments, use astro*machine. For 'HYBRID' deployments, use node*pool*id.
	WorkerQueues DeploymentWorkerQueueArrayOutput `pulumi:"workerQueues"`
	// Deployment workload identity. This value can be changed via the Astro API if applicable.
	WorkloadIdentity pulumi.StringOutput `pulumi:"workloadIdentity"`
	// Deployment workspace identifier - if changing this value, the deployment will be recreated in the new workspace
	WorkspaceId pulumi.StringOutput `pulumi:"workspaceId"`
}

// NewDeployment registers a new resource with the given unique name, arguments, and options.
func NewDeployment(ctx *pulumi.Context,
	name string, args *DeploymentArgs, opts ...pulumi.ResourceOption) (*Deployment, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ContactEmails == nil {
		return nil, errors.New("invalid value for required argument 'ContactEmails'")
	}
	if args.Description == nil {
		return nil, errors.New("invalid value for required argument 'Description'")
	}
	if args.EnvironmentVariables == nil {
		return nil, errors.New("invalid value for required argument 'EnvironmentVariables'")
	}
	if args.Executor == nil {
		return nil, errors.New("invalid value for required argument 'Executor'")
	}
	if args.IsCicdEnforced == nil {
		return nil, errors.New("invalid value for required argument 'IsCicdEnforced'")
	}
	if args.IsDagDeployEnabled == nil {
		return nil, errors.New("invalid value for required argument 'IsDagDeployEnabled'")
	}
	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	if args.WorkspaceId == nil {
		return nil, errors.New("invalid value for required argument 'WorkspaceId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Deployment
	err := ctx.RegisterResource("astronomer:index/deployment:Deployment", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDeployment gets an existing Deployment resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDeployment(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DeploymentState, opts ...pulumi.ResourceOption) (*Deployment, error) {
	var resource Deployment
	err := ctx.ReadResource("astronomer:index/deployment:Deployment", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Deployment resources.
type deploymentState struct {
	// Deployment Airflow version
	AirflowVersion *string `pulumi:"airflowVersion"`
	// Deployment's current Astro Runtime version
	AstroRuntimeVersion *string `pulumi:"astroRuntimeVersion"`
	// Deployment cloud provider - required for 'STANDARD' deployments. If changing this value, the deployment will be recreated in the new cloud provider
	CloudProvider *string `pulumi:"cloudProvider"`
	// Deployment cluster identifier - required for 'HYBRID' and 'DEDICATED' deployments. If changing this value, the deployment will be recreated in the new cluster
	ClusterId *string `pulumi:"clusterId"`
	// Deployment contact emails
	ContactEmails []string `pulumi:"contactEmails"`
	// Deployment creation timestamp
	CreatedAt *string `pulumi:"createdAt"`
	// Deployment creator
	CreatedBy *DeploymentCreatedBy `pulumi:"createdBy"`
	// Deployment DAG tarball version
	DagTarballVersion *string `pulumi:"dagTarballVersion"`
	// Deployment default task pod CPU - required for 'STANDARD' and 'DEDICATED' deployments
	DefaultTaskPodCpu *string `pulumi:"defaultTaskPodCpu"`
	// Deployment default task pod memory - required for 'STANDARD' and 'DEDICATED' deployments
	DefaultTaskPodMemory *string `pulumi:"defaultTaskPodMemory"`
	// Deployment description
	Description *string `pulumi:"description"`
	// Deployment desired DAG tarball version
	DesiredDagTarballVersion *string `pulumi:"desiredDagTarballVersion"`
	// Deployment environment variables
	EnvironmentVariables []DeploymentEnvironmentVariable `pulumi:"environmentVariables"`
	// Deployment executor
	Executor *string `pulumi:"executor"`
	// Deployment external IPs
	ExternalIps []string `pulumi:"externalIps"`
	// Deployment image repository
	ImageRepository *string `pulumi:"imageRepository"`
	// Deployment image tag
	ImageTag *string `pulumi:"imageTag"`
	// Deployment image version
	ImageVersion *string `pulumi:"imageVersion"`
	// Deployment CI/CD enforced
	IsCicdEnforced *bool `pulumi:"isCicdEnforced"`
	// Whether DAG deploy is enabled - Changing this value may disrupt your deployment. Read more at https://docs.astronomer.io/astro/deploy-dags#enable-or-disable-dag-only-deploys-on-a-deployment
	IsDagDeployEnabled *bool `pulumi:"isDagDeployEnabled"`
	// Deployment development mode - required for 'STANDARD' and 'DEDICATED' deployments. If changing from 'False' to 'True', the deployment will be recreated
	IsDevelopmentMode *bool `pulumi:"isDevelopmentMode"`
	// Deployment high availability - required for 'STANDARD' and 'DEDICATED' deployments
	IsHighAvailability *bool `pulumi:"isHighAvailability"`
	// Deployment name
	Name *string `pulumi:"name"`
	// Deployment namespace
	Namespace *string `pulumi:"namespace"`
	// Deployment OIDC issuer URL
	OidcIssuerUrl               *string `pulumi:"oidcIssuerUrl"`
	OriginalAstroRuntimeVersion *string `pulumi:"originalAstroRuntimeVersion"`
	// Deployment region - required for 'STANDARD' deployments. If changing this value, the deployment will be recreated in the new region
	Region *string `pulumi:"region"`
	// Deployment resource quota CPU - required for 'STANDARD' and 'DEDICATED' deployments
	ResourceQuotaCpu *string `pulumi:"resourceQuotaCpu"`
	// Deployment resource quota memory - required for 'STANDARD' and 'DEDICATED' deployments
	ResourceQuotaMemory *string `pulumi:"resourceQuotaMemory"`
	// Deployment scaling spec - only for 'STANDARD' and 'DEDICATED' deployments
	ScalingSpec *DeploymentScalingSpec `pulumi:"scalingSpec"`
	// Deployment scaling status
	ScalingStatus *DeploymentScalingStatus `pulumi:"scalingStatus"`
	// Deployment scheduler AU - required for 'HYBRID' deployments
	SchedulerAu *int `pulumi:"schedulerAu"`
	// Deployment scheduler CPU
	SchedulerCpu *string `pulumi:"schedulerCpu"`
	// Deployment scheduler memory
	SchedulerMemory *string `pulumi:"schedulerMemory"`
	// Deployment scheduler replicas - required for 'HYBRID' deployments
	SchedulerReplicas *int `pulumi:"schedulerReplicas"`
	// Deployment scheduler size - required for 'STANDARD' and 'DEDICATED' deployments
	SchedulerSize *string `pulumi:"schedulerSize"`
	// Deployment status
	Status *string `pulumi:"status"`
	// Deployment status reason
	StatusReason *string `pulumi:"statusReason"`
	// Deployment task pod node pool identifier - required if executor is 'KUBERNETES' and type is 'HYBRID'
	TaskPodNodePoolId *string `pulumi:"taskPodNodePoolId"`
	// Deployment type - if changing this value, the deployment will be recreated with the new type
	Type *string `pulumi:"type"`
	// Deployment last updated timestamp
	UpdatedAt *string `pulumi:"updatedAt"`
	// Deployment updater
	UpdatedBy *DeploymentUpdatedBy `pulumi:"updatedBy"`
	// Deployment webserver Airflow API URL
	WebserverAirflowApiUrl *string `pulumi:"webserverAirflowApiUrl"`
	// Deployment webserver ingress hostname
	WebserverIngressHostname *string `pulumi:"webserverIngressHostname"`
	// Deployment webserver URL
	WebserverUrl *string `pulumi:"webserverUrl"`
	// Deployment worker queues - required for deployments with 'CELERY' executor. For 'STANDARD' and 'DEDICATED' deployments, use astro*machine. For 'HYBRID' deployments, use node*pool*id.
	WorkerQueues []DeploymentWorkerQueue `pulumi:"workerQueues"`
	// Deployment workload identity. This value can be changed via the Astro API if applicable.
	WorkloadIdentity *string `pulumi:"workloadIdentity"`
	// Deployment workspace identifier - if changing this value, the deployment will be recreated in the new workspace
	WorkspaceId *string `pulumi:"workspaceId"`
}

type DeploymentState struct {
	// Deployment Airflow version
	AirflowVersion pulumi.StringPtrInput
	// Deployment's current Astro Runtime version
	AstroRuntimeVersion pulumi.StringPtrInput
	// Deployment cloud provider - required for 'STANDARD' deployments. If changing this value, the deployment will be recreated in the new cloud provider
	CloudProvider pulumi.StringPtrInput
	// Deployment cluster identifier - required for 'HYBRID' and 'DEDICATED' deployments. If changing this value, the deployment will be recreated in the new cluster
	ClusterId pulumi.StringPtrInput
	// Deployment contact emails
	ContactEmails pulumi.StringArrayInput
	// Deployment creation timestamp
	CreatedAt pulumi.StringPtrInput
	// Deployment creator
	CreatedBy DeploymentCreatedByPtrInput
	// Deployment DAG tarball version
	DagTarballVersion pulumi.StringPtrInput
	// Deployment default task pod CPU - required for 'STANDARD' and 'DEDICATED' deployments
	DefaultTaskPodCpu pulumi.StringPtrInput
	// Deployment default task pod memory - required for 'STANDARD' and 'DEDICATED' deployments
	DefaultTaskPodMemory pulumi.StringPtrInput
	// Deployment description
	Description pulumi.StringPtrInput
	// Deployment desired DAG tarball version
	DesiredDagTarballVersion pulumi.StringPtrInput
	// Deployment environment variables
	EnvironmentVariables DeploymentEnvironmentVariableArrayInput
	// Deployment executor
	Executor pulumi.StringPtrInput
	// Deployment external IPs
	ExternalIps pulumi.StringArrayInput
	// Deployment image repository
	ImageRepository pulumi.StringPtrInput
	// Deployment image tag
	ImageTag pulumi.StringPtrInput
	// Deployment image version
	ImageVersion pulumi.StringPtrInput
	// Deployment CI/CD enforced
	IsCicdEnforced pulumi.BoolPtrInput
	// Whether DAG deploy is enabled - Changing this value may disrupt your deployment. Read more at https://docs.astronomer.io/astro/deploy-dags#enable-or-disable-dag-only-deploys-on-a-deployment
	IsDagDeployEnabled pulumi.BoolPtrInput
	// Deployment development mode - required for 'STANDARD' and 'DEDICATED' deployments. If changing from 'False' to 'True', the deployment will be recreated
	IsDevelopmentMode pulumi.BoolPtrInput
	// Deployment high availability - required for 'STANDARD' and 'DEDICATED' deployments
	IsHighAvailability pulumi.BoolPtrInput
	// Deployment name
	Name pulumi.StringPtrInput
	// Deployment namespace
	Namespace pulumi.StringPtrInput
	// Deployment OIDC issuer URL
	OidcIssuerUrl               pulumi.StringPtrInput
	OriginalAstroRuntimeVersion pulumi.StringPtrInput
	// Deployment region - required for 'STANDARD' deployments. If changing this value, the deployment will be recreated in the new region
	Region pulumi.StringPtrInput
	// Deployment resource quota CPU - required for 'STANDARD' and 'DEDICATED' deployments
	ResourceQuotaCpu pulumi.StringPtrInput
	// Deployment resource quota memory - required for 'STANDARD' and 'DEDICATED' deployments
	ResourceQuotaMemory pulumi.StringPtrInput
	// Deployment scaling spec - only for 'STANDARD' and 'DEDICATED' deployments
	ScalingSpec DeploymentScalingSpecPtrInput
	// Deployment scaling status
	ScalingStatus DeploymentScalingStatusPtrInput
	// Deployment scheduler AU - required for 'HYBRID' deployments
	SchedulerAu pulumi.IntPtrInput
	// Deployment scheduler CPU
	SchedulerCpu pulumi.StringPtrInput
	// Deployment scheduler memory
	SchedulerMemory pulumi.StringPtrInput
	// Deployment scheduler replicas - required for 'HYBRID' deployments
	SchedulerReplicas pulumi.IntPtrInput
	// Deployment scheduler size - required for 'STANDARD' and 'DEDICATED' deployments
	SchedulerSize pulumi.StringPtrInput
	// Deployment status
	Status pulumi.StringPtrInput
	// Deployment status reason
	StatusReason pulumi.StringPtrInput
	// Deployment task pod node pool identifier - required if executor is 'KUBERNETES' and type is 'HYBRID'
	TaskPodNodePoolId pulumi.StringPtrInput
	// Deployment type - if changing this value, the deployment will be recreated with the new type
	Type pulumi.StringPtrInput
	// Deployment last updated timestamp
	UpdatedAt pulumi.StringPtrInput
	// Deployment updater
	UpdatedBy DeploymentUpdatedByPtrInput
	// Deployment webserver Airflow API URL
	WebserverAirflowApiUrl pulumi.StringPtrInput
	// Deployment webserver ingress hostname
	WebserverIngressHostname pulumi.StringPtrInput
	// Deployment webserver URL
	WebserverUrl pulumi.StringPtrInput
	// Deployment worker queues - required for deployments with 'CELERY' executor. For 'STANDARD' and 'DEDICATED' deployments, use astro*machine. For 'HYBRID' deployments, use node*pool*id.
	WorkerQueues DeploymentWorkerQueueArrayInput
	// Deployment workload identity. This value can be changed via the Astro API if applicable.
	WorkloadIdentity pulumi.StringPtrInput
	// Deployment workspace identifier - if changing this value, the deployment will be recreated in the new workspace
	WorkspaceId pulumi.StringPtrInput
}

func (DeploymentState) ElementType() reflect.Type {
	return reflect.TypeOf((*deploymentState)(nil)).Elem()
}

type deploymentArgs struct {
	// Deployment cloud provider - required for 'STANDARD' deployments. If changing this value, the deployment will be recreated in the new cloud provider
	CloudProvider *string `pulumi:"cloudProvider"`
	// Deployment cluster identifier - required for 'HYBRID' and 'DEDICATED' deployments. If changing this value, the deployment will be recreated in the new cluster
	ClusterId *string `pulumi:"clusterId"`
	// Deployment contact emails
	ContactEmails []string `pulumi:"contactEmails"`
	// Deployment default task pod CPU - required for 'STANDARD' and 'DEDICATED' deployments
	DefaultTaskPodCpu *string `pulumi:"defaultTaskPodCpu"`
	// Deployment default task pod memory - required for 'STANDARD' and 'DEDICATED' deployments
	DefaultTaskPodMemory *string `pulumi:"defaultTaskPodMemory"`
	// Deployment description
	Description string `pulumi:"description"`
	// Deployment environment variables
	EnvironmentVariables []DeploymentEnvironmentVariable `pulumi:"environmentVariables"`
	// Deployment executor
	Executor string `pulumi:"executor"`
	// Deployment CI/CD enforced
	IsCicdEnforced bool `pulumi:"isCicdEnforced"`
	// Whether DAG deploy is enabled - Changing this value may disrupt your deployment. Read more at https://docs.astronomer.io/astro/deploy-dags#enable-or-disable-dag-only-deploys-on-a-deployment
	IsDagDeployEnabled bool `pulumi:"isDagDeployEnabled"`
	// Deployment development mode - required for 'STANDARD' and 'DEDICATED' deployments. If changing from 'False' to 'True', the deployment will be recreated
	IsDevelopmentMode *bool `pulumi:"isDevelopmentMode"`
	// Deployment high availability - required for 'STANDARD' and 'DEDICATED' deployments
	IsHighAvailability *bool `pulumi:"isHighAvailability"`
	// Deployment name
	Name                        *string `pulumi:"name"`
	OriginalAstroRuntimeVersion *string `pulumi:"originalAstroRuntimeVersion"`
	// Deployment region - required for 'STANDARD' deployments. If changing this value, the deployment will be recreated in the new region
	Region *string `pulumi:"region"`
	// Deployment resource quota CPU - required for 'STANDARD' and 'DEDICATED' deployments
	ResourceQuotaCpu *string `pulumi:"resourceQuotaCpu"`
	// Deployment resource quota memory - required for 'STANDARD' and 'DEDICATED' deployments
	ResourceQuotaMemory *string `pulumi:"resourceQuotaMemory"`
	// Deployment scaling spec - only for 'STANDARD' and 'DEDICATED' deployments
	ScalingSpec *DeploymentScalingSpec `pulumi:"scalingSpec"`
	// Deployment scheduler AU - required for 'HYBRID' deployments
	SchedulerAu *int `pulumi:"schedulerAu"`
	// Deployment scheduler replicas - required for 'HYBRID' deployments
	SchedulerReplicas *int `pulumi:"schedulerReplicas"`
	// Deployment scheduler size - required for 'STANDARD' and 'DEDICATED' deployments
	SchedulerSize *string `pulumi:"schedulerSize"`
	// Deployment task pod node pool identifier - required if executor is 'KUBERNETES' and type is 'HYBRID'
	TaskPodNodePoolId *string `pulumi:"taskPodNodePoolId"`
	// Deployment type - if changing this value, the deployment will be recreated with the new type
	Type string `pulumi:"type"`
	// Deployment worker queues - required for deployments with 'CELERY' executor. For 'STANDARD' and 'DEDICATED' deployments, use astro*machine. For 'HYBRID' deployments, use node*pool*id.
	WorkerQueues []DeploymentWorkerQueue `pulumi:"workerQueues"`
	// Deployment workspace identifier - if changing this value, the deployment will be recreated in the new workspace
	WorkspaceId string `pulumi:"workspaceId"`
}

// The set of arguments for constructing a Deployment resource.
type DeploymentArgs struct {
	// Deployment cloud provider - required for 'STANDARD' deployments. If changing this value, the deployment will be recreated in the new cloud provider
	CloudProvider pulumi.StringPtrInput
	// Deployment cluster identifier - required for 'HYBRID' and 'DEDICATED' deployments. If changing this value, the deployment will be recreated in the new cluster
	ClusterId pulumi.StringPtrInput
	// Deployment contact emails
	ContactEmails pulumi.StringArrayInput
	// Deployment default task pod CPU - required for 'STANDARD' and 'DEDICATED' deployments
	DefaultTaskPodCpu pulumi.StringPtrInput
	// Deployment default task pod memory - required for 'STANDARD' and 'DEDICATED' deployments
	DefaultTaskPodMemory pulumi.StringPtrInput
	// Deployment description
	Description pulumi.StringInput
	// Deployment environment variables
	EnvironmentVariables DeploymentEnvironmentVariableArrayInput
	// Deployment executor
	Executor pulumi.StringInput
	// Deployment CI/CD enforced
	IsCicdEnforced pulumi.BoolInput
	// Whether DAG deploy is enabled - Changing this value may disrupt your deployment. Read more at https://docs.astronomer.io/astro/deploy-dags#enable-or-disable-dag-only-deploys-on-a-deployment
	IsDagDeployEnabled pulumi.BoolInput
	// Deployment development mode - required for 'STANDARD' and 'DEDICATED' deployments. If changing from 'False' to 'True', the deployment will be recreated
	IsDevelopmentMode pulumi.BoolPtrInput
	// Deployment high availability - required for 'STANDARD' and 'DEDICATED' deployments
	IsHighAvailability pulumi.BoolPtrInput
	// Deployment name
	Name                        pulumi.StringPtrInput
	OriginalAstroRuntimeVersion pulumi.StringPtrInput
	// Deployment region - required for 'STANDARD' deployments. If changing this value, the deployment will be recreated in the new region
	Region pulumi.StringPtrInput
	// Deployment resource quota CPU - required for 'STANDARD' and 'DEDICATED' deployments
	ResourceQuotaCpu pulumi.StringPtrInput
	// Deployment resource quota memory - required for 'STANDARD' and 'DEDICATED' deployments
	ResourceQuotaMemory pulumi.StringPtrInput
	// Deployment scaling spec - only for 'STANDARD' and 'DEDICATED' deployments
	ScalingSpec DeploymentScalingSpecPtrInput
	// Deployment scheduler AU - required for 'HYBRID' deployments
	SchedulerAu pulumi.IntPtrInput
	// Deployment scheduler replicas - required for 'HYBRID' deployments
	SchedulerReplicas pulumi.IntPtrInput
	// Deployment scheduler size - required for 'STANDARD' and 'DEDICATED' deployments
	SchedulerSize pulumi.StringPtrInput
	// Deployment task pod node pool identifier - required if executor is 'KUBERNETES' and type is 'HYBRID'
	TaskPodNodePoolId pulumi.StringPtrInput
	// Deployment type - if changing this value, the deployment will be recreated with the new type
	Type pulumi.StringInput
	// Deployment worker queues - required for deployments with 'CELERY' executor. For 'STANDARD' and 'DEDICATED' deployments, use astro*machine. For 'HYBRID' deployments, use node*pool*id.
	WorkerQueues DeploymentWorkerQueueArrayInput
	// Deployment workspace identifier - if changing this value, the deployment will be recreated in the new workspace
	WorkspaceId pulumi.StringInput
}

func (DeploymentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*deploymentArgs)(nil)).Elem()
}

type DeploymentInput interface {
	pulumi.Input

	ToDeploymentOutput() DeploymentOutput
	ToDeploymentOutputWithContext(ctx context.Context) DeploymentOutput
}

func (*Deployment) ElementType() reflect.Type {
	return reflect.TypeOf((**Deployment)(nil)).Elem()
}

func (i *Deployment) ToDeploymentOutput() DeploymentOutput {
	return i.ToDeploymentOutputWithContext(context.Background())
}

func (i *Deployment) ToDeploymentOutputWithContext(ctx context.Context) DeploymentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeploymentOutput)
}

// DeploymentArrayInput is an input type that accepts DeploymentArray and DeploymentArrayOutput values.
// You can construct a concrete instance of `DeploymentArrayInput` via:
//
//	DeploymentArray{ DeploymentArgs{...} }
type DeploymentArrayInput interface {
	pulumi.Input

	ToDeploymentArrayOutput() DeploymentArrayOutput
	ToDeploymentArrayOutputWithContext(context.Context) DeploymentArrayOutput
}

type DeploymentArray []DeploymentInput

func (DeploymentArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Deployment)(nil)).Elem()
}

func (i DeploymentArray) ToDeploymentArrayOutput() DeploymentArrayOutput {
	return i.ToDeploymentArrayOutputWithContext(context.Background())
}

func (i DeploymentArray) ToDeploymentArrayOutputWithContext(ctx context.Context) DeploymentArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeploymentArrayOutput)
}

// DeploymentMapInput is an input type that accepts DeploymentMap and DeploymentMapOutput values.
// You can construct a concrete instance of `DeploymentMapInput` via:
//
//	DeploymentMap{ "key": DeploymentArgs{...} }
type DeploymentMapInput interface {
	pulumi.Input

	ToDeploymentMapOutput() DeploymentMapOutput
	ToDeploymentMapOutputWithContext(context.Context) DeploymentMapOutput
}

type DeploymentMap map[string]DeploymentInput

func (DeploymentMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Deployment)(nil)).Elem()
}

func (i DeploymentMap) ToDeploymentMapOutput() DeploymentMapOutput {
	return i.ToDeploymentMapOutputWithContext(context.Background())
}

func (i DeploymentMap) ToDeploymentMapOutputWithContext(ctx context.Context) DeploymentMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeploymentMapOutput)
}

type DeploymentOutput struct{ *pulumi.OutputState }

func (DeploymentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Deployment)(nil)).Elem()
}

func (o DeploymentOutput) ToDeploymentOutput() DeploymentOutput {
	return o
}

func (o DeploymentOutput) ToDeploymentOutputWithContext(ctx context.Context) DeploymentOutput {
	return o
}

// Deployment Airflow version
func (o DeploymentOutput) AirflowVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *Deployment) pulumi.StringOutput { return v.AirflowVersion }).(pulumi.StringOutput)
}

// Deployment's current Astro Runtime version
func (o DeploymentOutput) AstroRuntimeVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *Deployment) pulumi.StringOutput { return v.AstroRuntimeVersion }).(pulumi.StringOutput)
}

// Deployment cloud provider - required for 'STANDARD' deployments. If changing this value, the deployment will be recreated in the new cloud provider
func (o DeploymentOutput) CloudProvider() pulumi.StringOutput {
	return o.ApplyT(func(v *Deployment) pulumi.StringOutput { return v.CloudProvider }).(pulumi.StringOutput)
}

// Deployment cluster identifier - required for 'HYBRID' and 'DEDICATED' deployments. If changing this value, the deployment will be recreated in the new cluster
func (o DeploymentOutput) ClusterId() pulumi.StringOutput {
	return o.ApplyT(func(v *Deployment) pulumi.StringOutput { return v.ClusterId }).(pulumi.StringOutput)
}

// Deployment contact emails
func (o DeploymentOutput) ContactEmails() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Deployment) pulumi.StringArrayOutput { return v.ContactEmails }).(pulumi.StringArrayOutput)
}

// Deployment creation timestamp
func (o DeploymentOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *Deployment) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

// Deployment creator
func (o DeploymentOutput) CreatedBy() DeploymentCreatedByOutput {
	return o.ApplyT(func(v *Deployment) DeploymentCreatedByOutput { return v.CreatedBy }).(DeploymentCreatedByOutput)
}

// Deployment DAG tarball version
func (o DeploymentOutput) DagTarballVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *Deployment) pulumi.StringOutput { return v.DagTarballVersion }).(pulumi.StringOutput)
}

// Deployment default task pod CPU - required for 'STANDARD' and 'DEDICATED' deployments
func (o DeploymentOutput) DefaultTaskPodCpu() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Deployment) pulumi.StringPtrOutput { return v.DefaultTaskPodCpu }).(pulumi.StringPtrOutput)
}

// Deployment default task pod memory - required for 'STANDARD' and 'DEDICATED' deployments
func (o DeploymentOutput) DefaultTaskPodMemory() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Deployment) pulumi.StringPtrOutput { return v.DefaultTaskPodMemory }).(pulumi.StringPtrOutput)
}

// Deployment description
func (o DeploymentOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *Deployment) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

// Deployment desired DAG tarball version
func (o DeploymentOutput) DesiredDagTarballVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *Deployment) pulumi.StringOutput { return v.DesiredDagTarballVersion }).(pulumi.StringOutput)
}

// Deployment environment variables
func (o DeploymentOutput) EnvironmentVariables() DeploymentEnvironmentVariableArrayOutput {
	return o.ApplyT(func(v *Deployment) DeploymentEnvironmentVariableArrayOutput { return v.EnvironmentVariables }).(DeploymentEnvironmentVariableArrayOutput)
}

// Deployment executor
func (o DeploymentOutput) Executor() pulumi.StringOutput {
	return o.ApplyT(func(v *Deployment) pulumi.StringOutput { return v.Executor }).(pulumi.StringOutput)
}

// Deployment external IPs
func (o DeploymentOutput) ExternalIps() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Deployment) pulumi.StringArrayOutput { return v.ExternalIps }).(pulumi.StringArrayOutput)
}

// Deployment image repository
func (o DeploymentOutput) ImageRepository() pulumi.StringOutput {
	return o.ApplyT(func(v *Deployment) pulumi.StringOutput { return v.ImageRepository }).(pulumi.StringOutput)
}

// Deployment image tag
func (o DeploymentOutput) ImageTag() pulumi.StringOutput {
	return o.ApplyT(func(v *Deployment) pulumi.StringOutput { return v.ImageTag }).(pulumi.StringOutput)
}

// Deployment image version
func (o DeploymentOutput) ImageVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *Deployment) pulumi.StringOutput { return v.ImageVersion }).(pulumi.StringOutput)
}

// Deployment CI/CD enforced
func (o DeploymentOutput) IsCicdEnforced() pulumi.BoolOutput {
	return o.ApplyT(func(v *Deployment) pulumi.BoolOutput { return v.IsCicdEnforced }).(pulumi.BoolOutput)
}

// Whether DAG deploy is enabled - Changing this value may disrupt your deployment. Read more at https://docs.astronomer.io/astro/deploy-dags#enable-or-disable-dag-only-deploys-on-a-deployment
func (o DeploymentOutput) IsDagDeployEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *Deployment) pulumi.BoolOutput { return v.IsDagDeployEnabled }).(pulumi.BoolOutput)
}

// Deployment development mode - required for 'STANDARD' and 'DEDICATED' deployments. If changing from 'False' to 'True', the deployment will be recreated
func (o DeploymentOutput) IsDevelopmentMode() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Deployment) pulumi.BoolPtrOutput { return v.IsDevelopmentMode }).(pulumi.BoolPtrOutput)
}

// Deployment high availability - required for 'STANDARD' and 'DEDICATED' deployments
func (o DeploymentOutput) IsHighAvailability() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Deployment) pulumi.BoolPtrOutput { return v.IsHighAvailability }).(pulumi.BoolPtrOutput)
}

// Deployment name
func (o DeploymentOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Deployment) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Deployment namespace
func (o DeploymentOutput) Namespace() pulumi.StringOutput {
	return o.ApplyT(func(v *Deployment) pulumi.StringOutput { return v.Namespace }).(pulumi.StringOutput)
}

// Deployment OIDC issuer URL
func (o DeploymentOutput) OidcIssuerUrl() pulumi.StringOutput {
	return o.ApplyT(func(v *Deployment) pulumi.StringOutput { return v.OidcIssuerUrl }).(pulumi.StringOutput)
}

func (o DeploymentOutput) OriginalAstroRuntimeVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Deployment) pulumi.StringPtrOutput { return v.OriginalAstroRuntimeVersion }).(pulumi.StringPtrOutput)
}

// Deployment region - required for 'STANDARD' deployments. If changing this value, the deployment will be recreated in the new region
func (o DeploymentOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *Deployment) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// Deployment resource quota CPU - required for 'STANDARD' and 'DEDICATED' deployments
func (o DeploymentOutput) ResourceQuotaCpu() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Deployment) pulumi.StringPtrOutput { return v.ResourceQuotaCpu }).(pulumi.StringPtrOutput)
}

// Deployment resource quota memory - required for 'STANDARD' and 'DEDICATED' deployments
func (o DeploymentOutput) ResourceQuotaMemory() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Deployment) pulumi.StringPtrOutput { return v.ResourceQuotaMemory }).(pulumi.StringPtrOutput)
}

// Deployment scaling spec - only for 'STANDARD' and 'DEDICATED' deployments
func (o DeploymentOutput) ScalingSpec() DeploymentScalingSpecPtrOutput {
	return o.ApplyT(func(v *Deployment) DeploymentScalingSpecPtrOutput { return v.ScalingSpec }).(DeploymentScalingSpecPtrOutput)
}

// Deployment scaling status
func (o DeploymentOutput) ScalingStatus() DeploymentScalingStatusOutput {
	return o.ApplyT(func(v *Deployment) DeploymentScalingStatusOutput { return v.ScalingStatus }).(DeploymentScalingStatusOutput)
}

// Deployment scheduler AU - required for 'HYBRID' deployments
func (o DeploymentOutput) SchedulerAu() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Deployment) pulumi.IntPtrOutput { return v.SchedulerAu }).(pulumi.IntPtrOutput)
}

// Deployment scheduler CPU
func (o DeploymentOutput) SchedulerCpu() pulumi.StringOutput {
	return o.ApplyT(func(v *Deployment) pulumi.StringOutput { return v.SchedulerCpu }).(pulumi.StringOutput)
}

// Deployment scheduler memory
func (o DeploymentOutput) SchedulerMemory() pulumi.StringOutput {
	return o.ApplyT(func(v *Deployment) pulumi.StringOutput { return v.SchedulerMemory }).(pulumi.StringOutput)
}

// Deployment scheduler replicas - required for 'HYBRID' deployments
func (o DeploymentOutput) SchedulerReplicas() pulumi.IntOutput {
	return o.ApplyT(func(v *Deployment) pulumi.IntOutput { return v.SchedulerReplicas }).(pulumi.IntOutput)
}

// Deployment scheduler size - required for 'STANDARD' and 'DEDICATED' deployments
func (o DeploymentOutput) SchedulerSize() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Deployment) pulumi.StringPtrOutput { return v.SchedulerSize }).(pulumi.StringPtrOutput)
}

// Deployment status
func (o DeploymentOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *Deployment) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// Deployment status reason
func (o DeploymentOutput) StatusReason() pulumi.StringOutput {
	return o.ApplyT(func(v *Deployment) pulumi.StringOutput { return v.StatusReason }).(pulumi.StringOutput)
}

// Deployment task pod node pool identifier - required if executor is 'KUBERNETES' and type is 'HYBRID'
func (o DeploymentOutput) TaskPodNodePoolId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Deployment) pulumi.StringPtrOutput { return v.TaskPodNodePoolId }).(pulumi.StringPtrOutput)
}

// Deployment type - if changing this value, the deployment will be recreated with the new type
func (o DeploymentOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *Deployment) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

// Deployment last updated timestamp
func (o DeploymentOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *Deployment) pulumi.StringOutput { return v.UpdatedAt }).(pulumi.StringOutput)
}

// Deployment updater
func (o DeploymentOutput) UpdatedBy() DeploymentUpdatedByOutput {
	return o.ApplyT(func(v *Deployment) DeploymentUpdatedByOutput { return v.UpdatedBy }).(DeploymentUpdatedByOutput)
}

// Deployment webserver Airflow API URL
func (o DeploymentOutput) WebserverAirflowApiUrl() pulumi.StringOutput {
	return o.ApplyT(func(v *Deployment) pulumi.StringOutput { return v.WebserverAirflowApiUrl }).(pulumi.StringOutput)
}

// Deployment webserver ingress hostname
func (o DeploymentOutput) WebserverIngressHostname() pulumi.StringOutput {
	return o.ApplyT(func(v *Deployment) pulumi.StringOutput { return v.WebserverIngressHostname }).(pulumi.StringOutput)
}

// Deployment webserver URL
func (o DeploymentOutput) WebserverUrl() pulumi.StringOutput {
	return o.ApplyT(func(v *Deployment) pulumi.StringOutput { return v.WebserverUrl }).(pulumi.StringOutput)
}

// Deployment worker queues - required for deployments with 'CELERY' executor. For 'STANDARD' and 'DEDICATED' deployments, use astro*machine. For 'HYBRID' deployments, use node*pool*id.
func (o DeploymentOutput) WorkerQueues() DeploymentWorkerQueueArrayOutput {
	return o.ApplyT(func(v *Deployment) DeploymentWorkerQueueArrayOutput { return v.WorkerQueues }).(DeploymentWorkerQueueArrayOutput)
}

// Deployment workload identity. This value can be changed via the Astro API if applicable.
func (o DeploymentOutput) WorkloadIdentity() pulumi.StringOutput {
	return o.ApplyT(func(v *Deployment) pulumi.StringOutput { return v.WorkloadIdentity }).(pulumi.StringOutput)
}

// Deployment workspace identifier - if changing this value, the deployment will be recreated in the new workspace
func (o DeploymentOutput) WorkspaceId() pulumi.StringOutput {
	return o.ApplyT(func(v *Deployment) pulumi.StringOutput { return v.WorkspaceId }).(pulumi.StringOutput)
}

type DeploymentArrayOutput struct{ *pulumi.OutputState }

func (DeploymentArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Deployment)(nil)).Elem()
}

func (o DeploymentArrayOutput) ToDeploymentArrayOutput() DeploymentArrayOutput {
	return o
}

func (o DeploymentArrayOutput) ToDeploymentArrayOutputWithContext(ctx context.Context) DeploymentArrayOutput {
	return o
}

func (o DeploymentArrayOutput) Index(i pulumi.IntInput) DeploymentOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Deployment {
		return vs[0].([]*Deployment)[vs[1].(int)]
	}).(DeploymentOutput)
}

type DeploymentMapOutput struct{ *pulumi.OutputState }

func (DeploymentMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Deployment)(nil)).Elem()
}

func (o DeploymentMapOutput) ToDeploymentMapOutput() DeploymentMapOutput {
	return o
}

func (o DeploymentMapOutput) ToDeploymentMapOutputWithContext(ctx context.Context) DeploymentMapOutput {
	return o
}

func (o DeploymentMapOutput) MapIndex(k pulumi.StringInput) DeploymentOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Deployment {
		return vs[0].(map[string]*Deployment)[vs[1].(string)]
	}).(DeploymentOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DeploymentInput)(nil)).Elem(), &Deployment{})
	pulumi.RegisterInputType(reflect.TypeOf((*DeploymentArrayInput)(nil)).Elem(), DeploymentArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DeploymentMapInput)(nil)).Elem(), DeploymentMap{})
	pulumi.RegisterOutputType(DeploymentOutput{})
	pulumi.RegisterOutputType(DeploymentArrayOutput{})
	pulumi.RegisterOutputType(DeploymentMapOutput{})
}
