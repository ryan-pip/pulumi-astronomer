// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package astronomer

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/ryan.pip/pulumi-astronomer/sdk/go/astronomer/internal"
)

// Astronomer Deployment Resource
func LookupDeployment(ctx *pulumi.Context, args *LookupDeploymentArgs, opts ...pulumi.InvokeOption) (*LookupDeploymentResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupDeploymentResult
	err := ctx.Invoke("astronomer:index/getDeployment:getDeployment", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getDeployment.
type LookupDeploymentArgs struct {
	// The Deployment's Identifier
	Id string `pulumi:"id"`
}

// A collection of values returned by getDeployment.
type LookupDeploymentResult struct {
	// The Deployment's Astro Runtime version.
	AirflowVersion string `pulumi:"airflowVersion"`
	// The cloud provider for the Deployment's cluster. Optional if `ClusterId` is specified.
	CloudProvider string `pulumi:"cloudProvider"`
	// The ID of the cluster to which the Deployment will be created in. Optional if cloud provider and region is specified.
	ClusterId string `pulumi:"clusterId"`
	// Cluster Name
	ClusterName string `pulumi:"clusterName"`
	// The Deployment's description.
	Description string `pulumi:"description"`
	// The Deployment's Identifier
	Id string `pulumi:"id"`
	// Whether the Deployment requires that all deploys are made through CI/CD.
	IsCicdEnforced bool `pulumi:"isCicdEnforced"`
	// The Deployment's name.
	Name string `pulumi:"name"`
}

func LookupDeploymentOutput(ctx *pulumi.Context, args LookupDeploymentOutputArgs, opts ...pulumi.InvokeOption) LookupDeploymentResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupDeploymentResult, error) {
			args := v.(LookupDeploymentArgs)
			r, err := LookupDeployment(ctx, &args, opts...)
			var s LookupDeploymentResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupDeploymentResultOutput)
}

// A collection of arguments for invoking getDeployment.
type LookupDeploymentOutputArgs struct {
	// The Deployment's Identifier
	Id pulumi.StringInput `pulumi:"id"`
}

func (LookupDeploymentOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupDeploymentArgs)(nil)).Elem()
}

// A collection of values returned by getDeployment.
type LookupDeploymentResultOutput struct{ *pulumi.OutputState }

func (LookupDeploymentResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupDeploymentResult)(nil)).Elem()
}

func (o LookupDeploymentResultOutput) ToLookupDeploymentResultOutput() LookupDeploymentResultOutput {
	return o
}

func (o LookupDeploymentResultOutput) ToLookupDeploymentResultOutputWithContext(ctx context.Context) LookupDeploymentResultOutput {
	return o
}

// The Deployment's Astro Runtime version.
func (o LookupDeploymentResultOutput) AirflowVersion() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDeploymentResult) string { return v.AirflowVersion }).(pulumi.StringOutput)
}

// The cloud provider for the Deployment's cluster. Optional if `ClusterId` is specified.
func (o LookupDeploymentResultOutput) CloudProvider() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDeploymentResult) string { return v.CloudProvider }).(pulumi.StringOutput)
}

// The ID of the cluster to which the Deployment will be created in. Optional if cloud provider and region is specified.
func (o LookupDeploymentResultOutput) ClusterId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDeploymentResult) string { return v.ClusterId }).(pulumi.StringOutput)
}

// Cluster Name
func (o LookupDeploymentResultOutput) ClusterName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDeploymentResult) string { return v.ClusterName }).(pulumi.StringOutput)
}

// The Deployment's description.
func (o LookupDeploymentResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDeploymentResult) string { return v.Description }).(pulumi.StringOutput)
}

// The Deployment's Identifier
func (o LookupDeploymentResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDeploymentResult) string { return v.Id }).(pulumi.StringOutput)
}

// Whether the Deployment requires that all deploys are made through CI/CD.
func (o LookupDeploymentResultOutput) IsCicdEnforced() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupDeploymentResult) bool { return v.IsCicdEnforced }).(pulumi.BoolOutput)
}

// The Deployment's name.
func (o LookupDeploymentResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDeploymentResult) string { return v.Name }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupDeploymentResultOutput{})
}
