// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package astronomer

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/ryan-pip/pulumi-astronomer/sdk/go/astronomer/internal"
)

// Team data source
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/ryan-pip/pulumi-astronomer/sdk/go/astronomer"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			exampleTeam, err := astronomer.LookupTeam(ctx, &astronomer.LookupTeamArgs{
//				Id: "clwbclrc100bl01ozjj5s4jmq",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			ctx.Export("team", exampleTeam)
//			return nil
//		})
//	}
//
// ```
func LookupTeam(ctx *pulumi.Context, args *LookupTeamArgs, opts ...pulumi.InvokeOption) (*LookupTeamResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupTeamResult
	err := ctx.Invoke("astronomer:index/getTeam:getTeam", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getTeam.
type LookupTeamArgs struct {
	// Team ID
	Id string `pulumi:"id"`
}

// A collection of values returned by getTeam.
type LookupTeamResult struct {
	// Team creation timestamp
	CreatedAt string `pulumi:"createdAt"`
	// Team creator
	CreatedBy GetTeamCreatedBy `pulumi:"createdBy"`
	// The roles assigned to the Deployments
	DeploymentRoles []GetTeamDeploymentRole `pulumi:"deploymentRoles"`
	// Team description
	Description string `pulumi:"description"`
	// Team ID
	Id string `pulumi:"id"`
	// Whether the Team is managed by an identity provider
	IsIdpManaged bool `pulumi:"isIdpManaged"`
	// Team name
	Name string `pulumi:"name"`
	// The role assigned to the Organization
	OrganizationRole string `pulumi:"organizationRole"`
	// Number of roles assigned to the Team
	RolesCount int `pulumi:"rolesCount"`
	// Team last updated timestamp
	UpdatedAt string `pulumi:"updatedAt"`
	// Team updater
	UpdatedBy GetTeamUpdatedBy `pulumi:"updatedBy"`
	// The roles assigned to the Workspaces
	WorkspaceRoles []GetTeamWorkspaceRole `pulumi:"workspaceRoles"`
}

func LookupTeamOutput(ctx *pulumi.Context, args LookupTeamOutputArgs, opts ...pulumi.InvokeOption) LookupTeamResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupTeamResultOutput, error) {
			args := v.(LookupTeamArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("astronomer:index/getTeam:getTeam", args, LookupTeamResultOutput{}, options).(LookupTeamResultOutput), nil
		}).(LookupTeamResultOutput)
}

// A collection of arguments for invoking getTeam.
type LookupTeamOutputArgs struct {
	// Team ID
	Id pulumi.StringInput `pulumi:"id"`
}

func (LookupTeamOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupTeamArgs)(nil)).Elem()
}

// A collection of values returned by getTeam.
type LookupTeamResultOutput struct{ *pulumi.OutputState }

func (LookupTeamResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupTeamResult)(nil)).Elem()
}

func (o LookupTeamResultOutput) ToLookupTeamResultOutput() LookupTeamResultOutput {
	return o
}

func (o LookupTeamResultOutput) ToLookupTeamResultOutputWithContext(ctx context.Context) LookupTeamResultOutput {
	return o
}

// Team creation timestamp
func (o LookupTeamResultOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTeamResult) string { return v.CreatedAt }).(pulumi.StringOutput)
}

// Team creator
func (o LookupTeamResultOutput) CreatedBy() GetTeamCreatedByOutput {
	return o.ApplyT(func(v LookupTeamResult) GetTeamCreatedBy { return v.CreatedBy }).(GetTeamCreatedByOutput)
}

// The roles assigned to the Deployments
func (o LookupTeamResultOutput) DeploymentRoles() GetTeamDeploymentRoleArrayOutput {
	return o.ApplyT(func(v LookupTeamResult) []GetTeamDeploymentRole { return v.DeploymentRoles }).(GetTeamDeploymentRoleArrayOutput)
}

// Team description
func (o LookupTeamResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTeamResult) string { return v.Description }).(pulumi.StringOutput)
}

// Team ID
func (o LookupTeamResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTeamResult) string { return v.Id }).(pulumi.StringOutput)
}

// Whether the Team is managed by an identity provider
func (o LookupTeamResultOutput) IsIdpManaged() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupTeamResult) bool { return v.IsIdpManaged }).(pulumi.BoolOutput)
}

// Team name
func (o LookupTeamResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTeamResult) string { return v.Name }).(pulumi.StringOutput)
}

// The role assigned to the Organization
func (o LookupTeamResultOutput) OrganizationRole() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTeamResult) string { return v.OrganizationRole }).(pulumi.StringOutput)
}

// Number of roles assigned to the Team
func (o LookupTeamResultOutput) RolesCount() pulumi.IntOutput {
	return o.ApplyT(func(v LookupTeamResult) int { return v.RolesCount }).(pulumi.IntOutput)
}

// Team last updated timestamp
func (o LookupTeamResultOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTeamResult) string { return v.UpdatedAt }).(pulumi.StringOutput)
}

// Team updater
func (o LookupTeamResultOutput) UpdatedBy() GetTeamUpdatedByOutput {
	return o.ApplyT(func(v LookupTeamResult) GetTeamUpdatedBy { return v.UpdatedBy }).(GetTeamUpdatedByOutput)
}

// The roles assigned to the Workspaces
func (o LookupTeamResultOutput) WorkspaceRoles() GetTeamWorkspaceRoleArrayOutput {
	return o.ApplyT(func(v LookupTeamResult) []GetTeamWorkspaceRole { return v.WorkspaceRoles }).(GetTeamWorkspaceRoleArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupTeamResultOutput{})
}
