// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package astronomer

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/ryan-pip/pulumi-astronomer/sdk/go/astronomer/internal"
)

// User data source
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/ryan-pip/pulumi-astronomer/sdk/go/astronomer"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			exampleUser, err := astronomer.GetUser(ctx, &astronomer.GetUserArgs{
//				Id: "clhpichn8002m01mqa4ocs7g6",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			ctx.Export("user", exampleUser)
//			return nil
//		})
//	}
//
// ```
func GetUser(ctx *pulumi.Context, args *GetUserArgs, opts ...pulumi.InvokeOption) (*GetUserResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetUserResult
	err := ctx.Invoke("astronomer:index/getUser:getUser", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getUser.
type GetUserArgs struct {
	// User identifier
	Id string `pulumi:"id"`
}

// A collection of values returned by getUser.
type GetUserResult struct {
	// User avatar URL
	AvatarUrl string `pulumi:"avatarUrl"`
	// User creation timestamp
	CreatedAt string `pulumi:"createdAt"`
	// The roles assigned to the deployments
	DeploymentRoles []GetUserDeploymentRole `pulumi:"deploymentRoles"`
	// User full name
	FullName string `pulumi:"fullName"`
	// User identifier
	Id string `pulumi:"id"`
	// The role assigned to the organization
	OrganizationRole string `pulumi:"organizationRole"`
	// User status
	Status string `pulumi:"status"`
	// User last updated timestamp
	UpdatedAt string `pulumi:"updatedAt"`
	// User username
	Username string `pulumi:"username"`
	// The roles assigned to the workspaces
	WorkspaceRoles []GetUserWorkspaceRole `pulumi:"workspaceRoles"`
}

func GetUserOutput(ctx *pulumi.Context, args GetUserOutputArgs, opts ...pulumi.InvokeOption) GetUserResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetUserResultOutput, error) {
			args := v.(GetUserArgs)
			opts = internal.PkgInvokeDefaultOpts(opts)
			var rv GetUserResult
			secret, err := ctx.InvokePackageRaw("astronomer:index/getUser:getUser", args, &rv, "", opts...)
			if err != nil {
				return GetUserResultOutput{}, err
			}

			output := pulumi.ToOutput(rv).(GetUserResultOutput)
			if secret {
				return pulumi.ToSecret(output).(GetUserResultOutput), nil
			}
			return output, nil
		}).(GetUserResultOutput)
}

// A collection of arguments for invoking getUser.
type GetUserOutputArgs struct {
	// User identifier
	Id pulumi.StringInput `pulumi:"id"`
}

func (GetUserOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetUserArgs)(nil)).Elem()
}

// A collection of values returned by getUser.
type GetUserResultOutput struct{ *pulumi.OutputState }

func (GetUserResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetUserResult)(nil)).Elem()
}

func (o GetUserResultOutput) ToGetUserResultOutput() GetUserResultOutput {
	return o
}

func (o GetUserResultOutput) ToGetUserResultOutputWithContext(ctx context.Context) GetUserResultOutput {
	return o
}

// User avatar URL
func (o GetUserResultOutput) AvatarUrl() pulumi.StringOutput {
	return o.ApplyT(func(v GetUserResult) string { return v.AvatarUrl }).(pulumi.StringOutput)
}

// User creation timestamp
func (o GetUserResultOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v GetUserResult) string { return v.CreatedAt }).(pulumi.StringOutput)
}

// The roles assigned to the deployments
func (o GetUserResultOutput) DeploymentRoles() GetUserDeploymentRoleArrayOutput {
	return o.ApplyT(func(v GetUserResult) []GetUserDeploymentRole { return v.DeploymentRoles }).(GetUserDeploymentRoleArrayOutput)
}

// User full name
func (o GetUserResultOutput) FullName() pulumi.StringOutput {
	return o.ApplyT(func(v GetUserResult) string { return v.FullName }).(pulumi.StringOutput)
}

// User identifier
func (o GetUserResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetUserResult) string { return v.Id }).(pulumi.StringOutput)
}

// The role assigned to the organization
func (o GetUserResultOutput) OrganizationRole() pulumi.StringOutput {
	return o.ApplyT(func(v GetUserResult) string { return v.OrganizationRole }).(pulumi.StringOutput)
}

// User status
func (o GetUserResultOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v GetUserResult) string { return v.Status }).(pulumi.StringOutput)
}

// User last updated timestamp
func (o GetUserResultOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v GetUserResult) string { return v.UpdatedAt }).(pulumi.StringOutput)
}

// User username
func (o GetUserResultOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v GetUserResult) string { return v.Username }).(pulumi.StringOutput)
}

// The roles assigned to the workspaces
func (o GetUserResultOutput) WorkspaceRoles() GetUserWorkspaceRoleArrayOutput {
	return o.ApplyT(func(v GetUserResult) []GetUserWorkspaceRole { return v.WorkspaceRoles }).(GetUserWorkspaceRoleArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(GetUserResultOutput{})
}
