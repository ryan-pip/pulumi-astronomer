// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package astronomer

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/ryan-pip/pulumi-astronomer/sdk/go/astronomer/internal"
)

// Hybrid cluster workspace authorization resource
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/ryan-pip/pulumi-astronomer/sdk/go/astronomer"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := astronomer.NewHybridClusterWorkspaceAuthorization(ctx, "example", &astronomer.HybridClusterWorkspaceAuthorizationArgs{
//				ClusterId: pulumi.String("clk8h0fv1006801j8yysfybbt"),
//				WorkspaceIds: pulumi.StringArray{
//					pulumi.String("cl70oe7cu445571iynrkthtybl"),
//					pulumi.String("cl70oe7cu445571iynrkthacsd"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = astronomer.NewHybridClusterWorkspaceAuthorization(ctx, "importedClusterWorkspaceAuthorization", &astronomer.HybridClusterWorkspaceAuthorizationArgs{
//				ClusterId: pulumi.String("clk8h0fv1006801j8yysfybbt"),
//				WorkspaceIds: pulumi.StringArray{
//					pulumi.String("cl70oe7cu445571iynrkthtybl"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type HybridClusterWorkspaceAuthorization struct {
	pulumi.CustomResourceState

	// The ID of the hybrid cluster to set authorizations for
	ClusterId pulumi.StringOutput `pulumi:"clusterId"`
	// The IDs of the workspaces to authorize for the hybrid cluster
	WorkspaceIds pulumi.StringArrayOutput `pulumi:"workspaceIds"`
}

// NewHybridClusterWorkspaceAuthorization registers a new resource with the given unique name, arguments, and options.
func NewHybridClusterWorkspaceAuthorization(ctx *pulumi.Context,
	name string, args *HybridClusterWorkspaceAuthorizationArgs, opts ...pulumi.ResourceOption) (*HybridClusterWorkspaceAuthorization, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ClusterId == nil {
		return nil, errors.New("invalid value for required argument 'ClusterId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource HybridClusterWorkspaceAuthorization
	err := ctx.RegisterResource("astronomer:index/hybridClusterWorkspaceAuthorization:HybridClusterWorkspaceAuthorization", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetHybridClusterWorkspaceAuthorization gets an existing HybridClusterWorkspaceAuthorization resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetHybridClusterWorkspaceAuthorization(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *HybridClusterWorkspaceAuthorizationState, opts ...pulumi.ResourceOption) (*HybridClusterWorkspaceAuthorization, error) {
	var resource HybridClusterWorkspaceAuthorization
	err := ctx.ReadResource("astronomer:index/hybridClusterWorkspaceAuthorization:HybridClusterWorkspaceAuthorization", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering HybridClusterWorkspaceAuthorization resources.
type hybridClusterWorkspaceAuthorizationState struct {
	// The ID of the hybrid cluster to set authorizations for
	ClusterId *string `pulumi:"clusterId"`
	// The IDs of the workspaces to authorize for the hybrid cluster
	WorkspaceIds []string `pulumi:"workspaceIds"`
}

type HybridClusterWorkspaceAuthorizationState struct {
	// The ID of the hybrid cluster to set authorizations for
	ClusterId pulumi.StringPtrInput
	// The IDs of the workspaces to authorize for the hybrid cluster
	WorkspaceIds pulumi.StringArrayInput
}

func (HybridClusterWorkspaceAuthorizationState) ElementType() reflect.Type {
	return reflect.TypeOf((*hybridClusterWorkspaceAuthorizationState)(nil)).Elem()
}

type hybridClusterWorkspaceAuthorizationArgs struct {
	// The ID of the hybrid cluster to set authorizations for
	ClusterId string `pulumi:"clusterId"`
	// The IDs of the workspaces to authorize for the hybrid cluster
	WorkspaceIds []string `pulumi:"workspaceIds"`
}

// The set of arguments for constructing a HybridClusterWorkspaceAuthorization resource.
type HybridClusterWorkspaceAuthorizationArgs struct {
	// The ID of the hybrid cluster to set authorizations for
	ClusterId pulumi.StringInput
	// The IDs of the workspaces to authorize for the hybrid cluster
	WorkspaceIds pulumi.StringArrayInput
}

func (HybridClusterWorkspaceAuthorizationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*hybridClusterWorkspaceAuthorizationArgs)(nil)).Elem()
}

type HybridClusterWorkspaceAuthorizationInput interface {
	pulumi.Input

	ToHybridClusterWorkspaceAuthorizationOutput() HybridClusterWorkspaceAuthorizationOutput
	ToHybridClusterWorkspaceAuthorizationOutputWithContext(ctx context.Context) HybridClusterWorkspaceAuthorizationOutput
}

func (*HybridClusterWorkspaceAuthorization) ElementType() reflect.Type {
	return reflect.TypeOf((**HybridClusterWorkspaceAuthorization)(nil)).Elem()
}

func (i *HybridClusterWorkspaceAuthorization) ToHybridClusterWorkspaceAuthorizationOutput() HybridClusterWorkspaceAuthorizationOutput {
	return i.ToHybridClusterWorkspaceAuthorizationOutputWithContext(context.Background())
}

func (i *HybridClusterWorkspaceAuthorization) ToHybridClusterWorkspaceAuthorizationOutputWithContext(ctx context.Context) HybridClusterWorkspaceAuthorizationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HybridClusterWorkspaceAuthorizationOutput)
}

// HybridClusterWorkspaceAuthorizationArrayInput is an input type that accepts HybridClusterWorkspaceAuthorizationArray and HybridClusterWorkspaceAuthorizationArrayOutput values.
// You can construct a concrete instance of `HybridClusterWorkspaceAuthorizationArrayInput` via:
//
//	HybridClusterWorkspaceAuthorizationArray{ HybridClusterWorkspaceAuthorizationArgs{...} }
type HybridClusterWorkspaceAuthorizationArrayInput interface {
	pulumi.Input

	ToHybridClusterWorkspaceAuthorizationArrayOutput() HybridClusterWorkspaceAuthorizationArrayOutput
	ToHybridClusterWorkspaceAuthorizationArrayOutputWithContext(context.Context) HybridClusterWorkspaceAuthorizationArrayOutput
}

type HybridClusterWorkspaceAuthorizationArray []HybridClusterWorkspaceAuthorizationInput

func (HybridClusterWorkspaceAuthorizationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*HybridClusterWorkspaceAuthorization)(nil)).Elem()
}

func (i HybridClusterWorkspaceAuthorizationArray) ToHybridClusterWorkspaceAuthorizationArrayOutput() HybridClusterWorkspaceAuthorizationArrayOutput {
	return i.ToHybridClusterWorkspaceAuthorizationArrayOutputWithContext(context.Background())
}

func (i HybridClusterWorkspaceAuthorizationArray) ToHybridClusterWorkspaceAuthorizationArrayOutputWithContext(ctx context.Context) HybridClusterWorkspaceAuthorizationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HybridClusterWorkspaceAuthorizationArrayOutput)
}

// HybridClusterWorkspaceAuthorizationMapInput is an input type that accepts HybridClusterWorkspaceAuthorizationMap and HybridClusterWorkspaceAuthorizationMapOutput values.
// You can construct a concrete instance of `HybridClusterWorkspaceAuthorizationMapInput` via:
//
//	HybridClusterWorkspaceAuthorizationMap{ "key": HybridClusterWorkspaceAuthorizationArgs{...} }
type HybridClusterWorkspaceAuthorizationMapInput interface {
	pulumi.Input

	ToHybridClusterWorkspaceAuthorizationMapOutput() HybridClusterWorkspaceAuthorizationMapOutput
	ToHybridClusterWorkspaceAuthorizationMapOutputWithContext(context.Context) HybridClusterWorkspaceAuthorizationMapOutput
}

type HybridClusterWorkspaceAuthorizationMap map[string]HybridClusterWorkspaceAuthorizationInput

func (HybridClusterWorkspaceAuthorizationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*HybridClusterWorkspaceAuthorization)(nil)).Elem()
}

func (i HybridClusterWorkspaceAuthorizationMap) ToHybridClusterWorkspaceAuthorizationMapOutput() HybridClusterWorkspaceAuthorizationMapOutput {
	return i.ToHybridClusterWorkspaceAuthorizationMapOutputWithContext(context.Background())
}

func (i HybridClusterWorkspaceAuthorizationMap) ToHybridClusterWorkspaceAuthorizationMapOutputWithContext(ctx context.Context) HybridClusterWorkspaceAuthorizationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HybridClusterWorkspaceAuthorizationMapOutput)
}

type HybridClusterWorkspaceAuthorizationOutput struct{ *pulumi.OutputState }

func (HybridClusterWorkspaceAuthorizationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HybridClusterWorkspaceAuthorization)(nil)).Elem()
}

func (o HybridClusterWorkspaceAuthorizationOutput) ToHybridClusterWorkspaceAuthorizationOutput() HybridClusterWorkspaceAuthorizationOutput {
	return o
}

func (o HybridClusterWorkspaceAuthorizationOutput) ToHybridClusterWorkspaceAuthorizationOutputWithContext(ctx context.Context) HybridClusterWorkspaceAuthorizationOutput {
	return o
}

// The ID of the hybrid cluster to set authorizations for
func (o HybridClusterWorkspaceAuthorizationOutput) ClusterId() pulumi.StringOutput {
	return o.ApplyT(func(v *HybridClusterWorkspaceAuthorization) pulumi.StringOutput { return v.ClusterId }).(pulumi.StringOutput)
}

// The IDs of the workspaces to authorize for the hybrid cluster
func (o HybridClusterWorkspaceAuthorizationOutput) WorkspaceIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *HybridClusterWorkspaceAuthorization) pulumi.StringArrayOutput { return v.WorkspaceIds }).(pulumi.StringArrayOutput)
}

type HybridClusterWorkspaceAuthorizationArrayOutput struct{ *pulumi.OutputState }

func (HybridClusterWorkspaceAuthorizationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*HybridClusterWorkspaceAuthorization)(nil)).Elem()
}

func (o HybridClusterWorkspaceAuthorizationArrayOutput) ToHybridClusterWorkspaceAuthorizationArrayOutput() HybridClusterWorkspaceAuthorizationArrayOutput {
	return o
}

func (o HybridClusterWorkspaceAuthorizationArrayOutput) ToHybridClusterWorkspaceAuthorizationArrayOutputWithContext(ctx context.Context) HybridClusterWorkspaceAuthorizationArrayOutput {
	return o
}

func (o HybridClusterWorkspaceAuthorizationArrayOutput) Index(i pulumi.IntInput) HybridClusterWorkspaceAuthorizationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *HybridClusterWorkspaceAuthorization {
		return vs[0].([]*HybridClusterWorkspaceAuthorization)[vs[1].(int)]
	}).(HybridClusterWorkspaceAuthorizationOutput)
}

type HybridClusterWorkspaceAuthorizationMapOutput struct{ *pulumi.OutputState }

func (HybridClusterWorkspaceAuthorizationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*HybridClusterWorkspaceAuthorization)(nil)).Elem()
}

func (o HybridClusterWorkspaceAuthorizationMapOutput) ToHybridClusterWorkspaceAuthorizationMapOutput() HybridClusterWorkspaceAuthorizationMapOutput {
	return o
}

func (o HybridClusterWorkspaceAuthorizationMapOutput) ToHybridClusterWorkspaceAuthorizationMapOutputWithContext(ctx context.Context) HybridClusterWorkspaceAuthorizationMapOutput {
	return o
}

func (o HybridClusterWorkspaceAuthorizationMapOutput) MapIndex(k pulumi.StringInput) HybridClusterWorkspaceAuthorizationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *HybridClusterWorkspaceAuthorization {
		return vs[0].(map[string]*HybridClusterWorkspaceAuthorization)[vs[1].(string)]
	}).(HybridClusterWorkspaceAuthorizationOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*HybridClusterWorkspaceAuthorizationInput)(nil)).Elem(), &HybridClusterWorkspaceAuthorization{})
	pulumi.RegisterInputType(reflect.TypeOf((*HybridClusterWorkspaceAuthorizationArrayInput)(nil)).Elem(), HybridClusterWorkspaceAuthorizationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*HybridClusterWorkspaceAuthorizationMapInput)(nil)).Elem(), HybridClusterWorkspaceAuthorizationMap{})
	pulumi.RegisterOutputType(HybridClusterWorkspaceAuthorizationOutput{})
	pulumi.RegisterOutputType(HybridClusterWorkspaceAuthorizationArrayOutput{})
	pulumi.RegisterOutputType(HybridClusterWorkspaceAuthorizationMapOutput{})
}
