// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package astronomer

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/ryan-pip/pulumi-astronomer/sdk/go/astronomer/internal"
)

// Team resource
type Team struct {
	pulumi.CustomResourceState

	// Team creation timestamp
	CreatedAt pulumi.StringOutput `pulumi:"createdAt"`
	// Team creator
	CreatedBy TeamCreatedByOutput `pulumi:"createdBy"`
	// The roles to assign to the Deployments
	DeploymentRoles TeamDeploymentRoleArrayOutput `pulumi:"deploymentRoles"`
	// Team description
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Whether the Team is managed by an identity provider
	IsIdpManaged pulumi.BoolOutput `pulumi:"isIdpManaged"`
	// The IDs of the users to add to the Team
	MemberIds pulumi.StringArrayOutput `pulumi:"memberIds"`
	// Team name
	Name pulumi.StringOutput `pulumi:"name"`
	// The role to assign to the Organization
	OrganizationRole pulumi.StringOutput `pulumi:"organizationRole"`
	// Number of roles assigned to the Team
	RolesCount pulumi.IntOutput `pulumi:"rolesCount"`
	// Team last updated timestamp
	UpdatedAt pulumi.StringOutput `pulumi:"updatedAt"`
	// Team updater
	UpdatedBy TeamUpdatedByOutput `pulumi:"updatedBy"`
	// The roles to assign to the Workspaces
	WorkspaceRoles TeamWorkspaceRoleArrayOutput `pulumi:"workspaceRoles"`
}

// NewTeam registers a new resource with the given unique name, arguments, and options.
func NewTeam(ctx *pulumi.Context,
	name string, args *TeamArgs, opts ...pulumi.ResourceOption) (*Team, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.OrganizationRole == nil {
		return nil, errors.New("invalid value for required argument 'OrganizationRole'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Team
	err := ctx.RegisterResource("astronomer:index/team:Team", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetTeam gets an existing Team resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTeam(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *TeamState, opts ...pulumi.ResourceOption) (*Team, error) {
	var resource Team
	err := ctx.ReadResource("astronomer:index/team:Team", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Team resources.
type teamState struct {
	// Team creation timestamp
	CreatedAt *string `pulumi:"createdAt"`
	// Team creator
	CreatedBy *TeamCreatedBy `pulumi:"createdBy"`
	// The roles to assign to the Deployments
	DeploymentRoles []TeamDeploymentRole `pulumi:"deploymentRoles"`
	// Team description
	Description *string `pulumi:"description"`
	// Whether the Team is managed by an identity provider
	IsIdpManaged *bool `pulumi:"isIdpManaged"`
	// The IDs of the users to add to the Team
	MemberIds []string `pulumi:"memberIds"`
	// Team name
	Name *string `pulumi:"name"`
	// The role to assign to the Organization
	OrganizationRole *string `pulumi:"organizationRole"`
	// Number of roles assigned to the Team
	RolesCount *int `pulumi:"rolesCount"`
	// Team last updated timestamp
	UpdatedAt *string `pulumi:"updatedAt"`
	// Team updater
	UpdatedBy *TeamUpdatedBy `pulumi:"updatedBy"`
	// The roles to assign to the Workspaces
	WorkspaceRoles []TeamWorkspaceRole `pulumi:"workspaceRoles"`
}

type TeamState struct {
	// Team creation timestamp
	CreatedAt pulumi.StringPtrInput
	// Team creator
	CreatedBy TeamCreatedByPtrInput
	// The roles to assign to the Deployments
	DeploymentRoles TeamDeploymentRoleArrayInput
	// Team description
	Description pulumi.StringPtrInput
	// Whether the Team is managed by an identity provider
	IsIdpManaged pulumi.BoolPtrInput
	// The IDs of the users to add to the Team
	MemberIds pulumi.StringArrayInput
	// Team name
	Name pulumi.StringPtrInput
	// The role to assign to the Organization
	OrganizationRole pulumi.StringPtrInput
	// Number of roles assigned to the Team
	RolesCount pulumi.IntPtrInput
	// Team last updated timestamp
	UpdatedAt pulumi.StringPtrInput
	// Team updater
	UpdatedBy TeamUpdatedByPtrInput
	// The roles to assign to the Workspaces
	WorkspaceRoles TeamWorkspaceRoleArrayInput
}

func (TeamState) ElementType() reflect.Type {
	return reflect.TypeOf((*teamState)(nil)).Elem()
}

type teamArgs struct {
	// The roles to assign to the Deployments
	DeploymentRoles []TeamDeploymentRole `pulumi:"deploymentRoles"`
	// Team description
	Description *string `pulumi:"description"`
	// The IDs of the users to add to the Team
	MemberIds []string `pulumi:"memberIds"`
	// Team name
	Name *string `pulumi:"name"`
	// The role to assign to the Organization
	OrganizationRole string `pulumi:"organizationRole"`
	// The roles to assign to the Workspaces
	WorkspaceRoles []TeamWorkspaceRole `pulumi:"workspaceRoles"`
}

// The set of arguments for constructing a Team resource.
type TeamArgs struct {
	// The roles to assign to the Deployments
	DeploymentRoles TeamDeploymentRoleArrayInput
	// Team description
	Description pulumi.StringPtrInput
	// The IDs of the users to add to the Team
	MemberIds pulumi.StringArrayInput
	// Team name
	Name pulumi.StringPtrInput
	// The role to assign to the Organization
	OrganizationRole pulumi.StringInput
	// The roles to assign to the Workspaces
	WorkspaceRoles TeamWorkspaceRoleArrayInput
}

func (TeamArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*teamArgs)(nil)).Elem()
}

type TeamInput interface {
	pulumi.Input

	ToTeamOutput() TeamOutput
	ToTeamOutputWithContext(ctx context.Context) TeamOutput
}

func (*Team) ElementType() reflect.Type {
	return reflect.TypeOf((**Team)(nil)).Elem()
}

func (i *Team) ToTeamOutput() TeamOutput {
	return i.ToTeamOutputWithContext(context.Background())
}

func (i *Team) ToTeamOutputWithContext(ctx context.Context) TeamOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TeamOutput)
}

// TeamArrayInput is an input type that accepts TeamArray and TeamArrayOutput values.
// You can construct a concrete instance of `TeamArrayInput` via:
//
//	TeamArray{ TeamArgs{...} }
type TeamArrayInput interface {
	pulumi.Input

	ToTeamArrayOutput() TeamArrayOutput
	ToTeamArrayOutputWithContext(context.Context) TeamArrayOutput
}

type TeamArray []TeamInput

func (TeamArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Team)(nil)).Elem()
}

func (i TeamArray) ToTeamArrayOutput() TeamArrayOutput {
	return i.ToTeamArrayOutputWithContext(context.Background())
}

func (i TeamArray) ToTeamArrayOutputWithContext(ctx context.Context) TeamArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TeamArrayOutput)
}

// TeamMapInput is an input type that accepts TeamMap and TeamMapOutput values.
// You can construct a concrete instance of `TeamMapInput` via:
//
//	TeamMap{ "key": TeamArgs{...} }
type TeamMapInput interface {
	pulumi.Input

	ToTeamMapOutput() TeamMapOutput
	ToTeamMapOutputWithContext(context.Context) TeamMapOutput
}

type TeamMap map[string]TeamInput

func (TeamMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Team)(nil)).Elem()
}

func (i TeamMap) ToTeamMapOutput() TeamMapOutput {
	return i.ToTeamMapOutputWithContext(context.Background())
}

func (i TeamMap) ToTeamMapOutputWithContext(ctx context.Context) TeamMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TeamMapOutput)
}

type TeamOutput struct{ *pulumi.OutputState }

func (TeamOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Team)(nil)).Elem()
}

func (o TeamOutput) ToTeamOutput() TeamOutput {
	return o
}

func (o TeamOutput) ToTeamOutputWithContext(ctx context.Context) TeamOutput {
	return o
}

// Team creation timestamp
func (o TeamOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *Team) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

// Team creator
func (o TeamOutput) CreatedBy() TeamCreatedByOutput {
	return o.ApplyT(func(v *Team) TeamCreatedByOutput { return v.CreatedBy }).(TeamCreatedByOutput)
}

// The roles to assign to the Deployments
func (o TeamOutput) DeploymentRoles() TeamDeploymentRoleArrayOutput {
	return o.ApplyT(func(v *Team) TeamDeploymentRoleArrayOutput { return v.DeploymentRoles }).(TeamDeploymentRoleArrayOutput)
}

// Team description
func (o TeamOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Team) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Whether the Team is managed by an identity provider
func (o TeamOutput) IsIdpManaged() pulumi.BoolOutput {
	return o.ApplyT(func(v *Team) pulumi.BoolOutput { return v.IsIdpManaged }).(pulumi.BoolOutput)
}

// The IDs of the users to add to the Team
func (o TeamOutput) MemberIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Team) pulumi.StringArrayOutput { return v.MemberIds }).(pulumi.StringArrayOutput)
}

// Team name
func (o TeamOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Team) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The role to assign to the Organization
func (o TeamOutput) OrganizationRole() pulumi.StringOutput {
	return o.ApplyT(func(v *Team) pulumi.StringOutput { return v.OrganizationRole }).(pulumi.StringOutput)
}

// Number of roles assigned to the Team
func (o TeamOutput) RolesCount() pulumi.IntOutput {
	return o.ApplyT(func(v *Team) pulumi.IntOutput { return v.RolesCount }).(pulumi.IntOutput)
}

// Team last updated timestamp
func (o TeamOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *Team) pulumi.StringOutput { return v.UpdatedAt }).(pulumi.StringOutput)
}

// Team updater
func (o TeamOutput) UpdatedBy() TeamUpdatedByOutput {
	return o.ApplyT(func(v *Team) TeamUpdatedByOutput { return v.UpdatedBy }).(TeamUpdatedByOutput)
}

// The roles to assign to the Workspaces
func (o TeamOutput) WorkspaceRoles() TeamWorkspaceRoleArrayOutput {
	return o.ApplyT(func(v *Team) TeamWorkspaceRoleArrayOutput { return v.WorkspaceRoles }).(TeamWorkspaceRoleArrayOutput)
}

type TeamArrayOutput struct{ *pulumi.OutputState }

func (TeamArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Team)(nil)).Elem()
}

func (o TeamArrayOutput) ToTeamArrayOutput() TeamArrayOutput {
	return o
}

func (o TeamArrayOutput) ToTeamArrayOutputWithContext(ctx context.Context) TeamArrayOutput {
	return o
}

func (o TeamArrayOutput) Index(i pulumi.IntInput) TeamOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Team {
		return vs[0].([]*Team)[vs[1].(int)]
	}).(TeamOutput)
}

type TeamMapOutput struct{ *pulumi.OutputState }

func (TeamMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Team)(nil)).Elem()
}

func (o TeamMapOutput) ToTeamMapOutput() TeamMapOutput {
	return o
}

func (o TeamMapOutput) ToTeamMapOutputWithContext(ctx context.Context) TeamMapOutput {
	return o
}

func (o TeamMapOutput) MapIndex(k pulumi.StringInput) TeamOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Team {
		return vs[0].(map[string]*Team)[vs[1].(string)]
	}).(TeamOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*TeamInput)(nil)).Elem(), &Team{})
	pulumi.RegisterInputType(reflect.TypeOf((*TeamArrayInput)(nil)).Elem(), TeamArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TeamMapInput)(nil)).Elem(), TeamMap{})
	pulumi.RegisterOutputType(TeamOutput{})
	pulumi.RegisterOutputType(TeamArrayOutput{})
	pulumi.RegisterOutputType(TeamMapOutput{})
}
