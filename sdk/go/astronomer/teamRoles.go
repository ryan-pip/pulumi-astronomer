// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package astronomer

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/ryan-pip/pulumi-astronomer/sdk/go/astronomer/internal"
)

// Team Roles resource
type TeamRoles struct {
	pulumi.CustomResourceState

	// The roles to assign to the deployments
	DeploymentRoles TeamRolesDeploymentRoleArrayOutput `pulumi:"deploymentRoles"`
	// The role to assign to the organization
	OrganizationRole pulumi.StringOutput `pulumi:"organizationRole"`
	// The ID of the team to assign the roles to
	TeamId pulumi.StringOutput `pulumi:"teamId"`
	// The roles to assign to the workspaces
	WorkspaceRoles TeamRolesWorkspaceRoleArrayOutput `pulumi:"workspaceRoles"`
}

// NewTeamRoles registers a new resource with the given unique name, arguments, and options.
func NewTeamRoles(ctx *pulumi.Context,
	name string, args *TeamRolesArgs, opts ...pulumi.ResourceOption) (*TeamRoles, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.OrganizationRole == nil {
		return nil, errors.New("invalid value for required argument 'OrganizationRole'")
	}
	if args.TeamId == nil {
		return nil, errors.New("invalid value for required argument 'TeamId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource TeamRoles
	err := ctx.RegisterResource("astronomer:index/teamRoles:TeamRoles", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetTeamRoles gets an existing TeamRoles resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTeamRoles(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *TeamRolesState, opts ...pulumi.ResourceOption) (*TeamRoles, error) {
	var resource TeamRoles
	err := ctx.ReadResource("astronomer:index/teamRoles:TeamRoles", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering TeamRoles resources.
type teamRolesState struct {
	// The roles to assign to the deployments
	DeploymentRoles []TeamRolesDeploymentRole `pulumi:"deploymentRoles"`
	// The role to assign to the organization
	OrganizationRole *string `pulumi:"organizationRole"`
	// The ID of the team to assign the roles to
	TeamId *string `pulumi:"teamId"`
	// The roles to assign to the workspaces
	WorkspaceRoles []TeamRolesWorkspaceRole `pulumi:"workspaceRoles"`
}

type TeamRolesState struct {
	// The roles to assign to the deployments
	DeploymentRoles TeamRolesDeploymentRoleArrayInput
	// The role to assign to the organization
	OrganizationRole pulumi.StringPtrInput
	// The ID of the team to assign the roles to
	TeamId pulumi.StringPtrInput
	// The roles to assign to the workspaces
	WorkspaceRoles TeamRolesWorkspaceRoleArrayInput
}

func (TeamRolesState) ElementType() reflect.Type {
	return reflect.TypeOf((*teamRolesState)(nil)).Elem()
}

type teamRolesArgs struct {
	// The roles to assign to the deployments
	DeploymentRoles []TeamRolesDeploymentRole `pulumi:"deploymentRoles"`
	// The role to assign to the organization
	OrganizationRole string `pulumi:"organizationRole"`
	// The ID of the team to assign the roles to
	TeamId string `pulumi:"teamId"`
	// The roles to assign to the workspaces
	WorkspaceRoles []TeamRolesWorkspaceRole `pulumi:"workspaceRoles"`
}

// The set of arguments for constructing a TeamRoles resource.
type TeamRolesArgs struct {
	// The roles to assign to the deployments
	DeploymentRoles TeamRolesDeploymentRoleArrayInput
	// The role to assign to the organization
	OrganizationRole pulumi.StringInput
	// The ID of the team to assign the roles to
	TeamId pulumi.StringInput
	// The roles to assign to the workspaces
	WorkspaceRoles TeamRolesWorkspaceRoleArrayInput
}

func (TeamRolesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*teamRolesArgs)(nil)).Elem()
}

type TeamRolesInput interface {
	pulumi.Input

	ToTeamRolesOutput() TeamRolesOutput
	ToTeamRolesOutputWithContext(ctx context.Context) TeamRolesOutput
}

func (*TeamRoles) ElementType() reflect.Type {
	return reflect.TypeOf((**TeamRoles)(nil)).Elem()
}

func (i *TeamRoles) ToTeamRolesOutput() TeamRolesOutput {
	return i.ToTeamRolesOutputWithContext(context.Background())
}

func (i *TeamRoles) ToTeamRolesOutputWithContext(ctx context.Context) TeamRolesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TeamRolesOutput)
}

// TeamRolesArrayInput is an input type that accepts TeamRolesArray and TeamRolesArrayOutput values.
// You can construct a concrete instance of `TeamRolesArrayInput` via:
//
//	TeamRolesArray{ TeamRolesArgs{...} }
type TeamRolesArrayInput interface {
	pulumi.Input

	ToTeamRolesArrayOutput() TeamRolesArrayOutput
	ToTeamRolesArrayOutputWithContext(context.Context) TeamRolesArrayOutput
}

type TeamRolesArray []TeamRolesInput

func (TeamRolesArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*TeamRoles)(nil)).Elem()
}

func (i TeamRolesArray) ToTeamRolesArrayOutput() TeamRolesArrayOutput {
	return i.ToTeamRolesArrayOutputWithContext(context.Background())
}

func (i TeamRolesArray) ToTeamRolesArrayOutputWithContext(ctx context.Context) TeamRolesArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TeamRolesArrayOutput)
}

// TeamRolesMapInput is an input type that accepts TeamRolesMap and TeamRolesMapOutput values.
// You can construct a concrete instance of `TeamRolesMapInput` via:
//
//	TeamRolesMap{ "key": TeamRolesArgs{...} }
type TeamRolesMapInput interface {
	pulumi.Input

	ToTeamRolesMapOutput() TeamRolesMapOutput
	ToTeamRolesMapOutputWithContext(context.Context) TeamRolesMapOutput
}

type TeamRolesMap map[string]TeamRolesInput

func (TeamRolesMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*TeamRoles)(nil)).Elem()
}

func (i TeamRolesMap) ToTeamRolesMapOutput() TeamRolesMapOutput {
	return i.ToTeamRolesMapOutputWithContext(context.Background())
}

func (i TeamRolesMap) ToTeamRolesMapOutputWithContext(ctx context.Context) TeamRolesMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TeamRolesMapOutput)
}

type TeamRolesOutput struct{ *pulumi.OutputState }

func (TeamRolesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TeamRoles)(nil)).Elem()
}

func (o TeamRolesOutput) ToTeamRolesOutput() TeamRolesOutput {
	return o
}

func (o TeamRolesOutput) ToTeamRolesOutputWithContext(ctx context.Context) TeamRolesOutput {
	return o
}

// The roles to assign to the deployments
func (o TeamRolesOutput) DeploymentRoles() TeamRolesDeploymentRoleArrayOutput {
	return o.ApplyT(func(v *TeamRoles) TeamRolesDeploymentRoleArrayOutput { return v.DeploymentRoles }).(TeamRolesDeploymentRoleArrayOutput)
}

// The role to assign to the organization
func (o TeamRolesOutput) OrganizationRole() pulumi.StringOutput {
	return o.ApplyT(func(v *TeamRoles) pulumi.StringOutput { return v.OrganizationRole }).(pulumi.StringOutput)
}

// The ID of the team to assign the roles to
func (o TeamRolesOutput) TeamId() pulumi.StringOutput {
	return o.ApplyT(func(v *TeamRoles) pulumi.StringOutput { return v.TeamId }).(pulumi.StringOutput)
}

// The roles to assign to the workspaces
func (o TeamRolesOutput) WorkspaceRoles() TeamRolesWorkspaceRoleArrayOutput {
	return o.ApplyT(func(v *TeamRoles) TeamRolesWorkspaceRoleArrayOutput { return v.WorkspaceRoles }).(TeamRolesWorkspaceRoleArrayOutput)
}

type TeamRolesArrayOutput struct{ *pulumi.OutputState }

func (TeamRolesArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*TeamRoles)(nil)).Elem()
}

func (o TeamRolesArrayOutput) ToTeamRolesArrayOutput() TeamRolesArrayOutput {
	return o
}

func (o TeamRolesArrayOutput) ToTeamRolesArrayOutputWithContext(ctx context.Context) TeamRolesArrayOutput {
	return o
}

func (o TeamRolesArrayOutput) Index(i pulumi.IntInput) TeamRolesOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *TeamRoles {
		return vs[0].([]*TeamRoles)[vs[1].(int)]
	}).(TeamRolesOutput)
}

type TeamRolesMapOutput struct{ *pulumi.OutputState }

func (TeamRolesMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*TeamRoles)(nil)).Elem()
}

func (o TeamRolesMapOutput) ToTeamRolesMapOutput() TeamRolesMapOutput {
	return o
}

func (o TeamRolesMapOutput) ToTeamRolesMapOutputWithContext(ctx context.Context) TeamRolesMapOutput {
	return o
}

func (o TeamRolesMapOutput) MapIndex(k pulumi.StringInput) TeamRolesOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *TeamRoles {
		return vs[0].(map[string]*TeamRoles)[vs[1].(string)]
	}).(TeamRolesOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*TeamRolesInput)(nil)).Elem(), &TeamRoles{})
	pulumi.RegisterInputType(reflect.TypeOf((*TeamRolesArrayInput)(nil)).Elem(), TeamRolesArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TeamRolesMapInput)(nil)).Elem(), TeamRolesMap{})
	pulumi.RegisterOutputType(TeamRolesOutput{})
	pulumi.RegisterOutputType(TeamRolesArrayOutput{})
	pulumi.RegisterOutputType(TeamRolesMapOutput{})
}
