// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package astronomer

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/ryan-pip/pulumi-astronomer/sdk/go/astronomer/internal"
)

// User Invite resource
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/ryan-pip/pulumi-astronomer/sdk/go/astronomer"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := astronomer.NewUserInvite(ctx, "userInvite", &astronomer.UserInviteArgs{
//				Email: pulumi.String("email@organization.com"),
//				Role:  pulumi.String("ORGANIZATION_MEMBER"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type UserInvite struct {
	pulumi.CustomResourceState

	// The email address of the user being invited
	Email pulumi.StringOutput `pulumi:"email"`
	// The expiration date of the invite
	ExpiresAt pulumi.StringOutput `pulumi:"expiresAt"`
	// The ID of the invite
	InviteId pulumi.StringOutput `pulumi:"inviteId"`
	// The profile of the invitee
	Invitee UserInviteInviteeOutput `pulumi:"invitee"`
	// The profile of the inviter
	Inviter UserInviteInviterOutput `pulumi:"inviter"`
	// The Organization role to assign to the user
	Role pulumi.StringOutput `pulumi:"role"`
	// The ID of the user
	UserId pulumi.StringOutput `pulumi:"userId"`
}

// NewUserInvite registers a new resource with the given unique name, arguments, and options.
func NewUserInvite(ctx *pulumi.Context,
	name string, args *UserInviteArgs, opts ...pulumi.ResourceOption) (*UserInvite, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Email == nil {
		return nil, errors.New("invalid value for required argument 'Email'")
	}
	if args.Role == nil {
		return nil, errors.New("invalid value for required argument 'Role'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource UserInvite
	err := ctx.RegisterResource("astronomer:index/userInvite:UserInvite", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetUserInvite gets an existing UserInvite resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetUserInvite(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *UserInviteState, opts ...pulumi.ResourceOption) (*UserInvite, error) {
	var resource UserInvite
	err := ctx.ReadResource("astronomer:index/userInvite:UserInvite", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering UserInvite resources.
type userInviteState struct {
	// The email address of the user being invited
	Email *string `pulumi:"email"`
	// The expiration date of the invite
	ExpiresAt *string `pulumi:"expiresAt"`
	// The ID of the invite
	InviteId *string `pulumi:"inviteId"`
	// The profile of the invitee
	Invitee *UserInviteInvitee `pulumi:"invitee"`
	// The profile of the inviter
	Inviter *UserInviteInviter `pulumi:"inviter"`
	// The Organization role to assign to the user
	Role *string `pulumi:"role"`
	// The ID of the user
	UserId *string `pulumi:"userId"`
}

type UserInviteState struct {
	// The email address of the user being invited
	Email pulumi.StringPtrInput
	// The expiration date of the invite
	ExpiresAt pulumi.StringPtrInput
	// The ID of the invite
	InviteId pulumi.StringPtrInput
	// The profile of the invitee
	Invitee UserInviteInviteePtrInput
	// The profile of the inviter
	Inviter UserInviteInviterPtrInput
	// The Organization role to assign to the user
	Role pulumi.StringPtrInput
	// The ID of the user
	UserId pulumi.StringPtrInput
}

func (UserInviteState) ElementType() reflect.Type {
	return reflect.TypeOf((*userInviteState)(nil)).Elem()
}

type userInviteArgs struct {
	// The email address of the user being invited
	Email string `pulumi:"email"`
	// The Organization role to assign to the user
	Role string `pulumi:"role"`
}

// The set of arguments for constructing a UserInvite resource.
type UserInviteArgs struct {
	// The email address of the user being invited
	Email pulumi.StringInput
	// The Organization role to assign to the user
	Role pulumi.StringInput
}

func (UserInviteArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*userInviteArgs)(nil)).Elem()
}

type UserInviteInput interface {
	pulumi.Input

	ToUserInviteOutput() UserInviteOutput
	ToUserInviteOutputWithContext(ctx context.Context) UserInviteOutput
}

func (*UserInvite) ElementType() reflect.Type {
	return reflect.TypeOf((**UserInvite)(nil)).Elem()
}

func (i *UserInvite) ToUserInviteOutput() UserInviteOutput {
	return i.ToUserInviteOutputWithContext(context.Background())
}

func (i *UserInvite) ToUserInviteOutputWithContext(ctx context.Context) UserInviteOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserInviteOutput)
}

// UserInviteArrayInput is an input type that accepts UserInviteArray and UserInviteArrayOutput values.
// You can construct a concrete instance of `UserInviteArrayInput` via:
//
//	UserInviteArray{ UserInviteArgs{...} }
type UserInviteArrayInput interface {
	pulumi.Input

	ToUserInviteArrayOutput() UserInviteArrayOutput
	ToUserInviteArrayOutputWithContext(context.Context) UserInviteArrayOutput
}

type UserInviteArray []UserInviteInput

func (UserInviteArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*UserInvite)(nil)).Elem()
}

func (i UserInviteArray) ToUserInviteArrayOutput() UserInviteArrayOutput {
	return i.ToUserInviteArrayOutputWithContext(context.Background())
}

func (i UserInviteArray) ToUserInviteArrayOutputWithContext(ctx context.Context) UserInviteArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserInviteArrayOutput)
}

// UserInviteMapInput is an input type that accepts UserInviteMap and UserInviteMapOutput values.
// You can construct a concrete instance of `UserInviteMapInput` via:
//
//	UserInviteMap{ "key": UserInviteArgs{...} }
type UserInviteMapInput interface {
	pulumi.Input

	ToUserInviteMapOutput() UserInviteMapOutput
	ToUserInviteMapOutputWithContext(context.Context) UserInviteMapOutput
}

type UserInviteMap map[string]UserInviteInput

func (UserInviteMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*UserInvite)(nil)).Elem()
}

func (i UserInviteMap) ToUserInviteMapOutput() UserInviteMapOutput {
	return i.ToUserInviteMapOutputWithContext(context.Background())
}

func (i UserInviteMap) ToUserInviteMapOutputWithContext(ctx context.Context) UserInviteMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserInviteMapOutput)
}

type UserInviteOutput struct{ *pulumi.OutputState }

func (UserInviteOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**UserInvite)(nil)).Elem()
}

func (o UserInviteOutput) ToUserInviteOutput() UserInviteOutput {
	return o
}

func (o UserInviteOutput) ToUserInviteOutputWithContext(ctx context.Context) UserInviteOutput {
	return o
}

// The email address of the user being invited
func (o UserInviteOutput) Email() pulumi.StringOutput {
	return o.ApplyT(func(v *UserInvite) pulumi.StringOutput { return v.Email }).(pulumi.StringOutput)
}

// The expiration date of the invite
func (o UserInviteOutput) ExpiresAt() pulumi.StringOutput {
	return o.ApplyT(func(v *UserInvite) pulumi.StringOutput { return v.ExpiresAt }).(pulumi.StringOutput)
}

// The ID of the invite
func (o UserInviteOutput) InviteId() pulumi.StringOutput {
	return o.ApplyT(func(v *UserInvite) pulumi.StringOutput { return v.InviteId }).(pulumi.StringOutput)
}

// The profile of the invitee
func (o UserInviteOutput) Invitee() UserInviteInviteeOutput {
	return o.ApplyT(func(v *UserInvite) UserInviteInviteeOutput { return v.Invitee }).(UserInviteInviteeOutput)
}

// The profile of the inviter
func (o UserInviteOutput) Inviter() UserInviteInviterOutput {
	return o.ApplyT(func(v *UserInvite) UserInviteInviterOutput { return v.Inviter }).(UserInviteInviterOutput)
}

// The Organization role to assign to the user
func (o UserInviteOutput) Role() pulumi.StringOutput {
	return o.ApplyT(func(v *UserInvite) pulumi.StringOutput { return v.Role }).(pulumi.StringOutput)
}

// The ID of the user
func (o UserInviteOutput) UserId() pulumi.StringOutput {
	return o.ApplyT(func(v *UserInvite) pulumi.StringOutput { return v.UserId }).(pulumi.StringOutput)
}

type UserInviteArrayOutput struct{ *pulumi.OutputState }

func (UserInviteArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*UserInvite)(nil)).Elem()
}

func (o UserInviteArrayOutput) ToUserInviteArrayOutput() UserInviteArrayOutput {
	return o
}

func (o UserInviteArrayOutput) ToUserInviteArrayOutputWithContext(ctx context.Context) UserInviteArrayOutput {
	return o
}

func (o UserInviteArrayOutput) Index(i pulumi.IntInput) UserInviteOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *UserInvite {
		return vs[0].([]*UserInvite)[vs[1].(int)]
	}).(UserInviteOutput)
}

type UserInviteMapOutput struct{ *pulumi.OutputState }

func (UserInviteMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*UserInvite)(nil)).Elem()
}

func (o UserInviteMapOutput) ToUserInviteMapOutput() UserInviteMapOutput {
	return o
}

func (o UserInviteMapOutput) ToUserInviteMapOutputWithContext(ctx context.Context) UserInviteMapOutput {
	return o
}

func (o UserInviteMapOutput) MapIndex(k pulumi.StringInput) UserInviteOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *UserInvite {
		return vs[0].(map[string]*UserInvite)[vs[1].(string)]
	}).(UserInviteOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*UserInviteInput)(nil)).Elem(), &UserInvite{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserInviteArrayInput)(nil)).Elem(), UserInviteArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserInviteMapInput)(nil)).Elem(), UserInviteMap{})
	pulumi.RegisterOutputType(UserInviteOutput{})
	pulumi.RegisterOutputType(UserInviteArrayOutput{})
	pulumi.RegisterOutputType(UserInviteMapOutput{})
}
