// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package astronomer

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/ryan-pip/pulumi-astronomer/sdk/go/astronomer/internal"
)

// User Roles resource
type UserRoles struct {
	pulumi.CustomResourceState

	// The roles to assign to the deployments
	DeploymentRoles UserRolesDeploymentRoleArrayOutput `pulumi:"deploymentRoles"`
	// The role to assign to the organization
	OrganizationRole pulumi.StringOutput `pulumi:"organizationRole"`
	// The ID of the user to assign the roles to
	UserId pulumi.StringOutput `pulumi:"userId"`
	// The roles to assign to the workspaces
	WorkspaceRoles UserRolesWorkspaceRoleArrayOutput `pulumi:"workspaceRoles"`
}

// NewUserRoles registers a new resource with the given unique name, arguments, and options.
func NewUserRoles(ctx *pulumi.Context,
	name string, args *UserRolesArgs, opts ...pulumi.ResourceOption) (*UserRoles, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.OrganizationRole == nil {
		return nil, errors.New("invalid value for required argument 'OrganizationRole'")
	}
	if args.UserId == nil {
		return nil, errors.New("invalid value for required argument 'UserId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource UserRoles
	err := ctx.RegisterResource("astronomer:index/userRoles:UserRoles", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetUserRoles gets an existing UserRoles resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetUserRoles(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *UserRolesState, opts ...pulumi.ResourceOption) (*UserRoles, error) {
	var resource UserRoles
	err := ctx.ReadResource("astronomer:index/userRoles:UserRoles", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering UserRoles resources.
type userRolesState struct {
	// The roles to assign to the deployments
	DeploymentRoles []UserRolesDeploymentRole `pulumi:"deploymentRoles"`
	// The role to assign to the organization
	OrganizationRole *string `pulumi:"organizationRole"`
	// The ID of the user to assign the roles to
	UserId *string `pulumi:"userId"`
	// The roles to assign to the workspaces
	WorkspaceRoles []UserRolesWorkspaceRole `pulumi:"workspaceRoles"`
}

type UserRolesState struct {
	// The roles to assign to the deployments
	DeploymentRoles UserRolesDeploymentRoleArrayInput
	// The role to assign to the organization
	OrganizationRole pulumi.StringPtrInput
	// The ID of the user to assign the roles to
	UserId pulumi.StringPtrInput
	// The roles to assign to the workspaces
	WorkspaceRoles UserRolesWorkspaceRoleArrayInput
}

func (UserRolesState) ElementType() reflect.Type {
	return reflect.TypeOf((*userRolesState)(nil)).Elem()
}

type userRolesArgs struct {
	// The roles to assign to the deployments
	DeploymentRoles []UserRolesDeploymentRole `pulumi:"deploymentRoles"`
	// The role to assign to the organization
	OrganizationRole string `pulumi:"organizationRole"`
	// The ID of the user to assign the roles to
	UserId string `pulumi:"userId"`
	// The roles to assign to the workspaces
	WorkspaceRoles []UserRolesWorkspaceRole `pulumi:"workspaceRoles"`
}

// The set of arguments for constructing a UserRoles resource.
type UserRolesArgs struct {
	// The roles to assign to the deployments
	DeploymentRoles UserRolesDeploymentRoleArrayInput
	// The role to assign to the organization
	OrganizationRole pulumi.StringInput
	// The ID of the user to assign the roles to
	UserId pulumi.StringInput
	// The roles to assign to the workspaces
	WorkspaceRoles UserRolesWorkspaceRoleArrayInput
}

func (UserRolesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*userRolesArgs)(nil)).Elem()
}

type UserRolesInput interface {
	pulumi.Input

	ToUserRolesOutput() UserRolesOutput
	ToUserRolesOutputWithContext(ctx context.Context) UserRolesOutput
}

func (*UserRoles) ElementType() reflect.Type {
	return reflect.TypeOf((**UserRoles)(nil)).Elem()
}

func (i *UserRoles) ToUserRolesOutput() UserRolesOutput {
	return i.ToUserRolesOutputWithContext(context.Background())
}

func (i *UserRoles) ToUserRolesOutputWithContext(ctx context.Context) UserRolesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserRolesOutput)
}

// UserRolesArrayInput is an input type that accepts UserRolesArray and UserRolesArrayOutput values.
// You can construct a concrete instance of `UserRolesArrayInput` via:
//
//	UserRolesArray{ UserRolesArgs{...} }
type UserRolesArrayInput interface {
	pulumi.Input

	ToUserRolesArrayOutput() UserRolesArrayOutput
	ToUserRolesArrayOutputWithContext(context.Context) UserRolesArrayOutput
}

type UserRolesArray []UserRolesInput

func (UserRolesArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*UserRoles)(nil)).Elem()
}

func (i UserRolesArray) ToUserRolesArrayOutput() UserRolesArrayOutput {
	return i.ToUserRolesArrayOutputWithContext(context.Background())
}

func (i UserRolesArray) ToUserRolesArrayOutputWithContext(ctx context.Context) UserRolesArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserRolesArrayOutput)
}

// UserRolesMapInput is an input type that accepts UserRolesMap and UserRolesMapOutput values.
// You can construct a concrete instance of `UserRolesMapInput` via:
//
//	UserRolesMap{ "key": UserRolesArgs{...} }
type UserRolesMapInput interface {
	pulumi.Input

	ToUserRolesMapOutput() UserRolesMapOutput
	ToUserRolesMapOutputWithContext(context.Context) UserRolesMapOutput
}

type UserRolesMap map[string]UserRolesInput

func (UserRolesMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*UserRoles)(nil)).Elem()
}

func (i UserRolesMap) ToUserRolesMapOutput() UserRolesMapOutput {
	return i.ToUserRolesMapOutputWithContext(context.Background())
}

func (i UserRolesMap) ToUserRolesMapOutputWithContext(ctx context.Context) UserRolesMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserRolesMapOutput)
}

type UserRolesOutput struct{ *pulumi.OutputState }

func (UserRolesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**UserRoles)(nil)).Elem()
}

func (o UserRolesOutput) ToUserRolesOutput() UserRolesOutput {
	return o
}

func (o UserRolesOutput) ToUserRolesOutputWithContext(ctx context.Context) UserRolesOutput {
	return o
}

// The roles to assign to the deployments
func (o UserRolesOutput) DeploymentRoles() UserRolesDeploymentRoleArrayOutput {
	return o.ApplyT(func(v *UserRoles) UserRolesDeploymentRoleArrayOutput { return v.DeploymentRoles }).(UserRolesDeploymentRoleArrayOutput)
}

// The role to assign to the organization
func (o UserRolesOutput) OrganizationRole() pulumi.StringOutput {
	return o.ApplyT(func(v *UserRoles) pulumi.StringOutput { return v.OrganizationRole }).(pulumi.StringOutput)
}

// The ID of the user to assign the roles to
func (o UserRolesOutput) UserId() pulumi.StringOutput {
	return o.ApplyT(func(v *UserRoles) pulumi.StringOutput { return v.UserId }).(pulumi.StringOutput)
}

// The roles to assign to the workspaces
func (o UserRolesOutput) WorkspaceRoles() UserRolesWorkspaceRoleArrayOutput {
	return o.ApplyT(func(v *UserRoles) UserRolesWorkspaceRoleArrayOutput { return v.WorkspaceRoles }).(UserRolesWorkspaceRoleArrayOutput)
}

type UserRolesArrayOutput struct{ *pulumi.OutputState }

func (UserRolesArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*UserRoles)(nil)).Elem()
}

func (o UserRolesArrayOutput) ToUserRolesArrayOutput() UserRolesArrayOutput {
	return o
}

func (o UserRolesArrayOutput) ToUserRolesArrayOutputWithContext(ctx context.Context) UserRolesArrayOutput {
	return o
}

func (o UserRolesArrayOutput) Index(i pulumi.IntInput) UserRolesOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *UserRoles {
		return vs[0].([]*UserRoles)[vs[1].(int)]
	}).(UserRolesOutput)
}

type UserRolesMapOutput struct{ *pulumi.OutputState }

func (UserRolesMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*UserRoles)(nil)).Elem()
}

func (o UserRolesMapOutput) ToUserRolesMapOutput() UserRolesMapOutput {
	return o
}

func (o UserRolesMapOutput) ToUserRolesMapOutputWithContext(ctx context.Context) UserRolesMapOutput {
	return o
}

func (o UserRolesMapOutput) MapIndex(k pulumi.StringInput) UserRolesOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *UserRoles {
		return vs[0].(map[string]*UserRoles)[vs[1].(string)]
	}).(UserRolesOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*UserRolesInput)(nil)).Elem(), &UserRoles{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserRolesArrayInput)(nil)).Elem(), UserRolesArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserRolesMapInput)(nil)).Elem(), UserRolesMap{})
	pulumi.RegisterOutputType(UserRolesOutput{})
	pulumi.RegisterOutputType(UserRolesArrayOutput{})
	pulumi.RegisterOutputType(UserRolesMapOutput{})
}
