// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * API Token resource
 */
export class ApiToken extends pulumi.CustomResource {
    /**
     * Get an existing ApiToken resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ApiTokenState, opts?: pulumi.CustomResourceOptions): ApiToken {
        return new ApiToken(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'astronomer:index/apiToken:ApiToken';

    /**
     * Returns true if the given object is an instance of ApiToken.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ApiToken {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ApiToken.__pulumiType;
    }

    /**
     * API Token creation timestamp
     */
    public /*out*/ readonly createdAt!: pulumi.Output<string>;
    /**
     * API Token creator
     */
    public /*out*/ readonly createdBy!: pulumi.Output<outputs.ApiTokenCreatedBy>;
    /**
     * API Token description
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * time when the API token will expire in UTC
     */
    public /*out*/ readonly endAt!: pulumi.Output<string>;
    /**
     * API Token expiry period in days
     */
    public readonly expiryPeriodInDays!: pulumi.Output<number | undefined>;
    /**
     * API Token last used timestamp
     */
    public /*out*/ readonly lastUsedAt!: pulumi.Output<string>;
    /**
     * API Token name
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The roles assigned to the API Token
     */
    public readonly roles!: pulumi.Output<outputs.ApiTokenRole[]>;
    /**
     * API Token short token
     */
    public /*out*/ readonly shortToken!: pulumi.Output<string>;
    /**
     * time when the API token will become valid in UTC
     */
    public /*out*/ readonly startAt!: pulumi.Output<string>;
    public /*out*/ readonly token!: pulumi.Output<string>;
    /**
     * API Token type - if changing this value, the API Token will be recreated with the new type
     */
    public readonly type!: pulumi.Output<string>;
    /**
     * API Token last updated timestamp
     */
    public /*out*/ readonly updatedAt!: pulumi.Output<string>;
    /**
     * API Token updater
     */
    public /*out*/ readonly updatedBy!: pulumi.Output<outputs.ApiTokenUpdatedBy>;

    /**
     * Create a ApiToken resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ApiTokenArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ApiTokenArgs | ApiTokenState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ApiTokenState | undefined;
            resourceInputs["createdAt"] = state ? state.createdAt : undefined;
            resourceInputs["createdBy"] = state ? state.createdBy : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["endAt"] = state ? state.endAt : undefined;
            resourceInputs["expiryPeriodInDays"] = state ? state.expiryPeriodInDays : undefined;
            resourceInputs["lastUsedAt"] = state ? state.lastUsedAt : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["roles"] = state ? state.roles : undefined;
            resourceInputs["shortToken"] = state ? state.shortToken : undefined;
            resourceInputs["startAt"] = state ? state.startAt : undefined;
            resourceInputs["token"] = state ? state.token : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
            resourceInputs["updatedAt"] = state ? state.updatedAt : undefined;
            resourceInputs["updatedBy"] = state ? state.updatedBy : undefined;
        } else {
            const args = argsOrState as ApiTokenArgs | undefined;
            if ((!args || args.roles === undefined) && !opts.urn) {
                throw new Error("Missing required property 'roles'");
            }
            if ((!args || args.type === undefined) && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["expiryPeriodInDays"] = args ? args.expiryPeriodInDays : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["roles"] = args ? args.roles : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["createdBy"] = undefined /*out*/;
            resourceInputs["endAt"] = undefined /*out*/;
            resourceInputs["lastUsedAt"] = undefined /*out*/;
            resourceInputs["shortToken"] = undefined /*out*/;
            resourceInputs["startAt"] = undefined /*out*/;
            resourceInputs["token"] = undefined /*out*/;
            resourceInputs["updatedAt"] = undefined /*out*/;
            resourceInputs["updatedBy"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["token"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(ApiToken.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ApiToken resources.
 */
export interface ApiTokenState {
    /**
     * API Token creation timestamp
     */
    createdAt?: pulumi.Input<string>;
    /**
     * API Token creator
     */
    createdBy?: pulumi.Input<inputs.ApiTokenCreatedBy>;
    /**
     * API Token description
     */
    description?: pulumi.Input<string>;
    /**
     * time when the API token will expire in UTC
     */
    endAt?: pulumi.Input<string>;
    /**
     * API Token expiry period in days
     */
    expiryPeriodInDays?: pulumi.Input<number>;
    /**
     * API Token last used timestamp
     */
    lastUsedAt?: pulumi.Input<string>;
    /**
     * API Token name
     */
    name?: pulumi.Input<string>;
    /**
     * The roles assigned to the API Token
     */
    roles?: pulumi.Input<pulumi.Input<inputs.ApiTokenRole>[]>;
    /**
     * API Token short token
     */
    shortToken?: pulumi.Input<string>;
    /**
     * time when the API token will become valid in UTC
     */
    startAt?: pulumi.Input<string>;
    token?: pulumi.Input<string>;
    /**
     * API Token type - if changing this value, the API Token will be recreated with the new type
     */
    type?: pulumi.Input<string>;
    /**
     * API Token last updated timestamp
     */
    updatedAt?: pulumi.Input<string>;
    /**
     * API Token updater
     */
    updatedBy?: pulumi.Input<inputs.ApiTokenUpdatedBy>;
}

/**
 * The set of arguments for constructing a ApiToken resource.
 */
export interface ApiTokenArgs {
    /**
     * API Token description
     */
    description?: pulumi.Input<string>;
    /**
     * API Token expiry period in days
     */
    expiryPeriodInDays?: pulumi.Input<number>;
    /**
     * API Token name
     */
    name?: pulumi.Input<string>;
    /**
     * The roles assigned to the API Token
     */
    roles: pulumi.Input<pulumi.Input<inputs.ApiTokenRole>[]>;
    /**
     * API Token type - if changing this value, the API Token will be recreated with the new type
     */
    type: pulumi.Input<string>;
}
