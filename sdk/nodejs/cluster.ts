// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * A cluster within an organization. An Astro cluster is a Kubernetes cluster that hosts the infrastructure required to run Deployments.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as astronomer from "@ryan-pip/pulumi_astronomer";
 *
 * const dedicated = new astronomer.Workspace("dedicated", {
 *     cicdEnforcedDefault: true,
 *     description: "Workspace that demos a dedicated deployment set up",
 * });
 * const awsDedicated = new astronomer.Cluster("awsDedicated", {
 *     cloudProvider: "AWS",
 *     region: "us-east-1",
 *     type: "DEDICATED",
 *     vpcSubnetRange: "172.20.0.0/20",
 *     k8sTags: [],
 *     nodePools: [],
 *     workspaceIds: [dedicated.id],
 * });
 * ```
 */
export class Cluster extends pulumi.CustomResource {
    /**
     * Get an existing Cluster resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ClusterState, opts?: pulumi.CustomResourceOptions): Cluster {
        return new Cluster(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'astronomer:index/cluster:Cluster';

    /**
     * Returns true if the given object is an instance of Cluster.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Cluster {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Cluster.__pulumiType;
    }

    /**
     * The cluster's cloud provider.
     */
    public readonly cloudProvider!: pulumi.Output<string>;
    /**
     * The type of database instance that is used for the cluster. Required for Hybrid clusters.
     */
    public readonly dbInstanceType!: pulumi.Output<string>;
    /**
     * Whether the cluster is limited.
     */
    public /*out*/ readonly isLimited!: pulumi.Output<boolean>;
    /**
     * The Kubernetes tags in the cluster.
     */
    public readonly k8sTags!: pulumi.Output<outputs.ClusterK8sTag[] | undefined>;
    /**
     * The cluster's metadata.
     */
    public /*out*/ readonly metadata!: pulumi.Output<outputs.ClusterMetadata>;
    /**
     * The name of the node pool.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The list of node pools to create in the cluster.
     */
    public readonly nodePools!: pulumi.Output<outputs.ClusterNodePool[] | undefined>;
    /**
     * The organization this cluster is associated with.
     */
    public /*out*/ readonly organizationId!: pulumi.Output<string>;
    /**
     * The subnet range for Pods. For GCP clusters only.
     */
    public readonly podSubnetRange!: pulumi.Output<string | undefined>;
    /**
     * The provider account ID. Required for Hybrid clusters.
     */
    public readonly providerAccount!: pulumi.Output<string>;
    /**
     * The cluster's region.
     */
    public readonly region!: pulumi.Output<string>;
    /**
     * The service peering range. For GCP clusters only.
     */
    public readonly servicePeeringRange!: pulumi.Output<string | undefined>;
    /**
     * The service subnet range. For GCP clusters only.
     */
    public readonly serviceSubnetRange!: pulumi.Output<string | undefined>;
    /**
     * The tenant ID. For Azure clusters only.
     */
    public readonly tenantId!: pulumi.Output<string>;
    /**
     * The cluster's type.
     */
    public readonly type!: pulumi.Output<string>;
    /**
     * The VPC subnet range.
     */
    public readonly vpcSubnetRange!: pulumi.Output<string>;
    /**
     * The list of Workspaces that are authorized to the cluster.
     */
    public readonly workspaceIds!: pulumi.Output<string[]>;

    /**
     * Create a Cluster resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ClusterArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ClusterArgs | ClusterState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ClusterState | undefined;
            resourceInputs["cloudProvider"] = state ? state.cloudProvider : undefined;
            resourceInputs["dbInstanceType"] = state ? state.dbInstanceType : undefined;
            resourceInputs["isLimited"] = state ? state.isLimited : undefined;
            resourceInputs["k8sTags"] = state ? state.k8sTags : undefined;
            resourceInputs["metadata"] = state ? state.metadata : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["nodePools"] = state ? state.nodePools : undefined;
            resourceInputs["organizationId"] = state ? state.organizationId : undefined;
            resourceInputs["podSubnetRange"] = state ? state.podSubnetRange : undefined;
            resourceInputs["providerAccount"] = state ? state.providerAccount : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
            resourceInputs["servicePeeringRange"] = state ? state.servicePeeringRange : undefined;
            resourceInputs["serviceSubnetRange"] = state ? state.serviceSubnetRange : undefined;
            resourceInputs["tenantId"] = state ? state.tenantId : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
            resourceInputs["vpcSubnetRange"] = state ? state.vpcSubnetRange : undefined;
            resourceInputs["workspaceIds"] = state ? state.workspaceIds : undefined;
        } else {
            const args = argsOrState as ClusterArgs | undefined;
            if ((!args || args.cloudProvider === undefined) && !opts.urn) {
                throw new Error("Missing required property 'cloudProvider'");
            }
            if ((!args || args.region === undefined) && !opts.urn) {
                throw new Error("Missing required property 'region'");
            }
            if ((!args || args.type === undefined) && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            if ((!args || args.vpcSubnetRange === undefined) && !opts.urn) {
                throw new Error("Missing required property 'vpcSubnetRange'");
            }
            if ((!args || args.workspaceIds === undefined) && !opts.urn) {
                throw new Error("Missing required property 'workspaceIds'");
            }
            resourceInputs["cloudProvider"] = args ? args.cloudProvider : undefined;
            resourceInputs["dbInstanceType"] = args ? args.dbInstanceType : undefined;
            resourceInputs["k8sTags"] = args ? args.k8sTags : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["nodePools"] = args ? args.nodePools : undefined;
            resourceInputs["podSubnetRange"] = args ? args.podSubnetRange : undefined;
            resourceInputs["providerAccount"] = args ? args.providerAccount : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
            resourceInputs["servicePeeringRange"] = args ? args.servicePeeringRange : undefined;
            resourceInputs["serviceSubnetRange"] = args ? args.serviceSubnetRange : undefined;
            resourceInputs["tenantId"] = args ? args.tenantId : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["vpcSubnetRange"] = args ? args.vpcSubnetRange : undefined;
            resourceInputs["workspaceIds"] = args ? args.workspaceIds : undefined;
            resourceInputs["isLimited"] = undefined /*out*/;
            resourceInputs["metadata"] = undefined /*out*/;
            resourceInputs["organizationId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Cluster.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Cluster resources.
 */
export interface ClusterState {
    /**
     * The cluster's cloud provider.
     */
    cloudProvider?: pulumi.Input<string>;
    /**
     * The type of database instance that is used for the cluster. Required for Hybrid clusters.
     */
    dbInstanceType?: pulumi.Input<string>;
    /**
     * Whether the cluster is limited.
     */
    isLimited?: pulumi.Input<boolean>;
    /**
     * The Kubernetes tags in the cluster.
     */
    k8sTags?: pulumi.Input<pulumi.Input<inputs.ClusterK8sTag>[]>;
    /**
     * The cluster's metadata.
     */
    metadata?: pulumi.Input<inputs.ClusterMetadata>;
    /**
     * The name of the node pool.
     */
    name?: pulumi.Input<string>;
    /**
     * The list of node pools to create in the cluster.
     */
    nodePools?: pulumi.Input<pulumi.Input<inputs.ClusterNodePool>[]>;
    /**
     * The organization this cluster is associated with.
     */
    organizationId?: pulumi.Input<string>;
    /**
     * The subnet range for Pods. For GCP clusters only.
     */
    podSubnetRange?: pulumi.Input<string>;
    /**
     * The provider account ID. Required for Hybrid clusters.
     */
    providerAccount?: pulumi.Input<string>;
    /**
     * The cluster's region.
     */
    region?: pulumi.Input<string>;
    /**
     * The service peering range. For GCP clusters only.
     */
    servicePeeringRange?: pulumi.Input<string>;
    /**
     * The service subnet range. For GCP clusters only.
     */
    serviceSubnetRange?: pulumi.Input<string>;
    /**
     * The tenant ID. For Azure clusters only.
     */
    tenantId?: pulumi.Input<string>;
    /**
     * The cluster's type.
     */
    type?: pulumi.Input<string>;
    /**
     * The VPC subnet range.
     */
    vpcSubnetRange?: pulumi.Input<string>;
    /**
     * The list of Workspaces that are authorized to the cluster.
     */
    workspaceIds?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a Cluster resource.
 */
export interface ClusterArgs {
    /**
     * The cluster's cloud provider.
     */
    cloudProvider: pulumi.Input<string>;
    /**
     * The type of database instance that is used for the cluster. Required for Hybrid clusters.
     */
    dbInstanceType?: pulumi.Input<string>;
    /**
     * The Kubernetes tags in the cluster.
     */
    k8sTags?: pulumi.Input<pulumi.Input<inputs.ClusterK8sTag>[]>;
    /**
     * The name of the node pool.
     */
    name?: pulumi.Input<string>;
    /**
     * The list of node pools to create in the cluster.
     */
    nodePools?: pulumi.Input<pulumi.Input<inputs.ClusterNodePool>[]>;
    /**
     * The subnet range for Pods. For GCP clusters only.
     */
    podSubnetRange?: pulumi.Input<string>;
    /**
     * The provider account ID. Required for Hybrid clusters.
     */
    providerAccount?: pulumi.Input<string>;
    /**
     * The cluster's region.
     */
    region: pulumi.Input<string>;
    /**
     * The service peering range. For GCP clusters only.
     */
    servicePeeringRange?: pulumi.Input<string>;
    /**
     * The service subnet range. For GCP clusters only.
     */
    serviceSubnetRange?: pulumi.Input<string>;
    /**
     * The tenant ID. For Azure clusters only.
     */
    tenantId?: pulumi.Input<string>;
    /**
     * The cluster's type.
     */
    type: pulumi.Input<string>;
    /**
     * The VPC subnet range.
     */
    vpcSubnetRange: pulumi.Input<string>;
    /**
     * The list of Workspaces that are authorized to the cluster.
     */
    workspaceIds: pulumi.Input<pulumi.Input<string>[]>;
}
