// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * An Astro Deployment is an Airflow environment that is powered by all core Airflow components.
 */
export class Deployment extends pulumi.CustomResource {
    /**
     * Get an existing Deployment resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DeploymentState, opts?: pulumi.CustomResourceOptions): Deployment {
        return new Deployment(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'astronomer:index/deployment:Deployment';

    /**
     * Returns true if the given object is an instance of Deployment.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Deployment {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Deployment.__pulumiType;
    }

    /**
     * Deployment's Astro Runtime version.
     */
    public readonly astroRuntimeVersion!: pulumi.Output<string | undefined>;
    /**
     * The cloud provider for the Deployment's cluster. Optional if `ClusterId` is specified.
     */
    public readonly cloudProvider!: pulumi.Output<string>;
    /**
     * The ID of the cluster where the Deployment will be created.
     */
    public readonly clusterId!: pulumi.Output<string | undefined>;
    /**
     * The default CPU resource usage for a worker Pod when running the Kubernetes executor or KubernetesPodOperator. Units are in number of CPU cores.
     */
    public readonly defaultTaskPodCpu!: pulumi.Output<string>;
    /**
     * The default memory resource usage for a worker Pod when running the Kubernetes executor or KubernetesPodOperator. Units are in `Gi`. This value must always be twice the value of `DefaultTaskPodCpu`.
     */
    public readonly defaultTaskPodMemory!: pulumi.Output<string>;
    /**
     * The Deployment's description.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * List of environment variables to add to the Deployment.
     */
    public readonly environmentVariables!: pulumi.Output<outputs.DeploymentEnvironmentVariable[] | undefined>;
    /**
     * The Deployment's executor type.
     */
    public readonly executor!: pulumi.Output<string>;
    /**
     * Whether the Deployment requires that all deploys are made through CI/CD.
     */
    public readonly isCicdEnforced!: pulumi.Output<boolean>;
    /**
     * Whether the Deployment has DAG deploys enabled.
     */
    public readonly isDagDeployEnabled!: pulumi.Output<boolean>;
    /**
     * Whether the Deployment is in development mode.
     */
    public readonly isDevelopmentMode!: pulumi.Output<boolean>;
    /**
     * Whether the Deployment is configured for high availability. If `true`, multiple scheduler pods will be online.
     */
    public readonly isHighAvailability!: pulumi.Output<boolean>;
    /**
     * The Deployment's name.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The region to host the Deployment in. Optional if `ClusterId` is specified.
     */
    public readonly region!: pulumi.Output<string | undefined>;
    /**
     * The CPU quota for worker Pods when running the Kubernetes executor or KubernetesPodOperator. If current CPU usage across all workers exceeds the quota, no new worker Pods can be scheduled. Units are in number of CPU cores.
     */
    public readonly resourceQuotaCpu!: pulumi.Output<string>;
    /**
     * The memory quota for worker Pods when running the Kubernetes executor or KubernetesPodOperator. If current memory usage across all workers exceeds the quota, no new worker Pods can be scheduled. Units are in `Gi`. This value must always be twice the value of `ResourceQuotaCpu`.
     */
    public readonly resourceQuotaMemory!: pulumi.Output<string>;
    /**
     * The size of the scheduler pod.
     */
    public readonly schedulerSize!: pulumi.Output<string>;
    /**
     * The node pool ID for the task pods. For KUBERNETES executor only.
     */
    public readonly taskPodNodePoolId!: pulumi.Output<string | undefined>;
    /**
     * The type of the Deployment.
     */
    public readonly type!: pulumi.Output<string>;
    /**
     * The list of worker queues configured for the Deployment. Applies only when `Executor` is `CELERY`. At least 1 worker queue is needed. All Deployments need at least 1 worker queue called `default`.
     */
    public readonly workerQueues!: pulumi.Output<outputs.DeploymentWorkerQueue[] | undefined>;
    /**
     * The Deployment's workload identity.
     */
    public /*out*/ readonly workloadIdentity!: pulumi.Output<string>;
    /**
     * The ID of the workspace to which the Deployment belongs.
     */
    public readonly workspaceId!: pulumi.Output<string>;

    /**
     * Create a Deployment resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DeploymentArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DeploymentArgs | DeploymentState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DeploymentState | undefined;
            resourceInputs["astroRuntimeVersion"] = state ? state.astroRuntimeVersion : undefined;
            resourceInputs["cloudProvider"] = state ? state.cloudProvider : undefined;
            resourceInputs["clusterId"] = state ? state.clusterId : undefined;
            resourceInputs["defaultTaskPodCpu"] = state ? state.defaultTaskPodCpu : undefined;
            resourceInputs["defaultTaskPodMemory"] = state ? state.defaultTaskPodMemory : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["environmentVariables"] = state ? state.environmentVariables : undefined;
            resourceInputs["executor"] = state ? state.executor : undefined;
            resourceInputs["isCicdEnforced"] = state ? state.isCicdEnforced : undefined;
            resourceInputs["isDagDeployEnabled"] = state ? state.isDagDeployEnabled : undefined;
            resourceInputs["isDevelopmentMode"] = state ? state.isDevelopmentMode : undefined;
            resourceInputs["isHighAvailability"] = state ? state.isHighAvailability : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
            resourceInputs["resourceQuotaCpu"] = state ? state.resourceQuotaCpu : undefined;
            resourceInputs["resourceQuotaMemory"] = state ? state.resourceQuotaMemory : undefined;
            resourceInputs["schedulerSize"] = state ? state.schedulerSize : undefined;
            resourceInputs["taskPodNodePoolId"] = state ? state.taskPodNodePoolId : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
            resourceInputs["workerQueues"] = state ? state.workerQueues : undefined;
            resourceInputs["workloadIdentity"] = state ? state.workloadIdentity : undefined;
            resourceInputs["workspaceId"] = state ? state.workspaceId : undefined;
        } else {
            const args = argsOrState as DeploymentArgs | undefined;
            if ((!args || args.defaultTaskPodCpu === undefined) && !opts.urn) {
                throw new Error("Missing required property 'defaultTaskPodCpu'");
            }
            if ((!args || args.defaultTaskPodMemory === undefined) && !opts.urn) {
                throw new Error("Missing required property 'defaultTaskPodMemory'");
            }
            if ((!args || args.executor === undefined) && !opts.urn) {
                throw new Error("Missing required property 'executor'");
            }
            if ((!args || args.isCicdEnforced === undefined) && !opts.urn) {
                throw new Error("Missing required property 'isCicdEnforced'");
            }
            if ((!args || args.isDagDeployEnabled === undefined) && !opts.urn) {
                throw new Error("Missing required property 'isDagDeployEnabled'");
            }
            if ((!args || args.isDevelopmentMode === undefined) && !opts.urn) {
                throw new Error("Missing required property 'isDevelopmentMode'");
            }
            if ((!args || args.isHighAvailability === undefined) && !opts.urn) {
                throw new Error("Missing required property 'isHighAvailability'");
            }
            if ((!args || args.resourceQuotaCpu === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceQuotaCpu'");
            }
            if ((!args || args.resourceQuotaMemory === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceQuotaMemory'");
            }
            if ((!args || args.schedulerSize === undefined) && !opts.urn) {
                throw new Error("Missing required property 'schedulerSize'");
            }
            if ((!args || args.type === undefined) && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            if ((!args || args.workspaceId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'workspaceId'");
            }
            resourceInputs["astroRuntimeVersion"] = args ? args.astroRuntimeVersion : undefined;
            resourceInputs["cloudProvider"] = args ? args.cloudProvider : undefined;
            resourceInputs["clusterId"] = args ? args.clusterId : undefined;
            resourceInputs["defaultTaskPodCpu"] = args ? args.defaultTaskPodCpu : undefined;
            resourceInputs["defaultTaskPodMemory"] = args ? args.defaultTaskPodMemory : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["environmentVariables"] = args ? args.environmentVariables : undefined;
            resourceInputs["executor"] = args ? args.executor : undefined;
            resourceInputs["isCicdEnforced"] = args ? args.isCicdEnforced : undefined;
            resourceInputs["isDagDeployEnabled"] = args ? args.isDagDeployEnabled : undefined;
            resourceInputs["isDevelopmentMode"] = args ? args.isDevelopmentMode : undefined;
            resourceInputs["isHighAvailability"] = args ? args.isHighAvailability : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
            resourceInputs["resourceQuotaCpu"] = args ? args.resourceQuotaCpu : undefined;
            resourceInputs["resourceQuotaMemory"] = args ? args.resourceQuotaMemory : undefined;
            resourceInputs["schedulerSize"] = args ? args.schedulerSize : undefined;
            resourceInputs["taskPodNodePoolId"] = args ? args.taskPodNodePoolId : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["workerQueues"] = args ? args.workerQueues : undefined;
            resourceInputs["workspaceId"] = args ? args.workspaceId : undefined;
            resourceInputs["workloadIdentity"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Deployment.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Deployment resources.
 */
export interface DeploymentState {
    /**
     * Deployment's Astro Runtime version.
     */
    astroRuntimeVersion?: pulumi.Input<string>;
    /**
     * The cloud provider for the Deployment's cluster. Optional if `ClusterId` is specified.
     */
    cloudProvider?: pulumi.Input<string>;
    /**
     * The ID of the cluster where the Deployment will be created.
     */
    clusterId?: pulumi.Input<string>;
    /**
     * The default CPU resource usage for a worker Pod when running the Kubernetes executor or KubernetesPodOperator. Units are in number of CPU cores.
     */
    defaultTaskPodCpu?: pulumi.Input<string>;
    /**
     * The default memory resource usage for a worker Pod when running the Kubernetes executor or KubernetesPodOperator. Units are in `Gi`. This value must always be twice the value of `DefaultTaskPodCpu`.
     */
    defaultTaskPodMemory?: pulumi.Input<string>;
    /**
     * The Deployment's description.
     */
    description?: pulumi.Input<string>;
    /**
     * List of environment variables to add to the Deployment.
     */
    environmentVariables?: pulumi.Input<pulumi.Input<inputs.DeploymentEnvironmentVariable>[]>;
    /**
     * The Deployment's executor type.
     */
    executor?: pulumi.Input<string>;
    /**
     * Whether the Deployment requires that all deploys are made through CI/CD.
     */
    isCicdEnforced?: pulumi.Input<boolean>;
    /**
     * Whether the Deployment has DAG deploys enabled.
     */
    isDagDeployEnabled?: pulumi.Input<boolean>;
    /**
     * Whether the Deployment is in development mode.
     */
    isDevelopmentMode?: pulumi.Input<boolean>;
    /**
     * Whether the Deployment is configured for high availability. If `true`, multiple scheduler pods will be online.
     */
    isHighAvailability?: pulumi.Input<boolean>;
    /**
     * The Deployment's name.
     */
    name?: pulumi.Input<string>;
    /**
     * The region to host the Deployment in. Optional if `ClusterId` is specified.
     */
    region?: pulumi.Input<string>;
    /**
     * The CPU quota for worker Pods when running the Kubernetes executor or KubernetesPodOperator. If current CPU usage across all workers exceeds the quota, no new worker Pods can be scheduled. Units are in number of CPU cores.
     */
    resourceQuotaCpu?: pulumi.Input<string>;
    /**
     * The memory quota for worker Pods when running the Kubernetes executor or KubernetesPodOperator. If current memory usage across all workers exceeds the quota, no new worker Pods can be scheduled. Units are in `Gi`. This value must always be twice the value of `ResourceQuotaCpu`.
     */
    resourceQuotaMemory?: pulumi.Input<string>;
    /**
     * The size of the scheduler pod.
     */
    schedulerSize?: pulumi.Input<string>;
    /**
     * The node pool ID for the task pods. For KUBERNETES executor only.
     */
    taskPodNodePoolId?: pulumi.Input<string>;
    /**
     * The type of the Deployment.
     */
    type?: pulumi.Input<string>;
    /**
     * The list of worker queues configured for the Deployment. Applies only when `Executor` is `CELERY`. At least 1 worker queue is needed. All Deployments need at least 1 worker queue called `default`.
     */
    workerQueues?: pulumi.Input<pulumi.Input<inputs.DeploymentWorkerQueue>[]>;
    /**
     * The Deployment's workload identity.
     */
    workloadIdentity?: pulumi.Input<string>;
    /**
     * The ID of the workspace to which the Deployment belongs.
     */
    workspaceId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Deployment resource.
 */
export interface DeploymentArgs {
    /**
     * Deployment's Astro Runtime version.
     */
    astroRuntimeVersion?: pulumi.Input<string>;
    /**
     * The cloud provider for the Deployment's cluster. Optional if `ClusterId` is specified.
     */
    cloudProvider?: pulumi.Input<string>;
    /**
     * The ID of the cluster where the Deployment will be created.
     */
    clusterId?: pulumi.Input<string>;
    /**
     * The default CPU resource usage for a worker Pod when running the Kubernetes executor or KubernetesPodOperator. Units are in number of CPU cores.
     */
    defaultTaskPodCpu: pulumi.Input<string>;
    /**
     * The default memory resource usage for a worker Pod when running the Kubernetes executor or KubernetesPodOperator. Units are in `Gi`. This value must always be twice the value of `DefaultTaskPodCpu`.
     */
    defaultTaskPodMemory: pulumi.Input<string>;
    /**
     * The Deployment's description.
     */
    description?: pulumi.Input<string>;
    /**
     * List of environment variables to add to the Deployment.
     */
    environmentVariables?: pulumi.Input<pulumi.Input<inputs.DeploymentEnvironmentVariable>[]>;
    /**
     * The Deployment's executor type.
     */
    executor: pulumi.Input<string>;
    /**
     * Whether the Deployment requires that all deploys are made through CI/CD.
     */
    isCicdEnforced: pulumi.Input<boolean>;
    /**
     * Whether the Deployment has DAG deploys enabled.
     */
    isDagDeployEnabled: pulumi.Input<boolean>;
    /**
     * Whether the Deployment is in development mode.
     */
    isDevelopmentMode: pulumi.Input<boolean>;
    /**
     * Whether the Deployment is configured for high availability. If `true`, multiple scheduler pods will be online.
     */
    isHighAvailability: pulumi.Input<boolean>;
    /**
     * The Deployment's name.
     */
    name?: pulumi.Input<string>;
    /**
     * The region to host the Deployment in. Optional if `ClusterId` is specified.
     */
    region?: pulumi.Input<string>;
    /**
     * The CPU quota for worker Pods when running the Kubernetes executor or KubernetesPodOperator. If current CPU usage across all workers exceeds the quota, no new worker Pods can be scheduled. Units are in number of CPU cores.
     */
    resourceQuotaCpu: pulumi.Input<string>;
    /**
     * The memory quota for worker Pods when running the Kubernetes executor or KubernetesPodOperator. If current memory usage across all workers exceeds the quota, no new worker Pods can be scheduled. Units are in `Gi`. This value must always be twice the value of `ResourceQuotaCpu`.
     */
    resourceQuotaMemory: pulumi.Input<string>;
    /**
     * The size of the scheduler pod.
     */
    schedulerSize: pulumi.Input<string>;
    /**
     * The node pool ID for the task pods. For KUBERNETES executor only.
     */
    taskPodNodePoolId?: pulumi.Input<string>;
    /**
     * The type of the Deployment.
     */
    type: pulumi.Input<string>;
    /**
     * The list of worker queues configured for the Deployment. Applies only when `Executor` is `CELERY`. At least 1 worker queue is needed. All Deployments need at least 1 worker queue called `default`.
     */
    workerQueues?: pulumi.Input<pulumi.Input<inputs.DeploymentWorkerQueue>[]>;
    /**
     * The ID of the workspace to which the Deployment belongs.
     */
    workspaceId: pulumi.Input<string>;
}
