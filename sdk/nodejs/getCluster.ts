// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Astronomer Cluster Data Source
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as astronomer from "@pulumi/astronomer";
 *
 * const importedCluster = astronomer.getCluster({
 *     id: "clqoclq8201pp01p0cbt77feb",
 * });
 * ```
 */
export function getCluster(args: GetClusterArgs, opts?: pulumi.InvokeOptions): Promise<GetClusterResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("astronomer:index/getCluster:getCluster", {
        "id": args.id,
    }, opts);
}

/**
 * A collection of arguments for invoking getCluster.
 */
export interface GetClusterArgs {
    /**
     * The cluster's identifier.
     */
    id: string;
}

/**
 * A collection of values returned by getCluster.
 */
export interface GetClusterResult {
    /**
     * The cluster's cloud provider.
     */
    readonly cloudProvider: string;
    /**
     * The type of database instance that is used for the cluster. Required for Hybrid clusters.
     */
    readonly dbInstanceType: string;
    /**
     * The cluster's identifier.
     */
    readonly id: string;
    /**
     * Whether the cluster is limited.
     */
    readonly isLimited: boolean;
    /**
     * The Kubernetes tags in the cluster.
     */
    readonly k8sTags: outputs.GetClusterK8sTag[];
    /**
     * The cluster's metadata.
     */
    readonly metadata: outputs.GetClusterMetadata;
    /**
     * The cluster's name.
     */
    readonly name: string;
    /**
     * The list of node pools to create in the cluster.
     */
    readonly nodePools: outputs.GetClusterNodePool[];
    /**
     * The organization this cluster is associated with.
     */
    readonly organizationId: string;
    /**
     * The subnet range for Pods. For GCP clusters only.
     */
    readonly podSubnetRange: string;
    /**
     * The provider account ID. Required for Hybrid clusters.
     */
    readonly providerAccount: string;
    /**
     * The cluster's region.
     */
    readonly region: string;
    /**
     * The service peering range. For GCP clusters only.
     */
    readonly servicePeeringRange: string;
    /**
     * The service subnet range. For GCP clusters only.
     */
    readonly serviceSubnetRange: string;
    /**
     * The tenant ID. For Azure clusters only.
     */
    readonly tenantId: string;
    /**
     * The cluster's type.
     */
    readonly type: string;
    /**
     * The VPC subnet range.
     */
    readonly vpcSubnetRange: string;
    /**
     * The list of Workspaces that are authorized to the cluster.
     */
    readonly workspaceIds: string[];
}
/**
 * Astronomer Cluster Data Source
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as astronomer from "@pulumi/astronomer";
 *
 * const importedCluster = astronomer.getCluster({
 *     id: "clqoclq8201pp01p0cbt77feb",
 * });
 * ```
 */
export function getClusterOutput(args: GetClusterOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetClusterResult> {
    return pulumi.output(args).apply((a: any) => getCluster(a, opts))
}

/**
 * A collection of arguments for invoking getCluster.
 */
export interface GetClusterOutputArgs {
    /**
     * The cluster's identifier.
     */
    id: pulumi.Input<string>;
}
