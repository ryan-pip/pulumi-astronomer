// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Deployment options data source
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as astronomer from "@pulumi/astronomer";
 *
 * const exampleDeploymentOptions = astronomer.getDeploymentOptions({});
 * const exampleWithDeploymentIdQueryParam = astronomer.getDeploymentOptions({
 *     deploymentId: "clozc036j01to01jrlgvueo8t",
 * });
 * const exampleWithDeploymentTypeQueryParam = astronomer.getDeploymentOptions({
 *     deploymentType: "DEDICATED",
 * });
 * const exampleWithExecutorQueryParam = astronomer.getDeploymentOptions({
 *     executor: "CELERY",
 * });
 * const exampleWithCloudProviderQueryParam = astronomer.getDeploymentOptions({
 *     cloudProvider: "AWS",
 * });
 * export const deploymentOptions = exampleDeploymentOptions;
 * ```
 */
export function getDeploymentOptions(args?: GetDeploymentOptionsArgs, opts?: pulumi.InvokeOptions): Promise<GetDeploymentOptionsResult> {
    args = args || {};
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("astronomer:index/getDeploymentOptions:getDeploymentOptions", {
        "cloudProvider": args.cloudProvider,
        "deploymentId": args.deploymentId,
        "deploymentType": args.deploymentType,
        "executor": args.executor,
    }, opts);
}

/**
 * A collection of arguments for invoking getDeploymentOptions.
 */
export interface GetDeploymentOptionsArgs {
    /**
     * Cloud provider
     */
    cloudProvider?: string;
    /**
     * Deployment ID
     */
    deploymentId?: string;
    /**
     * Deployment type
     */
    deploymentType?: string;
    /**
     * Executor
     */
    executor?: string;
}

/**
 * A collection of values returned by getDeploymentOptions.
 */
export interface GetDeploymentOptionsResult {
    /**
     * Cloud provider
     */
    readonly cloudProvider?: string;
    /**
     * Deployment ID
     */
    readonly deploymentId?: string;
    /**
     * Deployment type
     */
    readonly deploymentType?: string;
    /**
     * Executor
     */
    readonly executor?: string;
    /**
     * Available executors
     */
    readonly executors: string[];
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * Resource quota options
     */
    readonly resourceQuotas: outputs.GetDeploymentOptionsResourceQuotas;
    /**
     * Available Astro Runtime versions
     */
    readonly runtimeReleases: outputs.GetDeploymentOptionsRuntimeRelease[];
    /**
     * Available scheduler sizes
     */
    readonly schedulerMachines: outputs.GetDeploymentOptionsSchedulerMachine[];
    /**
     * Available worker machine types
     */
    readonly workerMachines: outputs.GetDeploymentOptionsWorkerMachine[];
    /**
     * Available worker queue options
     */
    readonly workerQueues: outputs.GetDeploymentOptionsWorkerQueues;
    /**
     * Available workload identity options
     */
    readonly workloadIdentityOptions: outputs.GetDeploymentOptionsWorkloadIdentityOption[];
}
/**
 * Deployment options data source
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as astronomer from "@pulumi/astronomer";
 *
 * const exampleDeploymentOptions = astronomer.getDeploymentOptions({});
 * const exampleWithDeploymentIdQueryParam = astronomer.getDeploymentOptions({
 *     deploymentId: "clozc036j01to01jrlgvueo8t",
 * });
 * const exampleWithDeploymentTypeQueryParam = astronomer.getDeploymentOptions({
 *     deploymentType: "DEDICATED",
 * });
 * const exampleWithExecutorQueryParam = astronomer.getDeploymentOptions({
 *     executor: "CELERY",
 * });
 * const exampleWithCloudProviderQueryParam = astronomer.getDeploymentOptions({
 *     cloudProvider: "AWS",
 * });
 * export const deploymentOptions = exampleDeploymentOptions;
 * ```
 */
export function getDeploymentOptionsOutput(args?: GetDeploymentOptionsOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetDeploymentOptionsResult> {
    args = args || {};
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("astronomer:index/getDeploymentOptions:getDeploymentOptions", {
        "cloudProvider": args.cloudProvider,
        "deploymentId": args.deploymentId,
        "deploymentType": args.deploymentType,
        "executor": args.executor,
    }, opts);
}

/**
 * A collection of arguments for invoking getDeploymentOptions.
 */
export interface GetDeploymentOptionsOutputArgs {
    /**
     * Cloud provider
     */
    cloudProvider?: pulumi.Input<string>;
    /**
     * Deployment ID
     */
    deploymentId?: pulumi.Input<string>;
    /**
     * Deployment type
     */
    deploymentType?: pulumi.Input<string>;
    /**
     * Executor
     */
    executor?: pulumi.Input<string>;
}
