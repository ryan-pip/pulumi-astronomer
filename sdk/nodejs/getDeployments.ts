// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Deployments data source
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as astronomer from "@pulumi/astronomer";
 *
 * const exampleDeployments = astronomer.getDeployments({});
 * const exampleDeploymentsFilterByNames = astronomer.getDeployments({
 *     names: ["my deployment"],
 * });
 * const exampleDeploymentsFilterByDeploymentIds = astronomer.getDeployments({
 *     deploymentIds: ["clozc036j01to01jrlgvueo8t"],
 * });
 * const exampleDeploymentsFilterByWorkspaceIds = astronomer.getDeployments({
 *     workspaceIds: ["clozc036j01to01jrlgvu798d"],
 * });
 * export const deployments = exampleDeployments;
 * ```
 */
export function getDeployments(args?: GetDeploymentsArgs, opts?: pulumi.InvokeOptions): Promise<GetDeploymentsResult> {
    args = args || {};
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("astronomer:index/getDeployments:getDeployments", {
        "deploymentIds": args.deploymentIds,
        "names": args.names,
        "workspaceIds": args.workspaceIds,
    }, opts);
}

/**
 * A collection of arguments for invoking getDeployments.
 */
export interface GetDeploymentsArgs {
    deploymentIds?: string[];
    names?: string[];
    workspaceIds?: string[];
}

/**
 * A collection of values returned by getDeployments.
 */
export interface GetDeploymentsResult {
    readonly deploymentIds?: string[];
    readonly deployments: outputs.GetDeploymentsDeployment[];
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    readonly names?: string[];
    readonly workspaceIds?: string[];
}
/**
 * Deployments data source
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as astronomer from "@pulumi/astronomer";
 *
 * const exampleDeployments = astronomer.getDeployments({});
 * const exampleDeploymentsFilterByNames = astronomer.getDeployments({
 *     names: ["my deployment"],
 * });
 * const exampleDeploymentsFilterByDeploymentIds = astronomer.getDeployments({
 *     deploymentIds: ["clozc036j01to01jrlgvueo8t"],
 * });
 * const exampleDeploymentsFilterByWorkspaceIds = astronomer.getDeployments({
 *     workspaceIds: ["clozc036j01to01jrlgvu798d"],
 * });
 * export const deployments = exampleDeployments;
 * ```
 */
export function getDeploymentsOutput(args?: GetDeploymentsOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetDeploymentsResult> {
    args = args || {};
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("astronomer:index/getDeployments:getDeployments", {
        "deploymentIds": args.deploymentIds,
        "names": args.names,
        "workspaceIds": args.workspaceIds,
    }, opts);
}

/**
 * A collection of arguments for invoking getDeployments.
 */
export interface GetDeploymentsOutputArgs {
    deploymentIds?: pulumi.Input<pulumi.Input<string>[]>;
    names?: pulumi.Input<pulumi.Input<string>[]>;
    workspaceIds?: pulumi.Input<pulumi.Input<string>[]>;
}
