// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Astronomer Organization Resource
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as astronomer from "@pulumi/astronomer";
 *
 * const test = astronomer.getOrganization({
 *     id: "abc123",
 * });
 * ```
 */
export function getOrganization(args: GetOrganizationArgs, opts?: pulumi.InvokeOptions): Promise<GetOrganizationResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("astronomer:index/getOrganization:getOrganization", {
        "id": args.id,
        "paymentMethod": args.paymentMethod,
    }, opts);
}

/**
 * A collection of arguments for invoking getOrganization.
 */
export interface GetOrganizationArgs {
    id: string;
    /**
     * Payment method (if set)
     */
    paymentMethod?: string;
}

/**
 * A collection of values returned by getOrganization.
 */
export interface GetOrganizationResult {
    /**
     * Billing email on file for the organization.
     */
    readonly billingEmail: string;
    /**
     * Timestamped string of when this organization was created
     */
    readonly createdAt: string;
    /**
     * Organization's unique identifier
     */
    readonly id: string;
    /**
     * Whether or not scim is enabled
     */
    readonly isScimEnabled: boolean;
    /**
     * List of managed domains (nested)
     */
    readonly managedDomains: outputs.GetOrganizationManagedDomain[];
    /**
     * Organization's name
     */
    readonly name: string;
    /**
     * Payment method (if set)
     */
    readonly paymentMethod?: string;
    /**
     * Type of astro product (e.g. hosted or hybrid)
     */
    readonly product: string;
    /**
     * Status of the organization
     */
    readonly status: string;
    /**
     * Type of support plan the organization has
     */
    readonly supportPlan: string;
    /**
     * When the trial expires, if organization is in a trial
     */
    readonly trialExpiresAt: string;
    /**
     * Last time the organization was updated
     */
    readonly updatedAt: string;
}
/**
 * Astronomer Organization Resource
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as astronomer from "@pulumi/astronomer";
 *
 * const test = astronomer.getOrganization({
 *     id: "abc123",
 * });
 * ```
 */
export function getOrganizationOutput(args: GetOrganizationOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetOrganizationResult> {
    return pulumi.output(args).apply((a: any) => getOrganization(a, opts))
}

/**
 * A collection of arguments for invoking getOrganization.
 */
export interface GetOrganizationOutputArgs {
    id: pulumi.Input<string>;
    /**
     * Payment method (if set)
     */
    paymentMethod?: pulumi.Input<string>;
}
