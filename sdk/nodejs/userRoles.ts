// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * User Roles resource
 */
export class UserRoles extends pulumi.CustomResource {
    /**
     * Get an existing UserRoles resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: UserRolesState, opts?: pulumi.CustomResourceOptions): UserRoles {
        return new UserRoles(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'astronomer:index/userRoles:UserRoles';

    /**
     * Returns true if the given object is an instance of UserRoles.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is UserRoles {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === UserRoles.__pulumiType;
    }

    /**
     * The roles to assign to the deployments
     */
    public readonly deploymentRoles!: pulumi.Output<outputs.UserRolesDeploymentRole[] | undefined>;
    /**
     * The role to assign to the organization
     */
    public readonly organizationRole!: pulumi.Output<string>;
    /**
     * The ID of the user to assign the roles to
     */
    public readonly userId!: pulumi.Output<string>;
    /**
     * The roles to assign to the workspaces
     */
    public readonly workspaceRoles!: pulumi.Output<outputs.UserRolesWorkspaceRole[] | undefined>;

    /**
     * Create a UserRoles resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: UserRolesArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: UserRolesArgs | UserRolesState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as UserRolesState | undefined;
            resourceInputs["deploymentRoles"] = state ? state.deploymentRoles : undefined;
            resourceInputs["organizationRole"] = state ? state.organizationRole : undefined;
            resourceInputs["userId"] = state ? state.userId : undefined;
            resourceInputs["workspaceRoles"] = state ? state.workspaceRoles : undefined;
        } else {
            const args = argsOrState as UserRolesArgs | undefined;
            if ((!args || args.organizationRole === undefined) && !opts.urn) {
                throw new Error("Missing required property 'organizationRole'");
            }
            if ((!args || args.userId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'userId'");
            }
            resourceInputs["deploymentRoles"] = args ? args.deploymentRoles : undefined;
            resourceInputs["organizationRole"] = args ? args.organizationRole : undefined;
            resourceInputs["userId"] = args ? args.userId : undefined;
            resourceInputs["workspaceRoles"] = args ? args.workspaceRoles : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(UserRoles.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering UserRoles resources.
 */
export interface UserRolesState {
    /**
     * The roles to assign to the deployments
     */
    deploymentRoles?: pulumi.Input<pulumi.Input<inputs.UserRolesDeploymentRole>[]>;
    /**
     * The role to assign to the organization
     */
    organizationRole?: pulumi.Input<string>;
    /**
     * The ID of the user to assign the roles to
     */
    userId?: pulumi.Input<string>;
    /**
     * The roles to assign to the workspaces
     */
    workspaceRoles?: pulumi.Input<pulumi.Input<inputs.UserRolesWorkspaceRole>[]>;
}

/**
 * The set of arguments for constructing a UserRoles resource.
 */
export interface UserRolesArgs {
    /**
     * The roles to assign to the deployments
     */
    deploymentRoles?: pulumi.Input<pulumi.Input<inputs.UserRolesDeploymentRole>[]>;
    /**
     * The role to assign to the organization
     */
    organizationRole: pulumi.Input<string>;
    /**
     * The ID of the user to assign the roles to
     */
    userId: pulumi.Input<string>;
    /**
     * The roles to assign to the workspaces
     */
    workspaceRoles?: pulumi.Input<pulumi.Input<inputs.UserRolesWorkspaceRole>[]>;
}
