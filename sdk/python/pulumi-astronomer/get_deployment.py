# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = [
    'GetDeploymentResult',
    'AwaitableGetDeploymentResult',
    'get_deployment',
    'get_deployment_output',
]

@pulumi.output_type
class GetDeploymentResult:
    """
    A collection of values returned by getDeployment.
    """
    def __init__(__self__, airflow_version=None, cloud_provider=None, cluster_id=None, cluster_name=None, description=None, id=None, is_cicd_enforced=None, name=None):
        if airflow_version and not isinstance(airflow_version, str):
            raise TypeError("Expected argument 'airflow_version' to be a str")
        pulumi.set(__self__, "airflow_version", airflow_version)
        if cloud_provider and not isinstance(cloud_provider, str):
            raise TypeError("Expected argument 'cloud_provider' to be a str")
        pulumi.set(__self__, "cloud_provider", cloud_provider)
        if cluster_id and not isinstance(cluster_id, str):
            raise TypeError("Expected argument 'cluster_id' to be a str")
        pulumi.set(__self__, "cluster_id", cluster_id)
        if cluster_name and not isinstance(cluster_name, str):
            raise TypeError("Expected argument 'cluster_name' to be a str")
        pulumi.set(__self__, "cluster_name", cluster_name)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if is_cicd_enforced and not isinstance(is_cicd_enforced, bool):
            raise TypeError("Expected argument 'is_cicd_enforced' to be a bool")
        pulumi.set(__self__, "is_cicd_enforced", is_cicd_enforced)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="airflowVersion")
    def airflow_version(self) -> str:
        """
        The Deployment's Astro Runtime version.
        """
        return pulumi.get(self, "airflow_version")

    @property
    @pulumi.getter(name="cloudProvider")
    def cloud_provider(self) -> str:
        """
        The cloud provider for the Deployment's cluster. Optional if `ClusterId` is specified.
        """
        return pulumi.get(self, "cloud_provider")

    @property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> str:
        """
        The ID of the cluster to which the Deployment will be created in. Optional if cloud provider and region is specified.
        """
        return pulumi.get(self, "cluster_id")

    @property
    @pulumi.getter(name="clusterName")
    def cluster_name(self) -> str:
        """
        Cluster Name
        """
        return pulumi.get(self, "cluster_name")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        The Deployment's description.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The Deployment's Identifier
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isCicdEnforced")
    def is_cicd_enforced(self) -> bool:
        """
        Whether the Deployment requires that all deploys are made through CI/CD.
        """
        return pulumi.get(self, "is_cicd_enforced")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The Deployment's name.
        """
        return pulumi.get(self, "name")


class AwaitableGetDeploymentResult(GetDeploymentResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetDeploymentResult(
            airflow_version=self.airflow_version,
            cloud_provider=self.cloud_provider,
            cluster_id=self.cluster_id,
            cluster_name=self.cluster_name,
            description=self.description,
            id=self.id,
            is_cicd_enforced=self.is_cicd_enforced,
            name=self.name)


def get_deployment(id: Optional[str] = None,
                   opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetDeploymentResult:
    """
    Astronomer Deployment Resource


    :param str id: The Deployment's Identifier
    """
    __args__ = dict()
    __args__['id'] = id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('astronomer:index/getDeployment:getDeployment', __args__, opts=opts, typ=GetDeploymentResult).value

    return AwaitableGetDeploymentResult(
        airflow_version=pulumi.get(__ret__, 'airflow_version'),
        cloud_provider=pulumi.get(__ret__, 'cloud_provider'),
        cluster_id=pulumi.get(__ret__, 'cluster_id'),
        cluster_name=pulumi.get(__ret__, 'cluster_name'),
        description=pulumi.get(__ret__, 'description'),
        id=pulumi.get(__ret__, 'id'),
        is_cicd_enforced=pulumi.get(__ret__, 'is_cicd_enforced'),
        name=pulumi.get(__ret__, 'name'))


@_utilities.lift_output_func(get_deployment)
def get_deployment_output(id: Optional[pulumi.Input[str]] = None,
                          opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetDeploymentResult]:
    """
    Astronomer Deployment Resource


    :param str id: The Deployment's Identifier
    """
    ...
