# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = [
    'ClusterK8sTag',
    'ClusterMetadata',
    'ClusterNodePool',
    'DeploymentEnvironmentVariable',
    'DeploymentWorkerQueue',
    'GetClusterK8sTagResult',
    'GetClusterMetadataResult',
    'GetClusterNodePoolResult',
    'GetOrganizationManagedDomainResult',
]

@pulumi.output_type
class ClusterK8sTag(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        """
        :param str key: The tag's key.
        :param str value: The tag's value.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        The tag's key.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The tag's value.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ClusterMetadata(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "externalIps":
            suggest = "external_ips"
        elif key == "oidcIssuerUrl":
            suggest = "oidc_issuer_url"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ClusterMetadata. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ClusterMetadata.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ClusterMetadata.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 external_ips: Optional[Sequence[str]] = None,
                 oidc_issuer_url: Optional[str] = None):
        if external_ips is not None:
            pulumi.set(__self__, "external_ips", external_ips)
        if oidc_issuer_url is not None:
            pulumi.set(__self__, "oidc_issuer_url", oidc_issuer_url)

    @property
    @pulumi.getter(name="externalIps")
    def external_ips(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "external_ips")

    @property
    @pulumi.getter(name="oidcIssuerUrl")
    def oidc_issuer_url(self) -> Optional[str]:
        return pulumi.get(self, "oidc_issuer_url")


@pulumi.output_type
class ClusterNodePool(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "maxNodeCount":
            suggest = "max_node_count"
        elif key == "nodeInstanceType":
            suggest = "node_instance_type"
        elif key == "isDefault":
            suggest = "is_default"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ClusterNodePool. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ClusterNodePool.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ClusterNodePool.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 max_node_count: int,
                 name: str,
                 node_instance_type: str,
                 is_default: Optional[bool] = None):
        """
        :param int max_node_count: The maximum number of nodes that can be created in the node pool.
        :param str name: The name of the node pool.
        :param str node_instance_type: The type of node instance that is used for the node pool.
        :param bool is_default: Whether the node pool is the default node pool of the cluster.
        """
        pulumi.set(__self__, "max_node_count", max_node_count)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "node_instance_type", node_instance_type)
        if is_default is not None:
            pulumi.set(__self__, "is_default", is_default)

    @property
    @pulumi.getter(name="maxNodeCount")
    def max_node_count(self) -> int:
        """
        The maximum number of nodes that can be created in the node pool.
        """
        return pulumi.get(self, "max_node_count")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the node pool.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="nodeInstanceType")
    def node_instance_type(self) -> str:
        """
        The type of node instance that is used for the node pool.
        """
        return pulumi.get(self, "node_instance_type")

    @property
    @pulumi.getter(name="isDefault")
    def is_default(self) -> Optional[bool]:
        """
        Whether the node pool is the default node pool of the cluster.
        """
        return pulumi.get(self, "is_default")


@pulumi.output_type
class DeploymentEnvironmentVariable(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "isSecret":
            suggest = "is_secret"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeploymentEnvironmentVariable. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeploymentEnvironmentVariable.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeploymentEnvironmentVariable.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 is_secret: bool,
                 key: str,
                 value: Optional[str] = None):
        """
        :param bool is_secret: Whether the environment variable is a secret.
        :param str key: The environment variable key, used to call the value in code.
        :param str value: The environment variable value.
        """
        pulumi.set(__self__, "is_secret", is_secret)
        pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="isSecret")
    def is_secret(self) -> bool:
        """
        Whether the environment variable is a secret.
        """
        return pulumi.get(self, "is_secret")

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        The environment variable key, used to call the value in code.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        The environment variable value.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class DeploymentWorkerQueue(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "astroMachine":
            suggest = "astro_machine"
        elif key == "isDefault":
            suggest = "is_default"
        elif key == "maxWorkerCount":
            suggest = "max_worker_count"
        elif key == "minWorkerCount":
            suggest = "min_worker_count"
        elif key == "workerConcurrency":
            suggest = "worker_concurrency"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeploymentWorkerQueue. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeploymentWorkerQueue.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeploymentWorkerQueue.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 astro_machine: str,
                 is_default: bool,
                 max_worker_count: int,
                 min_worker_count: int,
                 name: str,
                 worker_concurrency: int,
                 id: Optional[str] = None):
        pulumi.set(__self__, "astro_machine", astro_machine)
        pulumi.set(__self__, "is_default", is_default)
        pulumi.set(__self__, "max_worker_count", max_worker_count)
        pulumi.set(__self__, "min_worker_count", min_worker_count)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "worker_concurrency", worker_concurrency)
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter(name="astroMachine")
    def astro_machine(self) -> str:
        return pulumi.get(self, "astro_machine")

    @property
    @pulumi.getter(name="isDefault")
    def is_default(self) -> bool:
        return pulumi.get(self, "is_default")

    @property
    @pulumi.getter(name="maxWorkerCount")
    def max_worker_count(self) -> int:
        return pulumi.get(self, "max_worker_count")

    @property
    @pulumi.getter(name="minWorkerCount")
    def min_worker_count(self) -> int:
        return pulumi.get(self, "min_worker_count")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="workerConcurrency")
    def worker_concurrency(self) -> int:
        return pulumi.get(self, "worker_concurrency")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")


@pulumi.output_type
class GetClusterK8sTagResult(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        """
        :param str key: The tag's key.
        :param str value: The tag's value.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        The tag's key.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The tag's value.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetClusterMetadataResult(dict):
    def __init__(__self__, *,
                 external_ips: Optional[Sequence[str]] = None,
                 oidc_issuer_url: Optional[str] = None):
        if external_ips is not None:
            pulumi.set(__self__, "external_ips", external_ips)
        if oidc_issuer_url is not None:
            pulumi.set(__self__, "oidc_issuer_url", oidc_issuer_url)

    @property
    @pulumi.getter(name="externalIps")
    def external_ips(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "external_ips")

    @property
    @pulumi.getter(name="oidcIssuerUrl")
    def oidc_issuer_url(self) -> Optional[str]:
        return pulumi.get(self, "oidc_issuer_url")


@pulumi.output_type
class GetClusterNodePoolResult(dict):
    def __init__(__self__, *,
                 max_node_count: int,
                 name: str,
                 node_instance_type: str,
                 is_default: Optional[bool] = None):
        """
        :param int max_node_count: The maximum number of nodes that can be created in the node pool.
        :param str name: The name of the node pool.
        :param str node_instance_type: The type of node instance that is used for the node pool.
        :param bool is_default: Whether the node pool is the default node pool of the cluster.
        """
        pulumi.set(__self__, "max_node_count", max_node_count)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "node_instance_type", node_instance_type)
        if is_default is not None:
            pulumi.set(__self__, "is_default", is_default)

    @property
    @pulumi.getter(name="maxNodeCount")
    def max_node_count(self) -> int:
        """
        The maximum number of nodes that can be created in the node pool.
        """
        return pulumi.get(self, "max_node_count")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the node pool.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="nodeInstanceType")
    def node_instance_type(self) -> str:
        """
        The type of node instance that is used for the node pool.
        """
        return pulumi.get(self, "node_instance_type")

    @property
    @pulumi.getter(name="isDefault")
    def is_default(self) -> Optional[bool]:
        """
        Whether the node pool is the default node pool of the cluster.
        """
        return pulumi.get(self, "is_default")


@pulumi.output_type
class GetOrganizationManagedDomainResult(dict):
    def __init__(__self__, *,
                 created_at: str,
                 enforced_logins: Sequence[str],
                 id: bool,
                 name: str,
                 status: str,
                 updated_at: str):
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "enforced_logins", enforced_logins)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "updated_at", updated_at)

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> str:
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter(name="enforcedLogins")
    def enforced_logins(self) -> Sequence[str]:
        return pulumi.get(self, "enforced_logins")

    @property
    @pulumi.getter
    def id(self) -> bool:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def status(self) -> str:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> str:
        return pulumi.get(self, "updated_at")


