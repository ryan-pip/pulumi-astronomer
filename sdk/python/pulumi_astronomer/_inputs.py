# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = [
    'ApiTokenCreatedByArgs',
    'ApiTokenRoleArgs',
    'ApiTokenUpdatedByArgs',
    'ClusterHealthStatusArgs',
    'ClusterHealthStatusDetailArgs',
    'ClusterMetadataArgs',
    'ClusterNodePoolArgs',
    'ClusterTimeoutsArgs',
    'DeploymentCreatedByArgs',
    'DeploymentEnvironmentVariableArgs',
    'DeploymentScalingSpecArgs',
    'DeploymentScalingSpecHibernationSpecArgs',
    'DeploymentScalingSpecHibernationSpecOverrideArgs',
    'DeploymentScalingSpecHibernationSpecScheduleArgs',
    'DeploymentScalingStatusArgs',
    'DeploymentScalingStatusHibernationStatusArgs',
    'DeploymentUpdatedByArgs',
    'DeploymentWorkerQueueArgs',
    'TeamCreatedByArgs',
    'TeamDeploymentRoleArgs',
    'TeamRolesDeploymentRoleArgs',
    'TeamRolesWorkspaceRoleArgs',
    'TeamUpdatedByArgs',
    'TeamWorkspaceRoleArgs',
    'UserInviteInviteeArgs',
    'UserInviteInviterArgs',
    'UserRolesDeploymentRoleArgs',
    'UserRolesWorkspaceRoleArgs',
    'WorkspaceCreatedByArgs',
    'WorkspaceUpdatedByArgs',
]

@pulumi.input_type
class ApiTokenCreatedByArgs:
    def __init__(__self__, *,
                 api_token_name: Optional[pulumi.Input[str]] = None,
                 avatar_url: Optional[pulumi.Input[str]] = None,
                 full_name: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 subject_type: Optional[pulumi.Input[str]] = None,
                 username: Optional[pulumi.Input[str]] = None):
        if api_token_name is not None:
            pulumi.set(__self__, "api_token_name", api_token_name)
        if avatar_url is not None:
            pulumi.set(__self__, "avatar_url", avatar_url)
        if full_name is not None:
            pulumi.set(__self__, "full_name", full_name)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if subject_type is not None:
            pulumi.set(__self__, "subject_type", subject_type)
        if username is not None:
            pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter(name="apiTokenName")
    def api_token_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "api_token_name")

    @api_token_name.setter
    def api_token_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "api_token_name", value)

    @property
    @pulumi.getter(name="avatarUrl")
    def avatar_url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "avatar_url")

    @avatar_url.setter
    def avatar_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "avatar_url", value)

    @property
    @pulumi.getter(name="fullName")
    def full_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "full_name")

    @full_name.setter
    def full_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "full_name", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="subjectType")
    def subject_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "subject_type")

    @subject_type.setter
    def subject_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subject_type", value)

    @property
    @pulumi.getter
    def username(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "username", value)


@pulumi.input_type
class ApiTokenRoleArgs:
    def __init__(__self__, *,
                 entity_id: pulumi.Input[str],
                 entity_type: pulumi.Input[str],
                 role: pulumi.Input[str]):
        """
        :param pulumi.Input[str] entity_id: The ID of the entity to assign the role to
        :param pulumi.Input[str] entity_type: The type of entity to assign the role to
        :param pulumi.Input[str] role: The role to assign to the entity
        """
        pulumi.set(__self__, "entity_id", entity_id)
        pulumi.set(__self__, "entity_type", entity_type)
        pulumi.set(__self__, "role", role)

    @property
    @pulumi.getter(name="entityId")
    def entity_id(self) -> pulumi.Input[str]:
        """
        The ID of the entity to assign the role to
        """
        return pulumi.get(self, "entity_id")

    @entity_id.setter
    def entity_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "entity_id", value)

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> pulumi.Input[str]:
        """
        The type of entity to assign the role to
        """
        return pulumi.get(self, "entity_type")

    @entity_type.setter
    def entity_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "entity_type", value)

    @property
    @pulumi.getter
    def role(self) -> pulumi.Input[str]:
        """
        The role to assign to the entity
        """
        return pulumi.get(self, "role")

    @role.setter
    def role(self, value: pulumi.Input[str]):
        pulumi.set(self, "role", value)


@pulumi.input_type
class ApiTokenUpdatedByArgs:
    def __init__(__self__, *,
                 api_token_name: Optional[pulumi.Input[str]] = None,
                 avatar_url: Optional[pulumi.Input[str]] = None,
                 full_name: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 subject_type: Optional[pulumi.Input[str]] = None,
                 username: Optional[pulumi.Input[str]] = None):
        if api_token_name is not None:
            pulumi.set(__self__, "api_token_name", api_token_name)
        if avatar_url is not None:
            pulumi.set(__self__, "avatar_url", avatar_url)
        if full_name is not None:
            pulumi.set(__self__, "full_name", full_name)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if subject_type is not None:
            pulumi.set(__self__, "subject_type", subject_type)
        if username is not None:
            pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter(name="apiTokenName")
    def api_token_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "api_token_name")

    @api_token_name.setter
    def api_token_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "api_token_name", value)

    @property
    @pulumi.getter(name="avatarUrl")
    def avatar_url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "avatar_url")

    @avatar_url.setter
    def avatar_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "avatar_url", value)

    @property
    @pulumi.getter(name="fullName")
    def full_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "full_name")

    @full_name.setter
    def full_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "full_name", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="subjectType")
    def subject_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "subject_type")

    @subject_type.setter
    def subject_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subject_type", value)

    @property
    @pulumi.getter
    def username(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "username", value)


@pulumi.input_type
class ClusterHealthStatusArgs:
    def __init__(__self__, *,
                 details: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterHealthStatusDetailArgs']]]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['ClusterHealthStatusDetailArgs']]] details: Cluster health status details
        :param pulumi.Input[str] value: Cluster health status value
        """
        if details is not None:
            pulumi.set(__self__, "details", details)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def details(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ClusterHealthStatusDetailArgs']]]]:
        """
        Cluster health status details
        """
        return pulumi.get(self, "details")

    @details.setter
    def details(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterHealthStatusDetailArgs']]]]):
        pulumi.set(self, "details", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        """
        Cluster health status value
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ClusterHealthStatusDetailArgs:
    def __init__(__self__, *,
                 code: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 severity: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] code: Cluster health status detail code
        :param pulumi.Input[str] description: Cluster health status detail description
        :param pulumi.Input[str] severity: Cluster health status detail severity
        """
        if code is not None:
            pulumi.set(__self__, "code", code)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if severity is not None:
            pulumi.set(__self__, "severity", severity)

    @property
    @pulumi.getter
    def code(self) -> Optional[pulumi.Input[str]]:
        """
        Cluster health status detail code
        """
        return pulumi.get(self, "code")

    @code.setter
    def code(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "code", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Cluster health status detail description
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def severity(self) -> Optional[pulumi.Input[str]]:
        """
        Cluster health status detail severity
        """
        return pulumi.get(self, "severity")

    @severity.setter
    def severity(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "severity", value)


@pulumi.input_type
class ClusterMetadataArgs:
    def __init__(__self__, *,
                 external_ips: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 kube_dns_ip: Optional[pulumi.Input[str]] = None,
                 oidc_issuer_url: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] external_ips: Cluster external IPs
        :param pulumi.Input[str] kube_dns_ip: Cluster kube DNS IP
        :param pulumi.Input[str] oidc_issuer_url: Cluster OIDC issuer URL
        """
        if external_ips is not None:
            pulumi.set(__self__, "external_ips", external_ips)
        if kube_dns_ip is not None:
            pulumi.set(__self__, "kube_dns_ip", kube_dns_ip)
        if oidc_issuer_url is not None:
            pulumi.set(__self__, "oidc_issuer_url", oidc_issuer_url)

    @property
    @pulumi.getter(name="externalIps")
    def external_ips(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Cluster external IPs
        """
        return pulumi.get(self, "external_ips")

    @external_ips.setter
    def external_ips(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "external_ips", value)

    @property
    @pulumi.getter(name="kubeDnsIp")
    def kube_dns_ip(self) -> Optional[pulumi.Input[str]]:
        """
        Cluster kube DNS IP
        """
        return pulumi.get(self, "kube_dns_ip")

    @kube_dns_ip.setter
    def kube_dns_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kube_dns_ip", value)

    @property
    @pulumi.getter(name="oidcIssuerUrl")
    def oidc_issuer_url(self) -> Optional[pulumi.Input[str]]:
        """
        Cluster OIDC issuer URL
        """
        return pulumi.get(self, "oidc_issuer_url")

    @oidc_issuer_url.setter
    def oidc_issuer_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "oidc_issuer_url", value)


@pulumi.input_type
class ClusterNodePoolArgs:
    def __init__(__self__, *,
                 cloud_provider: Optional[pulumi.Input[str]] = None,
                 cluster_id: Optional[pulumi.Input[str]] = None,
                 created_at: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 is_default: Optional[pulumi.Input[bool]] = None,
                 max_node_count: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 node_instance_type: Optional[pulumi.Input[str]] = None,
                 supported_astro_machines: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 updated_at: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] cloud_provider: Node pool cloud provider
        :param pulumi.Input[str] cluster_id: Node pool cluster identifier
        :param pulumi.Input[str] created_at: Node pool creation timestamp
        :param pulumi.Input[str] id: Node pool identifier
        :param pulumi.Input[bool] is_default: Whether the node pool is the default node pool of the cluster
        :param pulumi.Input[int] max_node_count: Node pool maximum node count
        :param pulumi.Input[str] name: Node pool name
        :param pulumi.Input[str] node_instance_type: Node pool node instance type
        :param pulumi.Input[Sequence[pulumi.Input[str]]] supported_astro_machines: Node pool supported Astro machines
        :param pulumi.Input[str] updated_at: Node pool last updated timestamp
        """
        if cloud_provider is not None:
            pulumi.set(__self__, "cloud_provider", cloud_provider)
        if cluster_id is not None:
            pulumi.set(__self__, "cluster_id", cluster_id)
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if is_default is not None:
            pulumi.set(__self__, "is_default", is_default)
        if max_node_count is not None:
            pulumi.set(__self__, "max_node_count", max_node_count)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if node_instance_type is not None:
            pulumi.set(__self__, "node_instance_type", node_instance_type)
        if supported_astro_machines is not None:
            pulumi.set(__self__, "supported_astro_machines", supported_astro_machines)
        if updated_at is not None:
            pulumi.set(__self__, "updated_at", updated_at)

    @property
    @pulumi.getter(name="cloudProvider")
    def cloud_provider(self) -> Optional[pulumi.Input[str]]:
        """
        Node pool cloud provider
        """
        return pulumi.get(self, "cloud_provider")

    @cloud_provider.setter
    def cloud_provider(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cloud_provider", value)

    @property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> Optional[pulumi.Input[str]]:
        """
        Node pool cluster identifier
        """
        return pulumi.get(self, "cluster_id")

    @cluster_id.setter
    def cluster_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cluster_id", value)

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[pulumi.Input[str]]:
        """
        Node pool creation timestamp
        """
        return pulumi.get(self, "created_at")

    @created_at.setter
    def created_at(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "created_at", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        Node pool identifier
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="isDefault")
    def is_default(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether the node pool is the default node pool of the cluster
        """
        return pulumi.get(self, "is_default")

    @is_default.setter
    def is_default(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_default", value)

    @property
    @pulumi.getter(name="maxNodeCount")
    def max_node_count(self) -> Optional[pulumi.Input[int]]:
        """
        Node pool maximum node count
        """
        return pulumi.get(self, "max_node_count")

    @max_node_count.setter
    def max_node_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_node_count", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Node pool name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="nodeInstanceType")
    def node_instance_type(self) -> Optional[pulumi.Input[str]]:
        """
        Node pool node instance type
        """
        return pulumi.get(self, "node_instance_type")

    @node_instance_type.setter
    def node_instance_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "node_instance_type", value)

    @property
    @pulumi.getter(name="supportedAstroMachines")
    def supported_astro_machines(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Node pool supported Astro machines
        """
        return pulumi.get(self, "supported_astro_machines")

    @supported_astro_machines.setter
    def supported_astro_machines(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "supported_astro_machines", value)

    @property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> Optional[pulumi.Input[str]]:
        """
        Node pool last updated timestamp
        """
        return pulumi.get(self, "updated_at")

    @updated_at.setter
    def updated_at(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "updated_at", value)


@pulumi.input_type
class ClusterTimeoutsArgs:
    def __init__(__self__, *,
                 create: Optional[pulumi.Input[str]] = None,
                 delete: Optional[pulumi.Input[str]] = None,
                 update: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] create: A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
        :param pulumi.Input[str] delete: A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Setting a timeout for a Delete operation is only applicable if changes are saved into state before the destroy operation occurs.
        :param pulumi.Input[str] update: A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
        """
        if create is not None:
            pulumi.set(__self__, "create", create)
        if delete is not None:
            pulumi.set(__self__, "delete", delete)
        if update is not None:
            pulumi.set(__self__, "update", update)

    @property
    @pulumi.getter
    def create(self) -> Optional[pulumi.Input[str]]:
        """
        A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
        """
        return pulumi.get(self, "create")

    @create.setter
    def create(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "create", value)

    @property
    @pulumi.getter
    def delete(self) -> Optional[pulumi.Input[str]]:
        """
        A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Setting a timeout for a Delete operation is only applicable if changes are saved into state before the destroy operation occurs.
        """
        return pulumi.get(self, "delete")

    @delete.setter
    def delete(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "delete", value)

    @property
    @pulumi.getter
    def update(self) -> Optional[pulumi.Input[str]]:
        """
        A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
        """
        return pulumi.get(self, "update")

    @update.setter
    def update(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "update", value)


@pulumi.input_type
class DeploymentCreatedByArgs:
    def __init__(__self__, *,
                 api_token_name: Optional[pulumi.Input[str]] = None,
                 avatar_url: Optional[pulumi.Input[str]] = None,
                 full_name: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 subject_type: Optional[pulumi.Input[str]] = None,
                 username: Optional[pulumi.Input[str]] = None):
        if api_token_name is not None:
            pulumi.set(__self__, "api_token_name", api_token_name)
        if avatar_url is not None:
            pulumi.set(__self__, "avatar_url", avatar_url)
        if full_name is not None:
            pulumi.set(__self__, "full_name", full_name)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if subject_type is not None:
            pulumi.set(__self__, "subject_type", subject_type)
        if username is not None:
            pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter(name="apiTokenName")
    def api_token_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "api_token_name")

    @api_token_name.setter
    def api_token_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "api_token_name", value)

    @property
    @pulumi.getter(name="avatarUrl")
    def avatar_url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "avatar_url")

    @avatar_url.setter
    def avatar_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "avatar_url", value)

    @property
    @pulumi.getter(name="fullName")
    def full_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "full_name")

    @full_name.setter
    def full_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "full_name", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="subjectType")
    def subject_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "subject_type")

    @subject_type.setter
    def subject_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subject_type", value)

    @property
    @pulumi.getter
    def username(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "username", value)


@pulumi.input_type
class DeploymentEnvironmentVariableArgs:
    def __init__(__self__, *,
                 is_secret: pulumi.Input[bool],
                 key: pulumi.Input[str],
                 updated_at: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[bool] is_secret: Whether Environment variable is a secret
        :param pulumi.Input[str] key: Environment variable key
        :param pulumi.Input[str] updated_at: Environment variable last updated timestamp
        :param pulumi.Input[str] value: Environment variable value
        """
        pulumi.set(__self__, "is_secret", is_secret)
        pulumi.set(__self__, "key", key)
        if updated_at is not None:
            pulumi.set(__self__, "updated_at", updated_at)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="isSecret")
    def is_secret(self) -> pulumi.Input[bool]:
        """
        Whether Environment variable is a secret
        """
        return pulumi.get(self, "is_secret")

    @is_secret.setter
    def is_secret(self, value: pulumi.Input[bool]):
        pulumi.set(self, "is_secret", value)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        """
        Environment variable key
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> Optional[pulumi.Input[str]]:
        """
        Environment variable last updated timestamp
        """
        return pulumi.get(self, "updated_at")

    @updated_at.setter
    def updated_at(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "updated_at", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        """
        Environment variable value
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class DeploymentScalingSpecArgs:
    def __init__(__self__, *,
                 hibernation_spec: pulumi.Input['DeploymentScalingSpecHibernationSpecArgs']):
        """
        :param pulumi.Input['DeploymentScalingSpecHibernationSpecArgs'] hibernation_spec: Hibernation configuration for the deployment. The deployment will hibernate according to the schedules defined in this configuration. To remove the hibernation configuration, set scaling*spec to null.
        """
        pulumi.set(__self__, "hibernation_spec", hibernation_spec)

    @property
    @pulumi.getter(name="hibernationSpec")
    def hibernation_spec(self) -> pulumi.Input['DeploymentScalingSpecHibernationSpecArgs']:
        """
        Hibernation configuration for the deployment. The deployment will hibernate according to the schedules defined in this configuration. To remove the hibernation configuration, set scaling*spec to null.
        """
        return pulumi.get(self, "hibernation_spec")

    @hibernation_spec.setter
    def hibernation_spec(self, value: pulumi.Input['DeploymentScalingSpecHibernationSpecArgs']):
        pulumi.set(self, "hibernation_spec", value)


@pulumi.input_type
class DeploymentScalingSpecHibernationSpecArgs:
    def __init__(__self__, *,
                 override: Optional[pulumi.Input['DeploymentScalingSpecHibernationSpecOverrideArgs']] = None,
                 schedules: Optional[pulumi.Input[Sequence[pulumi.Input['DeploymentScalingSpecHibernationSpecScheduleArgs']]]] = None):
        """
        :param pulumi.Input['DeploymentScalingSpecHibernationSpecOverrideArgs'] override: Hibernation override configuration. Set to null to remove the override.
        :param pulumi.Input[Sequence[pulumi.Input['DeploymentScalingSpecHibernationSpecScheduleArgs']]] schedules: List of hibernation schedules. Set to null to remove all schedules.
        """
        if override is not None:
            pulumi.set(__self__, "override", override)
        if schedules is not None:
            pulumi.set(__self__, "schedules", schedules)

    @property
    @pulumi.getter
    def override(self) -> Optional[pulumi.Input['DeploymentScalingSpecHibernationSpecOverrideArgs']]:
        """
        Hibernation override configuration. Set to null to remove the override.
        """
        return pulumi.get(self, "override")

    @override.setter
    def override(self, value: Optional[pulumi.Input['DeploymentScalingSpecHibernationSpecOverrideArgs']]):
        pulumi.set(self, "override", value)

    @property
    @pulumi.getter
    def schedules(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DeploymentScalingSpecHibernationSpecScheduleArgs']]]]:
        """
        List of hibernation schedules. Set to null to remove all schedules.
        """
        return pulumi.get(self, "schedules")

    @schedules.setter
    def schedules(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DeploymentScalingSpecHibernationSpecScheduleArgs']]]]):
        pulumi.set(self, "schedules", value)


@pulumi.input_type
class DeploymentScalingSpecHibernationSpecOverrideArgs:
    def __init__(__self__, *,
                 is_hibernating: pulumi.Input[bool],
                 is_active: Optional[pulumi.Input[bool]] = None,
                 override_until: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "is_hibernating", is_hibernating)
        if is_active is not None:
            pulumi.set(__self__, "is_active", is_active)
        if override_until is not None:
            pulumi.set(__self__, "override_until", override_until)

    @property
    @pulumi.getter(name="isHibernating")
    def is_hibernating(self) -> pulumi.Input[bool]:
        return pulumi.get(self, "is_hibernating")

    @is_hibernating.setter
    def is_hibernating(self, value: pulumi.Input[bool]):
        pulumi.set(self, "is_hibernating", value)

    @property
    @pulumi.getter(name="isActive")
    def is_active(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "is_active")

    @is_active.setter
    def is_active(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_active", value)

    @property
    @pulumi.getter(name="overrideUntil")
    def override_until(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "override_until")

    @override_until.setter
    def override_until(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "override_until", value)


@pulumi.input_type
class DeploymentScalingSpecHibernationSpecScheduleArgs:
    def __init__(__self__, *,
                 hibernate_at_cron: pulumi.Input[str],
                 is_enabled: pulumi.Input[bool],
                 wake_at_cron: pulumi.Input[str],
                 description: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "hibernate_at_cron", hibernate_at_cron)
        pulumi.set(__self__, "is_enabled", is_enabled)
        pulumi.set(__self__, "wake_at_cron", wake_at_cron)
        if description is not None:
            pulumi.set(__self__, "description", description)

    @property
    @pulumi.getter(name="hibernateAtCron")
    def hibernate_at_cron(self) -> pulumi.Input[str]:
        return pulumi.get(self, "hibernate_at_cron")

    @hibernate_at_cron.setter
    def hibernate_at_cron(self, value: pulumi.Input[str]):
        pulumi.set(self, "hibernate_at_cron", value)

    @property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> pulumi.Input[bool]:
        return pulumi.get(self, "is_enabled")

    @is_enabled.setter
    def is_enabled(self, value: pulumi.Input[bool]):
        pulumi.set(self, "is_enabled", value)

    @property
    @pulumi.getter(name="wakeAtCron")
    def wake_at_cron(self) -> pulumi.Input[str]:
        return pulumi.get(self, "wake_at_cron")

    @wake_at_cron.setter
    def wake_at_cron(self, value: pulumi.Input[str]):
        pulumi.set(self, "wake_at_cron", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)


@pulumi.input_type
class DeploymentScalingStatusArgs:
    def __init__(__self__, *,
                 hibernation_status: Optional[pulumi.Input['DeploymentScalingStatusHibernationStatusArgs']] = None):
        if hibernation_status is not None:
            pulumi.set(__self__, "hibernation_status", hibernation_status)

    @property
    @pulumi.getter(name="hibernationStatus")
    def hibernation_status(self) -> Optional[pulumi.Input['DeploymentScalingStatusHibernationStatusArgs']]:
        return pulumi.get(self, "hibernation_status")

    @hibernation_status.setter
    def hibernation_status(self, value: Optional[pulumi.Input['DeploymentScalingStatusHibernationStatusArgs']]):
        pulumi.set(self, "hibernation_status", value)


@pulumi.input_type
class DeploymentScalingStatusHibernationStatusArgs:
    def __init__(__self__, *,
                 is_hibernating: Optional[pulumi.Input[bool]] = None,
                 next_event_at: Optional[pulumi.Input[str]] = None,
                 next_event_type: Optional[pulumi.Input[str]] = None,
                 reason: Optional[pulumi.Input[str]] = None):
        if is_hibernating is not None:
            pulumi.set(__self__, "is_hibernating", is_hibernating)
        if next_event_at is not None:
            pulumi.set(__self__, "next_event_at", next_event_at)
        if next_event_type is not None:
            pulumi.set(__self__, "next_event_type", next_event_type)
        if reason is not None:
            pulumi.set(__self__, "reason", reason)

    @property
    @pulumi.getter(name="isHibernating")
    def is_hibernating(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "is_hibernating")

    @is_hibernating.setter
    def is_hibernating(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_hibernating", value)

    @property
    @pulumi.getter(name="nextEventAt")
    def next_event_at(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "next_event_at")

    @next_event_at.setter
    def next_event_at(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "next_event_at", value)

    @property
    @pulumi.getter(name="nextEventType")
    def next_event_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "next_event_type")

    @next_event_type.setter
    def next_event_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "next_event_type", value)

    @property
    @pulumi.getter
    def reason(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "reason")

    @reason.setter
    def reason(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "reason", value)


@pulumi.input_type
class DeploymentUpdatedByArgs:
    def __init__(__self__, *,
                 api_token_name: Optional[pulumi.Input[str]] = None,
                 avatar_url: Optional[pulumi.Input[str]] = None,
                 full_name: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 subject_type: Optional[pulumi.Input[str]] = None,
                 username: Optional[pulumi.Input[str]] = None):
        if api_token_name is not None:
            pulumi.set(__self__, "api_token_name", api_token_name)
        if avatar_url is not None:
            pulumi.set(__self__, "avatar_url", avatar_url)
        if full_name is not None:
            pulumi.set(__self__, "full_name", full_name)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if subject_type is not None:
            pulumi.set(__self__, "subject_type", subject_type)
        if username is not None:
            pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter(name="apiTokenName")
    def api_token_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "api_token_name")

    @api_token_name.setter
    def api_token_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "api_token_name", value)

    @property
    @pulumi.getter(name="avatarUrl")
    def avatar_url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "avatar_url")

    @avatar_url.setter
    def avatar_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "avatar_url", value)

    @property
    @pulumi.getter(name="fullName")
    def full_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "full_name")

    @full_name.setter
    def full_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "full_name", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="subjectType")
    def subject_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "subject_type")

    @subject_type.setter
    def subject_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subject_type", value)

    @property
    @pulumi.getter
    def username(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "username", value)


@pulumi.input_type
class DeploymentWorkerQueueArgs:
    def __init__(__self__, *,
                 is_default: pulumi.Input[bool],
                 max_worker_count: pulumi.Input[int],
                 min_worker_count: pulumi.Input[int],
                 name: pulumi.Input[str],
                 worker_concurrency: pulumi.Input[int],
                 astro_machine: Optional[pulumi.Input[str]] = None,
                 node_pool_id: Optional[pulumi.Input[str]] = None,
                 pod_cpu: Optional[pulumi.Input[str]] = None,
                 pod_memory: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[bool] is_default: Worker queue default
        :param pulumi.Input[int] max_worker_count: Worker queue max worker count
        :param pulumi.Input[int] min_worker_count: Worker queue min worker count
        :param pulumi.Input[str] name: Worker queue name
        :param pulumi.Input[int] worker_concurrency: Worker queue worker concurrency
        :param pulumi.Input[str] astro_machine: Worker queue Astro machine value - required for 'STANDARD' and 'DEDICATED' deployments
        :param pulumi.Input[str] node_pool_id: Worker queue Node pool identifier - required for 'HYBRID' deployments
        :param pulumi.Input[str] pod_cpu: Worker queue pod CPU
        :param pulumi.Input[str] pod_memory: Worker queue pod memory
        """
        pulumi.set(__self__, "is_default", is_default)
        pulumi.set(__self__, "max_worker_count", max_worker_count)
        pulumi.set(__self__, "min_worker_count", min_worker_count)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "worker_concurrency", worker_concurrency)
        if astro_machine is not None:
            pulumi.set(__self__, "astro_machine", astro_machine)
        if node_pool_id is not None:
            pulumi.set(__self__, "node_pool_id", node_pool_id)
        if pod_cpu is not None:
            pulumi.set(__self__, "pod_cpu", pod_cpu)
        if pod_memory is not None:
            pulumi.set(__self__, "pod_memory", pod_memory)

    @property
    @pulumi.getter(name="isDefault")
    def is_default(self) -> pulumi.Input[bool]:
        """
        Worker queue default
        """
        return pulumi.get(self, "is_default")

    @is_default.setter
    def is_default(self, value: pulumi.Input[bool]):
        pulumi.set(self, "is_default", value)

    @property
    @pulumi.getter(name="maxWorkerCount")
    def max_worker_count(self) -> pulumi.Input[int]:
        """
        Worker queue max worker count
        """
        return pulumi.get(self, "max_worker_count")

    @max_worker_count.setter
    def max_worker_count(self, value: pulumi.Input[int]):
        pulumi.set(self, "max_worker_count", value)

    @property
    @pulumi.getter(name="minWorkerCount")
    def min_worker_count(self) -> pulumi.Input[int]:
        """
        Worker queue min worker count
        """
        return pulumi.get(self, "min_worker_count")

    @min_worker_count.setter
    def min_worker_count(self, value: pulumi.Input[int]):
        pulumi.set(self, "min_worker_count", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Worker queue name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="workerConcurrency")
    def worker_concurrency(self) -> pulumi.Input[int]:
        """
        Worker queue worker concurrency
        """
        return pulumi.get(self, "worker_concurrency")

    @worker_concurrency.setter
    def worker_concurrency(self, value: pulumi.Input[int]):
        pulumi.set(self, "worker_concurrency", value)

    @property
    @pulumi.getter(name="astroMachine")
    def astro_machine(self) -> Optional[pulumi.Input[str]]:
        """
        Worker queue Astro machine value - required for 'STANDARD' and 'DEDICATED' deployments
        """
        return pulumi.get(self, "astro_machine")

    @astro_machine.setter
    def astro_machine(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "astro_machine", value)

    @property
    @pulumi.getter(name="nodePoolId")
    def node_pool_id(self) -> Optional[pulumi.Input[str]]:
        """
        Worker queue Node pool identifier - required for 'HYBRID' deployments
        """
        return pulumi.get(self, "node_pool_id")

    @node_pool_id.setter
    def node_pool_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "node_pool_id", value)

    @property
    @pulumi.getter(name="podCpu")
    def pod_cpu(self) -> Optional[pulumi.Input[str]]:
        """
        Worker queue pod CPU
        """
        return pulumi.get(self, "pod_cpu")

    @pod_cpu.setter
    def pod_cpu(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pod_cpu", value)

    @property
    @pulumi.getter(name="podMemory")
    def pod_memory(self) -> Optional[pulumi.Input[str]]:
        """
        Worker queue pod memory
        """
        return pulumi.get(self, "pod_memory")

    @pod_memory.setter
    def pod_memory(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pod_memory", value)


@pulumi.input_type
class TeamCreatedByArgs:
    def __init__(__self__, *,
                 api_token_name: Optional[pulumi.Input[str]] = None,
                 avatar_url: Optional[pulumi.Input[str]] = None,
                 full_name: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 subject_type: Optional[pulumi.Input[str]] = None,
                 username: Optional[pulumi.Input[str]] = None):
        if api_token_name is not None:
            pulumi.set(__self__, "api_token_name", api_token_name)
        if avatar_url is not None:
            pulumi.set(__self__, "avatar_url", avatar_url)
        if full_name is not None:
            pulumi.set(__self__, "full_name", full_name)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if subject_type is not None:
            pulumi.set(__self__, "subject_type", subject_type)
        if username is not None:
            pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter(name="apiTokenName")
    def api_token_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "api_token_name")

    @api_token_name.setter
    def api_token_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "api_token_name", value)

    @property
    @pulumi.getter(name="avatarUrl")
    def avatar_url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "avatar_url")

    @avatar_url.setter
    def avatar_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "avatar_url", value)

    @property
    @pulumi.getter(name="fullName")
    def full_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "full_name")

    @full_name.setter
    def full_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "full_name", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="subjectType")
    def subject_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "subject_type")

    @subject_type.setter
    def subject_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subject_type", value)

    @property
    @pulumi.getter
    def username(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "username", value)


@pulumi.input_type
class TeamDeploymentRoleArgs:
    def __init__(__self__, *,
                 deployment_id: pulumi.Input[str],
                 role: pulumi.Input[str]):
        """
        :param pulumi.Input[str] deployment_id: The ID of the deployment to assign the role to
        :param pulumi.Input[str] role: The role to assign to the deployment
        """
        pulumi.set(__self__, "deployment_id", deployment_id)
        pulumi.set(__self__, "role", role)

    @property
    @pulumi.getter(name="deploymentId")
    def deployment_id(self) -> pulumi.Input[str]:
        """
        The ID of the deployment to assign the role to
        """
        return pulumi.get(self, "deployment_id")

    @deployment_id.setter
    def deployment_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "deployment_id", value)

    @property
    @pulumi.getter
    def role(self) -> pulumi.Input[str]:
        """
        The role to assign to the deployment
        """
        return pulumi.get(self, "role")

    @role.setter
    def role(self, value: pulumi.Input[str]):
        pulumi.set(self, "role", value)


@pulumi.input_type
class TeamRolesDeploymentRoleArgs:
    def __init__(__self__, *,
                 deployment_id: pulumi.Input[str],
                 role: pulumi.Input[str]):
        """
        :param pulumi.Input[str] deployment_id: The ID of the deployment to assign the role to
        :param pulumi.Input[str] role: The role to assign to the deployment
        """
        pulumi.set(__self__, "deployment_id", deployment_id)
        pulumi.set(__self__, "role", role)

    @property
    @pulumi.getter(name="deploymentId")
    def deployment_id(self) -> pulumi.Input[str]:
        """
        The ID of the deployment to assign the role to
        """
        return pulumi.get(self, "deployment_id")

    @deployment_id.setter
    def deployment_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "deployment_id", value)

    @property
    @pulumi.getter
    def role(self) -> pulumi.Input[str]:
        """
        The role to assign to the deployment
        """
        return pulumi.get(self, "role")

    @role.setter
    def role(self, value: pulumi.Input[str]):
        pulumi.set(self, "role", value)


@pulumi.input_type
class TeamRolesWorkspaceRoleArgs:
    def __init__(__self__, *,
                 role: pulumi.Input[str],
                 workspace_id: pulumi.Input[str]):
        """
        :param pulumi.Input[str] role: The role to assign to the workspace
        :param pulumi.Input[str] workspace_id: The ID of the workspace to assign the role to
        """
        pulumi.set(__self__, "role", role)
        pulumi.set(__self__, "workspace_id", workspace_id)

    @property
    @pulumi.getter
    def role(self) -> pulumi.Input[str]:
        """
        The role to assign to the workspace
        """
        return pulumi.get(self, "role")

    @role.setter
    def role(self, value: pulumi.Input[str]):
        pulumi.set(self, "role", value)

    @property
    @pulumi.getter(name="workspaceId")
    def workspace_id(self) -> pulumi.Input[str]:
        """
        The ID of the workspace to assign the role to
        """
        return pulumi.get(self, "workspace_id")

    @workspace_id.setter
    def workspace_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "workspace_id", value)


@pulumi.input_type
class TeamUpdatedByArgs:
    def __init__(__self__, *,
                 api_token_name: Optional[pulumi.Input[str]] = None,
                 avatar_url: Optional[pulumi.Input[str]] = None,
                 full_name: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 subject_type: Optional[pulumi.Input[str]] = None,
                 username: Optional[pulumi.Input[str]] = None):
        if api_token_name is not None:
            pulumi.set(__self__, "api_token_name", api_token_name)
        if avatar_url is not None:
            pulumi.set(__self__, "avatar_url", avatar_url)
        if full_name is not None:
            pulumi.set(__self__, "full_name", full_name)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if subject_type is not None:
            pulumi.set(__self__, "subject_type", subject_type)
        if username is not None:
            pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter(name="apiTokenName")
    def api_token_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "api_token_name")

    @api_token_name.setter
    def api_token_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "api_token_name", value)

    @property
    @pulumi.getter(name="avatarUrl")
    def avatar_url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "avatar_url")

    @avatar_url.setter
    def avatar_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "avatar_url", value)

    @property
    @pulumi.getter(name="fullName")
    def full_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "full_name")

    @full_name.setter
    def full_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "full_name", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="subjectType")
    def subject_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "subject_type")

    @subject_type.setter
    def subject_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subject_type", value)

    @property
    @pulumi.getter
    def username(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "username", value)


@pulumi.input_type
class TeamWorkspaceRoleArgs:
    def __init__(__self__, *,
                 role: pulumi.Input[str],
                 workspace_id: pulumi.Input[str]):
        """
        :param pulumi.Input[str] role: The role to assign to the workspace
        :param pulumi.Input[str] workspace_id: The ID of the workspace to assign the role to
        """
        pulumi.set(__self__, "role", role)
        pulumi.set(__self__, "workspace_id", workspace_id)

    @property
    @pulumi.getter
    def role(self) -> pulumi.Input[str]:
        """
        The role to assign to the workspace
        """
        return pulumi.get(self, "role")

    @role.setter
    def role(self, value: pulumi.Input[str]):
        pulumi.set(self, "role", value)

    @property
    @pulumi.getter(name="workspaceId")
    def workspace_id(self) -> pulumi.Input[str]:
        """
        The ID of the workspace to assign the role to
        """
        return pulumi.get(self, "workspace_id")

    @workspace_id.setter
    def workspace_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "workspace_id", value)


@pulumi.input_type
class UserInviteInviteeArgs:
    def __init__(__self__, *,
                 api_token_name: Optional[pulumi.Input[str]] = None,
                 avatar_url: Optional[pulumi.Input[str]] = None,
                 full_name: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 subject_type: Optional[pulumi.Input[str]] = None,
                 username: Optional[pulumi.Input[str]] = None):
        if api_token_name is not None:
            pulumi.set(__self__, "api_token_name", api_token_name)
        if avatar_url is not None:
            pulumi.set(__self__, "avatar_url", avatar_url)
        if full_name is not None:
            pulumi.set(__self__, "full_name", full_name)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if subject_type is not None:
            pulumi.set(__self__, "subject_type", subject_type)
        if username is not None:
            pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter(name="apiTokenName")
    def api_token_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "api_token_name")

    @api_token_name.setter
    def api_token_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "api_token_name", value)

    @property
    @pulumi.getter(name="avatarUrl")
    def avatar_url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "avatar_url")

    @avatar_url.setter
    def avatar_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "avatar_url", value)

    @property
    @pulumi.getter(name="fullName")
    def full_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "full_name")

    @full_name.setter
    def full_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "full_name", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="subjectType")
    def subject_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "subject_type")

    @subject_type.setter
    def subject_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subject_type", value)

    @property
    @pulumi.getter
    def username(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "username", value)


@pulumi.input_type
class UserInviteInviterArgs:
    def __init__(__self__, *,
                 api_token_name: Optional[pulumi.Input[str]] = None,
                 avatar_url: Optional[pulumi.Input[str]] = None,
                 full_name: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 subject_type: Optional[pulumi.Input[str]] = None,
                 username: Optional[pulumi.Input[str]] = None):
        if api_token_name is not None:
            pulumi.set(__self__, "api_token_name", api_token_name)
        if avatar_url is not None:
            pulumi.set(__self__, "avatar_url", avatar_url)
        if full_name is not None:
            pulumi.set(__self__, "full_name", full_name)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if subject_type is not None:
            pulumi.set(__self__, "subject_type", subject_type)
        if username is not None:
            pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter(name="apiTokenName")
    def api_token_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "api_token_name")

    @api_token_name.setter
    def api_token_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "api_token_name", value)

    @property
    @pulumi.getter(name="avatarUrl")
    def avatar_url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "avatar_url")

    @avatar_url.setter
    def avatar_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "avatar_url", value)

    @property
    @pulumi.getter(name="fullName")
    def full_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "full_name")

    @full_name.setter
    def full_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "full_name", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="subjectType")
    def subject_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "subject_type")

    @subject_type.setter
    def subject_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subject_type", value)

    @property
    @pulumi.getter
    def username(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "username", value)


@pulumi.input_type
class UserRolesDeploymentRoleArgs:
    def __init__(__self__, *,
                 deployment_id: pulumi.Input[str],
                 role: pulumi.Input[str]):
        """
        :param pulumi.Input[str] deployment_id: The ID of the deployment to assign the role to
        :param pulumi.Input[str] role: The role to assign to the deployment
        """
        pulumi.set(__self__, "deployment_id", deployment_id)
        pulumi.set(__self__, "role", role)

    @property
    @pulumi.getter(name="deploymentId")
    def deployment_id(self) -> pulumi.Input[str]:
        """
        The ID of the deployment to assign the role to
        """
        return pulumi.get(self, "deployment_id")

    @deployment_id.setter
    def deployment_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "deployment_id", value)

    @property
    @pulumi.getter
    def role(self) -> pulumi.Input[str]:
        """
        The role to assign to the deployment
        """
        return pulumi.get(self, "role")

    @role.setter
    def role(self, value: pulumi.Input[str]):
        pulumi.set(self, "role", value)


@pulumi.input_type
class UserRolesWorkspaceRoleArgs:
    def __init__(__self__, *,
                 role: pulumi.Input[str],
                 workspace_id: pulumi.Input[str]):
        """
        :param pulumi.Input[str] role: The role to assign to the workspace
        :param pulumi.Input[str] workspace_id: The ID of the workspace to assign the role to
        """
        pulumi.set(__self__, "role", role)
        pulumi.set(__self__, "workspace_id", workspace_id)

    @property
    @pulumi.getter
    def role(self) -> pulumi.Input[str]:
        """
        The role to assign to the workspace
        """
        return pulumi.get(self, "role")

    @role.setter
    def role(self, value: pulumi.Input[str]):
        pulumi.set(self, "role", value)

    @property
    @pulumi.getter(name="workspaceId")
    def workspace_id(self) -> pulumi.Input[str]:
        """
        The ID of the workspace to assign the role to
        """
        return pulumi.get(self, "workspace_id")

    @workspace_id.setter
    def workspace_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "workspace_id", value)


@pulumi.input_type
class WorkspaceCreatedByArgs:
    def __init__(__self__, *,
                 api_token_name: Optional[pulumi.Input[str]] = None,
                 avatar_url: Optional[pulumi.Input[str]] = None,
                 full_name: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 subject_type: Optional[pulumi.Input[str]] = None,
                 username: Optional[pulumi.Input[str]] = None):
        if api_token_name is not None:
            pulumi.set(__self__, "api_token_name", api_token_name)
        if avatar_url is not None:
            pulumi.set(__self__, "avatar_url", avatar_url)
        if full_name is not None:
            pulumi.set(__self__, "full_name", full_name)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if subject_type is not None:
            pulumi.set(__self__, "subject_type", subject_type)
        if username is not None:
            pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter(name="apiTokenName")
    def api_token_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "api_token_name")

    @api_token_name.setter
    def api_token_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "api_token_name", value)

    @property
    @pulumi.getter(name="avatarUrl")
    def avatar_url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "avatar_url")

    @avatar_url.setter
    def avatar_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "avatar_url", value)

    @property
    @pulumi.getter(name="fullName")
    def full_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "full_name")

    @full_name.setter
    def full_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "full_name", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="subjectType")
    def subject_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "subject_type")

    @subject_type.setter
    def subject_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subject_type", value)

    @property
    @pulumi.getter
    def username(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "username", value)


@pulumi.input_type
class WorkspaceUpdatedByArgs:
    def __init__(__self__, *,
                 api_token_name: Optional[pulumi.Input[str]] = None,
                 avatar_url: Optional[pulumi.Input[str]] = None,
                 full_name: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 subject_type: Optional[pulumi.Input[str]] = None,
                 username: Optional[pulumi.Input[str]] = None):
        if api_token_name is not None:
            pulumi.set(__self__, "api_token_name", api_token_name)
        if avatar_url is not None:
            pulumi.set(__self__, "avatar_url", avatar_url)
        if full_name is not None:
            pulumi.set(__self__, "full_name", full_name)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if subject_type is not None:
            pulumi.set(__self__, "subject_type", subject_type)
        if username is not None:
            pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter(name="apiTokenName")
    def api_token_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "api_token_name")

    @api_token_name.setter
    def api_token_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "api_token_name", value)

    @property
    @pulumi.getter(name="avatarUrl")
    def avatar_url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "avatar_url")

    @avatar_url.setter
    def avatar_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "avatar_url", value)

    @property
    @pulumi.getter(name="fullName")
    def full_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "full_name")

    @full_name.setter
    def full_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "full_name", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="subjectType")
    def subject_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "subject_type")

    @subject_type.setter
    def subject_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subject_type", value)

    @property
    @pulumi.getter
    def username(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "username", value)


