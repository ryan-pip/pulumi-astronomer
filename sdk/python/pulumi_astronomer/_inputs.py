# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = [
    'ClusterK8sTagArgs',
    'ClusterMetadataArgs',
    'ClusterNodePoolArgs',
    'DeploymentEnvironmentVariableArgs',
    'DeploymentWorkerQueueArgs',
]

@pulumi.input_type
class ClusterK8sTagArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] key: The tag's key.
        :param pulumi.Input[str] value: The tag's value.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        """
        The tag's key.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        The tag's value.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ClusterMetadataArgs:
    def __init__(__self__, *,
                 external_ips: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 oidc_issuer_url: Optional[pulumi.Input[str]] = None):
        if external_ips is not None:
            pulumi.set(__self__, "external_ips", external_ips)
        if oidc_issuer_url is not None:
            pulumi.set(__self__, "oidc_issuer_url", oidc_issuer_url)

    @property
    @pulumi.getter(name="externalIps")
    def external_ips(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "external_ips")

    @external_ips.setter
    def external_ips(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "external_ips", value)

    @property
    @pulumi.getter(name="oidcIssuerUrl")
    def oidc_issuer_url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "oidc_issuer_url")

    @oidc_issuer_url.setter
    def oidc_issuer_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "oidc_issuer_url", value)


@pulumi.input_type
class ClusterNodePoolArgs:
    def __init__(__self__, *,
                 max_node_count: pulumi.Input[int],
                 name: pulumi.Input[str],
                 node_instance_type: pulumi.Input[str],
                 is_default: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[int] max_node_count: The maximum number of nodes that can be created in the node pool.
        :param pulumi.Input[str] name: The name of the node pool.
        :param pulumi.Input[str] node_instance_type: The type of node instance that is used for the node pool.
        :param pulumi.Input[bool] is_default: Whether the node pool is the default node pool of the cluster.
        """
        pulumi.set(__self__, "max_node_count", max_node_count)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "node_instance_type", node_instance_type)
        if is_default is not None:
            pulumi.set(__self__, "is_default", is_default)

    @property
    @pulumi.getter(name="maxNodeCount")
    def max_node_count(self) -> pulumi.Input[int]:
        """
        The maximum number of nodes that can be created in the node pool.
        """
        return pulumi.get(self, "max_node_count")

    @max_node_count.setter
    def max_node_count(self, value: pulumi.Input[int]):
        pulumi.set(self, "max_node_count", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The name of the node pool.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="nodeInstanceType")
    def node_instance_type(self) -> pulumi.Input[str]:
        """
        The type of node instance that is used for the node pool.
        """
        return pulumi.get(self, "node_instance_type")

    @node_instance_type.setter
    def node_instance_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "node_instance_type", value)

    @property
    @pulumi.getter(name="isDefault")
    def is_default(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether the node pool is the default node pool of the cluster.
        """
        return pulumi.get(self, "is_default")

    @is_default.setter
    def is_default(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_default", value)


@pulumi.input_type
class DeploymentEnvironmentVariableArgs:
    def __init__(__self__, *,
                 is_secret: pulumi.Input[bool],
                 key: pulumi.Input[str],
                 value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[bool] is_secret: Whether the environment variable is a secret.
        :param pulumi.Input[str] key: The environment variable key, used to call the value in code.
        :param pulumi.Input[str] value: The environment variable value.
        """
        pulumi.set(__self__, "is_secret", is_secret)
        pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="isSecret")
    def is_secret(self) -> pulumi.Input[bool]:
        """
        Whether the environment variable is a secret.
        """
        return pulumi.get(self, "is_secret")

    @is_secret.setter
    def is_secret(self, value: pulumi.Input[bool]):
        pulumi.set(self, "is_secret", value)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        """
        The environment variable key, used to call the value in code.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        """
        The environment variable value.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class DeploymentWorkerQueueArgs:
    def __init__(__self__, *,
                 astro_machine: pulumi.Input[str],
                 is_default: pulumi.Input[bool],
                 max_worker_count: pulumi.Input[int],
                 min_worker_count: pulumi.Input[int],
                 name: pulumi.Input[str],
                 worker_concurrency: pulumi.Input[int],
                 id: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "astro_machine", astro_machine)
        pulumi.set(__self__, "is_default", is_default)
        pulumi.set(__self__, "max_worker_count", max_worker_count)
        pulumi.set(__self__, "min_worker_count", min_worker_count)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "worker_concurrency", worker_concurrency)
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter(name="astroMachine")
    def astro_machine(self) -> pulumi.Input[str]:
        return pulumi.get(self, "astro_machine")

    @astro_machine.setter
    def astro_machine(self, value: pulumi.Input[str]):
        pulumi.set(self, "astro_machine", value)

    @property
    @pulumi.getter(name="isDefault")
    def is_default(self) -> pulumi.Input[bool]:
        return pulumi.get(self, "is_default")

    @is_default.setter
    def is_default(self, value: pulumi.Input[bool]):
        pulumi.set(self, "is_default", value)

    @property
    @pulumi.getter(name="maxWorkerCount")
    def max_worker_count(self) -> pulumi.Input[int]:
        return pulumi.get(self, "max_worker_count")

    @max_worker_count.setter
    def max_worker_count(self, value: pulumi.Input[int]):
        pulumi.set(self, "max_worker_count", value)

    @property
    @pulumi.getter(name="minWorkerCount")
    def min_worker_count(self) -> pulumi.Input[int]:
        return pulumi.get(self, "min_worker_count")

    @min_worker_count.setter
    def min_worker_count(self, value: pulumi.Input[int]):
        pulumi.set(self, "min_worker_count", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="workerConcurrency")
    def worker_concurrency(self) -> pulumi.Input[int]:
        return pulumi.get(self, "worker_concurrency")

    @worker_concurrency.setter
    def worker_concurrency(self, value: pulumi.Input[int]):
        pulumi.set(self, "worker_concurrency", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)


