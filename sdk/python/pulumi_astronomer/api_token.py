# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['ApiTokenArgs', 'ApiToken']

@pulumi.input_type
class ApiTokenArgs:
    def __init__(__self__, *,
                 roles: pulumi.Input[Sequence[pulumi.Input['ApiTokenRoleArgs']]],
                 type: pulumi.Input[str],
                 description: Optional[pulumi.Input[str]] = None,
                 expiry_period_in_days: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a ApiToken resource.
        :param pulumi.Input[Sequence[pulumi.Input['ApiTokenRoleArgs']]] roles: The roles assigned to the API Token
        :param pulumi.Input[str] type: API Token type - if changing this value, the API Token will be recreated with the new type
        :param pulumi.Input[str] description: API Token description
        :param pulumi.Input[int] expiry_period_in_days: API Token expiry period in days
        :param pulumi.Input[str] name: API Token name
        """
        pulumi.set(__self__, "roles", roles)
        pulumi.set(__self__, "type", type)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if expiry_period_in_days is not None:
            pulumi.set(__self__, "expiry_period_in_days", expiry_period_in_days)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def roles(self) -> pulumi.Input[Sequence[pulumi.Input['ApiTokenRoleArgs']]]:
        """
        The roles assigned to the API Token
        """
        return pulumi.get(self, "roles")

    @roles.setter
    def roles(self, value: pulumi.Input[Sequence[pulumi.Input['ApiTokenRoleArgs']]]):
        pulumi.set(self, "roles", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        API Token type - if changing this value, the API Token will be recreated with the new type
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        API Token description
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="expiryPeriodInDays")
    def expiry_period_in_days(self) -> Optional[pulumi.Input[int]]:
        """
        API Token expiry period in days
        """
        return pulumi.get(self, "expiry_period_in_days")

    @expiry_period_in_days.setter
    def expiry_period_in_days(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "expiry_period_in_days", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        API Token name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class _ApiTokenState:
    def __init__(__self__, *,
                 created_at: Optional[pulumi.Input[str]] = None,
                 created_by: Optional[pulumi.Input['ApiTokenCreatedByArgs']] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 end_at: Optional[pulumi.Input[str]] = None,
                 expiry_period_in_days: Optional[pulumi.Input[int]] = None,
                 last_used_at: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 roles: Optional[pulumi.Input[Sequence[pulumi.Input['ApiTokenRoleArgs']]]] = None,
                 short_token: Optional[pulumi.Input[str]] = None,
                 start_at: Optional[pulumi.Input[str]] = None,
                 token: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 updated_at: Optional[pulumi.Input[str]] = None,
                 updated_by: Optional[pulumi.Input['ApiTokenUpdatedByArgs']] = None):
        """
        Input properties used for looking up and filtering ApiToken resources.
        :param pulumi.Input[str] created_at: API Token creation timestamp
        :param pulumi.Input['ApiTokenCreatedByArgs'] created_by: API Token creator
        :param pulumi.Input[str] description: API Token description
        :param pulumi.Input[str] end_at: time when the API token will expire in UTC
        :param pulumi.Input[int] expiry_period_in_days: API Token expiry period in days
        :param pulumi.Input[str] last_used_at: API Token last used timestamp
        :param pulumi.Input[str] name: API Token name
        :param pulumi.Input[Sequence[pulumi.Input['ApiTokenRoleArgs']]] roles: The roles assigned to the API Token
        :param pulumi.Input[str] short_token: API Token short token
        :param pulumi.Input[str] start_at: time when the API token will become valid in UTC
        :param pulumi.Input[str] type: API Token type - if changing this value, the API Token will be recreated with the new type
        :param pulumi.Input[str] updated_at: API Token last updated timestamp
        :param pulumi.Input['ApiTokenUpdatedByArgs'] updated_by: API Token updater
        """
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if created_by is not None:
            pulumi.set(__self__, "created_by", created_by)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if end_at is not None:
            pulumi.set(__self__, "end_at", end_at)
        if expiry_period_in_days is not None:
            pulumi.set(__self__, "expiry_period_in_days", expiry_period_in_days)
        if last_used_at is not None:
            pulumi.set(__self__, "last_used_at", last_used_at)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if roles is not None:
            pulumi.set(__self__, "roles", roles)
        if short_token is not None:
            pulumi.set(__self__, "short_token", short_token)
        if start_at is not None:
            pulumi.set(__self__, "start_at", start_at)
        if token is not None:
            pulumi.set(__self__, "token", token)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if updated_at is not None:
            pulumi.set(__self__, "updated_at", updated_at)
        if updated_by is not None:
            pulumi.set(__self__, "updated_by", updated_by)

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[pulumi.Input[str]]:
        """
        API Token creation timestamp
        """
        return pulumi.get(self, "created_at")

    @created_at.setter
    def created_at(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "created_at", value)

    @property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> Optional[pulumi.Input['ApiTokenCreatedByArgs']]:
        """
        API Token creator
        """
        return pulumi.get(self, "created_by")

    @created_by.setter
    def created_by(self, value: Optional[pulumi.Input['ApiTokenCreatedByArgs']]):
        pulumi.set(self, "created_by", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        API Token description
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="endAt")
    def end_at(self) -> Optional[pulumi.Input[str]]:
        """
        time when the API token will expire in UTC
        """
        return pulumi.get(self, "end_at")

    @end_at.setter
    def end_at(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "end_at", value)

    @property
    @pulumi.getter(name="expiryPeriodInDays")
    def expiry_period_in_days(self) -> Optional[pulumi.Input[int]]:
        """
        API Token expiry period in days
        """
        return pulumi.get(self, "expiry_period_in_days")

    @expiry_period_in_days.setter
    def expiry_period_in_days(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "expiry_period_in_days", value)

    @property
    @pulumi.getter(name="lastUsedAt")
    def last_used_at(self) -> Optional[pulumi.Input[str]]:
        """
        API Token last used timestamp
        """
        return pulumi.get(self, "last_used_at")

    @last_used_at.setter
    def last_used_at(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "last_used_at", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        API Token name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def roles(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ApiTokenRoleArgs']]]]:
        """
        The roles assigned to the API Token
        """
        return pulumi.get(self, "roles")

    @roles.setter
    def roles(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ApiTokenRoleArgs']]]]):
        pulumi.set(self, "roles", value)

    @property
    @pulumi.getter(name="shortToken")
    def short_token(self) -> Optional[pulumi.Input[str]]:
        """
        API Token short token
        """
        return pulumi.get(self, "short_token")

    @short_token.setter
    def short_token(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "short_token", value)

    @property
    @pulumi.getter(name="startAt")
    def start_at(self) -> Optional[pulumi.Input[str]]:
        """
        time when the API token will become valid in UTC
        """
        return pulumi.get(self, "start_at")

    @start_at.setter
    def start_at(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "start_at", value)

    @property
    @pulumi.getter
    def token(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "token")

    @token.setter
    def token(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "token", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        API Token type - if changing this value, the API Token will be recreated with the new type
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> Optional[pulumi.Input[str]]:
        """
        API Token last updated timestamp
        """
        return pulumi.get(self, "updated_at")

    @updated_at.setter
    def updated_at(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "updated_at", value)

    @property
    @pulumi.getter(name="updatedBy")
    def updated_by(self) -> Optional[pulumi.Input['ApiTokenUpdatedByArgs']]:
        """
        API Token updater
        """
        return pulumi.get(self, "updated_by")

    @updated_by.setter
    def updated_by(self, value: Optional[pulumi.Input['ApiTokenUpdatedByArgs']]):
        pulumi.set(self, "updated_by", value)


class ApiToken(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 expiry_period_in_days: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 roles: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ApiTokenRoleArgs', 'ApiTokenRoleArgsDict']]]]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        API Token resource

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] description: API Token description
        :param pulumi.Input[int] expiry_period_in_days: API Token expiry period in days
        :param pulumi.Input[str] name: API Token name
        :param pulumi.Input[Sequence[pulumi.Input[Union['ApiTokenRoleArgs', 'ApiTokenRoleArgsDict']]]] roles: The roles assigned to the API Token
        :param pulumi.Input[str] type: API Token type - if changing this value, the API Token will be recreated with the new type
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ApiTokenArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        API Token resource

        :param str resource_name: The name of the resource.
        :param ApiTokenArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ApiTokenArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 expiry_period_in_days: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 roles: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ApiTokenRoleArgs', 'ApiTokenRoleArgsDict']]]]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ApiTokenArgs.__new__(ApiTokenArgs)

            __props__.__dict__["description"] = description
            __props__.__dict__["expiry_period_in_days"] = expiry_period_in_days
            __props__.__dict__["name"] = name
            if roles is None and not opts.urn:
                raise TypeError("Missing required property 'roles'")
            __props__.__dict__["roles"] = roles
            if type is None and not opts.urn:
                raise TypeError("Missing required property 'type'")
            __props__.__dict__["type"] = type
            __props__.__dict__["created_at"] = None
            __props__.__dict__["created_by"] = None
            __props__.__dict__["end_at"] = None
            __props__.__dict__["last_used_at"] = None
            __props__.__dict__["short_token"] = None
            __props__.__dict__["start_at"] = None
            __props__.__dict__["token"] = None
            __props__.__dict__["updated_at"] = None
            __props__.__dict__["updated_by"] = None
        secret_opts = pulumi.ResourceOptions(additional_secret_outputs=["token"])
        opts = pulumi.ResourceOptions.merge(opts, secret_opts)
        super(ApiToken, __self__).__init__(
            'astronomer:index/apiToken:ApiToken',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            created_at: Optional[pulumi.Input[str]] = None,
            created_by: Optional[pulumi.Input[Union['ApiTokenCreatedByArgs', 'ApiTokenCreatedByArgsDict']]] = None,
            description: Optional[pulumi.Input[str]] = None,
            end_at: Optional[pulumi.Input[str]] = None,
            expiry_period_in_days: Optional[pulumi.Input[int]] = None,
            last_used_at: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            roles: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ApiTokenRoleArgs', 'ApiTokenRoleArgsDict']]]]] = None,
            short_token: Optional[pulumi.Input[str]] = None,
            start_at: Optional[pulumi.Input[str]] = None,
            token: Optional[pulumi.Input[str]] = None,
            type: Optional[pulumi.Input[str]] = None,
            updated_at: Optional[pulumi.Input[str]] = None,
            updated_by: Optional[pulumi.Input[Union['ApiTokenUpdatedByArgs', 'ApiTokenUpdatedByArgsDict']]] = None) -> 'ApiToken':
        """
        Get an existing ApiToken resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] created_at: API Token creation timestamp
        :param pulumi.Input[Union['ApiTokenCreatedByArgs', 'ApiTokenCreatedByArgsDict']] created_by: API Token creator
        :param pulumi.Input[str] description: API Token description
        :param pulumi.Input[str] end_at: time when the API token will expire in UTC
        :param pulumi.Input[int] expiry_period_in_days: API Token expiry period in days
        :param pulumi.Input[str] last_used_at: API Token last used timestamp
        :param pulumi.Input[str] name: API Token name
        :param pulumi.Input[Sequence[pulumi.Input[Union['ApiTokenRoleArgs', 'ApiTokenRoleArgsDict']]]] roles: The roles assigned to the API Token
        :param pulumi.Input[str] short_token: API Token short token
        :param pulumi.Input[str] start_at: time when the API token will become valid in UTC
        :param pulumi.Input[str] type: API Token type - if changing this value, the API Token will be recreated with the new type
        :param pulumi.Input[str] updated_at: API Token last updated timestamp
        :param pulumi.Input[Union['ApiTokenUpdatedByArgs', 'ApiTokenUpdatedByArgsDict']] updated_by: API Token updater
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ApiTokenState.__new__(_ApiTokenState)

        __props__.__dict__["created_at"] = created_at
        __props__.__dict__["created_by"] = created_by
        __props__.__dict__["description"] = description
        __props__.__dict__["end_at"] = end_at
        __props__.__dict__["expiry_period_in_days"] = expiry_period_in_days
        __props__.__dict__["last_used_at"] = last_used_at
        __props__.__dict__["name"] = name
        __props__.__dict__["roles"] = roles
        __props__.__dict__["short_token"] = short_token
        __props__.__dict__["start_at"] = start_at
        __props__.__dict__["token"] = token
        __props__.__dict__["type"] = type
        __props__.__dict__["updated_at"] = updated_at
        __props__.__dict__["updated_by"] = updated_by
        return ApiToken(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> pulumi.Output[str]:
        """
        API Token creation timestamp
        """
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> pulumi.Output['outputs.ApiTokenCreatedBy']:
        """
        API Token creator
        """
        return pulumi.get(self, "created_by")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        """
        API Token description
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="endAt")
    def end_at(self) -> pulumi.Output[str]:
        """
        time when the API token will expire in UTC
        """
        return pulumi.get(self, "end_at")

    @property
    @pulumi.getter(name="expiryPeriodInDays")
    def expiry_period_in_days(self) -> pulumi.Output[Optional[int]]:
        """
        API Token expiry period in days
        """
        return pulumi.get(self, "expiry_period_in_days")

    @property
    @pulumi.getter(name="lastUsedAt")
    def last_used_at(self) -> pulumi.Output[str]:
        """
        API Token last used timestamp
        """
        return pulumi.get(self, "last_used_at")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        API Token name
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def roles(self) -> pulumi.Output[Sequence['outputs.ApiTokenRole']]:
        """
        The roles assigned to the API Token
        """
        return pulumi.get(self, "roles")

    @property
    @pulumi.getter(name="shortToken")
    def short_token(self) -> pulumi.Output[str]:
        """
        API Token short token
        """
        return pulumi.get(self, "short_token")

    @property
    @pulumi.getter(name="startAt")
    def start_at(self) -> pulumi.Output[str]:
        """
        time when the API token will become valid in UTC
        """
        return pulumi.get(self, "start_at")

    @property
    @pulumi.getter
    def token(self) -> pulumi.Output[str]:
        return pulumi.get(self, "token")

    @property
    @pulumi.getter
    def type(self) -> pulumi.Output[str]:
        """
        API Token type - if changing this value, the API Token will be recreated with the new type
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> pulumi.Output[str]:
        """
        API Token last updated timestamp
        """
        return pulumi.get(self, "updated_at")

    @property
    @pulumi.getter(name="updatedBy")
    def updated_by(self) -> pulumi.Output['outputs.ApiTokenUpdatedBy']:
        """
        API Token updater
        """
        return pulumi.get(self, "updated_by")

