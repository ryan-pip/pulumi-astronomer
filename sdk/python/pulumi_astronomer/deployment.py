# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['DeploymentArgs', 'Deployment']

@pulumi.input_type
class DeploymentArgs:
    def __init__(__self__, *,
                 default_task_pod_cpu: pulumi.Input[str],
                 default_task_pod_memory: pulumi.Input[str],
                 executor: pulumi.Input[str],
                 is_cicd_enforced: pulumi.Input[bool],
                 is_dag_deploy_enabled: pulumi.Input[bool],
                 is_high_availability: pulumi.Input[bool],
                 resource_quota_cpu: pulumi.Input[str],
                 resource_quota_memory: pulumi.Input[str],
                 scheduler_size: pulumi.Input[str],
                 type: pulumi.Input[str],
                 workspace_id: pulumi.Input[str],
                 astro_runtime_version: Optional[pulumi.Input[str]] = None,
                 cloud_provider: Optional[pulumi.Input[str]] = None,
                 cluster_id: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 environment_variables: Optional[pulumi.Input[Sequence[pulumi.Input['DeploymentEnvironmentVariableArgs']]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 region: Optional[pulumi.Input[str]] = None,
                 task_pod_node_pool_id: Optional[pulumi.Input[str]] = None,
                 worker_queues: Optional[pulumi.Input[Sequence[pulumi.Input['DeploymentWorkerQueueArgs']]]] = None):
        """
        The set of arguments for constructing a Deployment resource.
        :param pulumi.Input[str] default_task_pod_cpu: The default CPU resource usage for a worker Pod when running the Kubernetes executor or KubernetesPodOperator. Units are in number of CPU cores.
        :param pulumi.Input[str] default_task_pod_memory: The default memory resource usage for a worker Pod when running the Kubernetes executor or KubernetesPodOperator. Units are in `Gi`. This value must always be twice the value of `DefaultTaskPodCpu`.
        :param pulumi.Input[str] executor: The Deployment's executor type.
        :param pulumi.Input[bool] is_cicd_enforced: Whether the Deployment requires that all deploys are made through CI/CD.
        :param pulumi.Input[bool] is_dag_deploy_enabled: Whether the Deployment has DAG deploys enabled.
        :param pulumi.Input[bool] is_high_availability: Whether the Deployment is configured for high availability. If `true`, multiple scheduler pods will be online.
        :param pulumi.Input[str] resource_quota_cpu: The CPU quota for worker Pods when running the Kubernetes executor or KubernetesPodOperator. If current CPU usage across all workers exceeds the quota, no new worker Pods can be scheduled. Units are in number of CPU cores.
        :param pulumi.Input[str] resource_quota_memory: The memory quota for worker Pods when running the Kubernetes executor or KubernetesPodOperator. If current memory usage across all workers exceeds the quota, no new worker Pods can be scheduled. Units are in `Gi`. This value must always be twice the value of `ResourceQuotaCpu`.
        :param pulumi.Input[str] scheduler_size: The size of the scheduler pod.
        :param pulumi.Input[str] type: The type of the Deployment.
        :param pulumi.Input[str] workspace_id: The ID of the workspace to which the Deployment belongs.
        :param pulumi.Input[str] astro_runtime_version: Deployment's Astro Runtime version.
        :param pulumi.Input[str] cloud_provider: The cloud provider for the Deployment's cluster. Optional if `ClusterId` is specified.
        :param pulumi.Input[str] cluster_id: The ID of the cluster where the Deployment will be created.
        :param pulumi.Input[str] description: The Deployment's description.
        :param pulumi.Input[Sequence[pulumi.Input['DeploymentEnvironmentVariableArgs']]] environment_variables: List of environment variables to add to the Deployment.
        :param pulumi.Input[str] name: The Deployment's name.
        :param pulumi.Input[str] region: The region to host the Deployment in. Optional if `ClusterId` is specified.
        :param pulumi.Input[str] task_pod_node_pool_id: The node pool ID for the task pods. For KUBERNETES executor only.
        :param pulumi.Input[Sequence[pulumi.Input['DeploymentWorkerQueueArgs']]] worker_queues: The list of worker queues configured for the Deployment. Applies only when `Executor` is `CELERY`. At least 1 worker queue is needed. All Deployments need at least 1 worker queue called `default`.
        """
        pulumi.set(__self__, "default_task_pod_cpu", default_task_pod_cpu)
        pulumi.set(__self__, "default_task_pod_memory", default_task_pod_memory)
        pulumi.set(__self__, "executor", executor)
        pulumi.set(__self__, "is_cicd_enforced", is_cicd_enforced)
        pulumi.set(__self__, "is_dag_deploy_enabled", is_dag_deploy_enabled)
        pulumi.set(__self__, "is_high_availability", is_high_availability)
        pulumi.set(__self__, "resource_quota_cpu", resource_quota_cpu)
        pulumi.set(__self__, "resource_quota_memory", resource_quota_memory)
        pulumi.set(__self__, "scheduler_size", scheduler_size)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "workspace_id", workspace_id)
        if astro_runtime_version is not None:
            pulumi.set(__self__, "astro_runtime_version", astro_runtime_version)
        if cloud_provider is not None:
            pulumi.set(__self__, "cloud_provider", cloud_provider)
        if cluster_id is not None:
            pulumi.set(__self__, "cluster_id", cluster_id)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if environment_variables is not None:
            pulumi.set(__self__, "environment_variables", environment_variables)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if task_pod_node_pool_id is not None:
            pulumi.set(__self__, "task_pod_node_pool_id", task_pod_node_pool_id)
        if worker_queues is not None:
            pulumi.set(__self__, "worker_queues", worker_queues)

    @property
    @pulumi.getter(name="defaultTaskPodCpu")
    def default_task_pod_cpu(self) -> pulumi.Input[str]:
        """
        The default CPU resource usage for a worker Pod when running the Kubernetes executor or KubernetesPodOperator. Units are in number of CPU cores.
        """
        return pulumi.get(self, "default_task_pod_cpu")

    @default_task_pod_cpu.setter
    def default_task_pod_cpu(self, value: pulumi.Input[str]):
        pulumi.set(self, "default_task_pod_cpu", value)

    @property
    @pulumi.getter(name="defaultTaskPodMemory")
    def default_task_pod_memory(self) -> pulumi.Input[str]:
        """
        The default memory resource usage for a worker Pod when running the Kubernetes executor or KubernetesPodOperator. Units are in `Gi`. This value must always be twice the value of `DefaultTaskPodCpu`.
        """
        return pulumi.get(self, "default_task_pod_memory")

    @default_task_pod_memory.setter
    def default_task_pod_memory(self, value: pulumi.Input[str]):
        pulumi.set(self, "default_task_pod_memory", value)

    @property
    @pulumi.getter
    def executor(self) -> pulumi.Input[str]:
        """
        The Deployment's executor type.
        """
        return pulumi.get(self, "executor")

    @executor.setter
    def executor(self, value: pulumi.Input[str]):
        pulumi.set(self, "executor", value)

    @property
    @pulumi.getter(name="isCicdEnforced")
    def is_cicd_enforced(self) -> pulumi.Input[bool]:
        """
        Whether the Deployment requires that all deploys are made through CI/CD.
        """
        return pulumi.get(self, "is_cicd_enforced")

    @is_cicd_enforced.setter
    def is_cicd_enforced(self, value: pulumi.Input[bool]):
        pulumi.set(self, "is_cicd_enforced", value)

    @property
    @pulumi.getter(name="isDagDeployEnabled")
    def is_dag_deploy_enabled(self) -> pulumi.Input[bool]:
        """
        Whether the Deployment has DAG deploys enabled.
        """
        return pulumi.get(self, "is_dag_deploy_enabled")

    @is_dag_deploy_enabled.setter
    def is_dag_deploy_enabled(self, value: pulumi.Input[bool]):
        pulumi.set(self, "is_dag_deploy_enabled", value)

    @property
    @pulumi.getter(name="isHighAvailability")
    def is_high_availability(self) -> pulumi.Input[bool]:
        """
        Whether the Deployment is configured for high availability. If `true`, multiple scheduler pods will be online.
        """
        return pulumi.get(self, "is_high_availability")

    @is_high_availability.setter
    def is_high_availability(self, value: pulumi.Input[bool]):
        pulumi.set(self, "is_high_availability", value)

    @property
    @pulumi.getter(name="resourceQuotaCpu")
    def resource_quota_cpu(self) -> pulumi.Input[str]:
        """
        The CPU quota for worker Pods when running the Kubernetes executor or KubernetesPodOperator. If current CPU usage across all workers exceeds the quota, no new worker Pods can be scheduled. Units are in number of CPU cores.
        """
        return pulumi.get(self, "resource_quota_cpu")

    @resource_quota_cpu.setter
    def resource_quota_cpu(self, value: pulumi.Input[str]):
        pulumi.set(self, "resource_quota_cpu", value)

    @property
    @pulumi.getter(name="resourceQuotaMemory")
    def resource_quota_memory(self) -> pulumi.Input[str]:
        """
        The memory quota for worker Pods when running the Kubernetes executor or KubernetesPodOperator. If current memory usage across all workers exceeds the quota, no new worker Pods can be scheduled. Units are in `Gi`. This value must always be twice the value of `ResourceQuotaCpu`.
        """
        return pulumi.get(self, "resource_quota_memory")

    @resource_quota_memory.setter
    def resource_quota_memory(self, value: pulumi.Input[str]):
        pulumi.set(self, "resource_quota_memory", value)

    @property
    @pulumi.getter(name="schedulerSize")
    def scheduler_size(self) -> pulumi.Input[str]:
        """
        The size of the scheduler pod.
        """
        return pulumi.get(self, "scheduler_size")

    @scheduler_size.setter
    def scheduler_size(self, value: pulumi.Input[str]):
        pulumi.set(self, "scheduler_size", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        The type of the Deployment.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="workspaceId")
    def workspace_id(self) -> pulumi.Input[str]:
        """
        The ID of the workspace to which the Deployment belongs.
        """
        return pulumi.get(self, "workspace_id")

    @workspace_id.setter
    def workspace_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "workspace_id", value)

    @property
    @pulumi.getter(name="astroRuntimeVersion")
    def astro_runtime_version(self) -> Optional[pulumi.Input[str]]:
        """
        Deployment's Astro Runtime version.
        """
        return pulumi.get(self, "astro_runtime_version")

    @astro_runtime_version.setter
    def astro_runtime_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "astro_runtime_version", value)

    @property
    @pulumi.getter(name="cloudProvider")
    def cloud_provider(self) -> Optional[pulumi.Input[str]]:
        """
        The cloud provider for the Deployment's cluster. Optional if `ClusterId` is specified.
        """
        return pulumi.get(self, "cloud_provider")

    @cloud_provider.setter
    def cloud_provider(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cloud_provider", value)

    @property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of the cluster where the Deployment will be created.
        """
        return pulumi.get(self, "cluster_id")

    @cluster_id.setter
    def cluster_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cluster_id", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        The Deployment's description.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="environmentVariables")
    def environment_variables(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DeploymentEnvironmentVariableArgs']]]]:
        """
        List of environment variables to add to the Deployment.
        """
        return pulumi.get(self, "environment_variables")

    @environment_variables.setter
    def environment_variables(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DeploymentEnvironmentVariableArgs']]]]):
        pulumi.set(self, "environment_variables", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The Deployment's name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[str]]:
        """
        The region to host the Deployment in. Optional if `ClusterId` is specified.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter(name="taskPodNodePoolId")
    def task_pod_node_pool_id(self) -> Optional[pulumi.Input[str]]:
        """
        The node pool ID for the task pods. For KUBERNETES executor only.
        """
        return pulumi.get(self, "task_pod_node_pool_id")

    @task_pod_node_pool_id.setter
    def task_pod_node_pool_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "task_pod_node_pool_id", value)

    @property
    @pulumi.getter(name="workerQueues")
    def worker_queues(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DeploymentWorkerQueueArgs']]]]:
        """
        The list of worker queues configured for the Deployment. Applies only when `Executor` is `CELERY`. At least 1 worker queue is needed. All Deployments need at least 1 worker queue called `default`.
        """
        return pulumi.get(self, "worker_queues")

    @worker_queues.setter
    def worker_queues(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DeploymentWorkerQueueArgs']]]]):
        pulumi.set(self, "worker_queues", value)


@pulumi.input_type
class _DeploymentState:
    def __init__(__self__, *,
                 astro_runtime_version: Optional[pulumi.Input[str]] = None,
                 cloud_provider: Optional[pulumi.Input[str]] = None,
                 cluster_id: Optional[pulumi.Input[str]] = None,
                 default_task_pod_cpu: Optional[pulumi.Input[str]] = None,
                 default_task_pod_memory: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 environment_variables: Optional[pulumi.Input[Sequence[pulumi.Input['DeploymentEnvironmentVariableArgs']]]] = None,
                 executor: Optional[pulumi.Input[str]] = None,
                 is_cicd_enforced: Optional[pulumi.Input[bool]] = None,
                 is_dag_deploy_enabled: Optional[pulumi.Input[bool]] = None,
                 is_high_availability: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 region: Optional[pulumi.Input[str]] = None,
                 resource_quota_cpu: Optional[pulumi.Input[str]] = None,
                 resource_quota_memory: Optional[pulumi.Input[str]] = None,
                 scheduler_size: Optional[pulumi.Input[str]] = None,
                 task_pod_node_pool_id: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 worker_queues: Optional[pulumi.Input[Sequence[pulumi.Input['DeploymentWorkerQueueArgs']]]] = None,
                 workload_identity: Optional[pulumi.Input[str]] = None,
                 workspace_id: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Deployment resources.
        :param pulumi.Input[str] astro_runtime_version: Deployment's Astro Runtime version.
        :param pulumi.Input[str] cloud_provider: The cloud provider for the Deployment's cluster. Optional if `ClusterId` is specified.
        :param pulumi.Input[str] cluster_id: The ID of the cluster where the Deployment will be created.
        :param pulumi.Input[str] default_task_pod_cpu: The default CPU resource usage for a worker Pod when running the Kubernetes executor or KubernetesPodOperator. Units are in number of CPU cores.
        :param pulumi.Input[str] default_task_pod_memory: The default memory resource usage for a worker Pod when running the Kubernetes executor or KubernetesPodOperator. Units are in `Gi`. This value must always be twice the value of `DefaultTaskPodCpu`.
        :param pulumi.Input[str] description: The Deployment's description.
        :param pulumi.Input[Sequence[pulumi.Input['DeploymentEnvironmentVariableArgs']]] environment_variables: List of environment variables to add to the Deployment.
        :param pulumi.Input[str] executor: The Deployment's executor type.
        :param pulumi.Input[bool] is_cicd_enforced: Whether the Deployment requires that all deploys are made through CI/CD.
        :param pulumi.Input[bool] is_dag_deploy_enabled: Whether the Deployment has DAG deploys enabled.
        :param pulumi.Input[bool] is_high_availability: Whether the Deployment is configured for high availability. If `true`, multiple scheduler pods will be online.
        :param pulumi.Input[str] name: The Deployment's name.
        :param pulumi.Input[str] region: The region to host the Deployment in. Optional if `ClusterId` is specified.
        :param pulumi.Input[str] resource_quota_cpu: The CPU quota for worker Pods when running the Kubernetes executor or KubernetesPodOperator. If current CPU usage across all workers exceeds the quota, no new worker Pods can be scheduled. Units are in number of CPU cores.
        :param pulumi.Input[str] resource_quota_memory: The memory quota for worker Pods when running the Kubernetes executor or KubernetesPodOperator. If current memory usage across all workers exceeds the quota, no new worker Pods can be scheduled. Units are in `Gi`. This value must always be twice the value of `ResourceQuotaCpu`.
        :param pulumi.Input[str] scheduler_size: The size of the scheduler pod.
        :param pulumi.Input[str] task_pod_node_pool_id: The node pool ID for the task pods. For KUBERNETES executor only.
        :param pulumi.Input[str] type: The type of the Deployment.
        :param pulumi.Input[Sequence[pulumi.Input['DeploymentWorkerQueueArgs']]] worker_queues: The list of worker queues configured for the Deployment. Applies only when `Executor` is `CELERY`. At least 1 worker queue is needed. All Deployments need at least 1 worker queue called `default`.
        :param pulumi.Input[str] workload_identity: The Deployment's workload identity.
        :param pulumi.Input[str] workspace_id: The ID of the workspace to which the Deployment belongs.
        """
        if astro_runtime_version is not None:
            pulumi.set(__self__, "astro_runtime_version", astro_runtime_version)
        if cloud_provider is not None:
            pulumi.set(__self__, "cloud_provider", cloud_provider)
        if cluster_id is not None:
            pulumi.set(__self__, "cluster_id", cluster_id)
        if default_task_pod_cpu is not None:
            pulumi.set(__self__, "default_task_pod_cpu", default_task_pod_cpu)
        if default_task_pod_memory is not None:
            pulumi.set(__self__, "default_task_pod_memory", default_task_pod_memory)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if environment_variables is not None:
            pulumi.set(__self__, "environment_variables", environment_variables)
        if executor is not None:
            pulumi.set(__self__, "executor", executor)
        if is_cicd_enforced is not None:
            pulumi.set(__self__, "is_cicd_enforced", is_cicd_enforced)
        if is_dag_deploy_enabled is not None:
            pulumi.set(__self__, "is_dag_deploy_enabled", is_dag_deploy_enabled)
        if is_high_availability is not None:
            pulumi.set(__self__, "is_high_availability", is_high_availability)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if resource_quota_cpu is not None:
            pulumi.set(__self__, "resource_quota_cpu", resource_quota_cpu)
        if resource_quota_memory is not None:
            pulumi.set(__self__, "resource_quota_memory", resource_quota_memory)
        if scheduler_size is not None:
            pulumi.set(__self__, "scheduler_size", scheduler_size)
        if task_pod_node_pool_id is not None:
            pulumi.set(__self__, "task_pod_node_pool_id", task_pod_node_pool_id)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if worker_queues is not None:
            pulumi.set(__self__, "worker_queues", worker_queues)
        if workload_identity is not None:
            pulumi.set(__self__, "workload_identity", workload_identity)
        if workspace_id is not None:
            pulumi.set(__self__, "workspace_id", workspace_id)

    @property
    @pulumi.getter(name="astroRuntimeVersion")
    def astro_runtime_version(self) -> Optional[pulumi.Input[str]]:
        """
        Deployment's Astro Runtime version.
        """
        return pulumi.get(self, "astro_runtime_version")

    @astro_runtime_version.setter
    def astro_runtime_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "astro_runtime_version", value)

    @property
    @pulumi.getter(name="cloudProvider")
    def cloud_provider(self) -> Optional[pulumi.Input[str]]:
        """
        The cloud provider for the Deployment's cluster. Optional if `ClusterId` is specified.
        """
        return pulumi.get(self, "cloud_provider")

    @cloud_provider.setter
    def cloud_provider(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cloud_provider", value)

    @property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of the cluster where the Deployment will be created.
        """
        return pulumi.get(self, "cluster_id")

    @cluster_id.setter
    def cluster_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cluster_id", value)

    @property
    @pulumi.getter(name="defaultTaskPodCpu")
    def default_task_pod_cpu(self) -> Optional[pulumi.Input[str]]:
        """
        The default CPU resource usage for a worker Pod when running the Kubernetes executor or KubernetesPodOperator. Units are in number of CPU cores.
        """
        return pulumi.get(self, "default_task_pod_cpu")

    @default_task_pod_cpu.setter
    def default_task_pod_cpu(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_task_pod_cpu", value)

    @property
    @pulumi.getter(name="defaultTaskPodMemory")
    def default_task_pod_memory(self) -> Optional[pulumi.Input[str]]:
        """
        The default memory resource usage for a worker Pod when running the Kubernetes executor or KubernetesPodOperator. Units are in `Gi`. This value must always be twice the value of `DefaultTaskPodCpu`.
        """
        return pulumi.get(self, "default_task_pod_memory")

    @default_task_pod_memory.setter
    def default_task_pod_memory(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_task_pod_memory", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        The Deployment's description.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="environmentVariables")
    def environment_variables(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DeploymentEnvironmentVariableArgs']]]]:
        """
        List of environment variables to add to the Deployment.
        """
        return pulumi.get(self, "environment_variables")

    @environment_variables.setter
    def environment_variables(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DeploymentEnvironmentVariableArgs']]]]):
        pulumi.set(self, "environment_variables", value)

    @property
    @pulumi.getter
    def executor(self) -> Optional[pulumi.Input[str]]:
        """
        The Deployment's executor type.
        """
        return pulumi.get(self, "executor")

    @executor.setter
    def executor(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "executor", value)

    @property
    @pulumi.getter(name="isCicdEnforced")
    def is_cicd_enforced(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether the Deployment requires that all deploys are made through CI/CD.
        """
        return pulumi.get(self, "is_cicd_enforced")

    @is_cicd_enforced.setter
    def is_cicd_enforced(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_cicd_enforced", value)

    @property
    @pulumi.getter(name="isDagDeployEnabled")
    def is_dag_deploy_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether the Deployment has DAG deploys enabled.
        """
        return pulumi.get(self, "is_dag_deploy_enabled")

    @is_dag_deploy_enabled.setter
    def is_dag_deploy_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_dag_deploy_enabled", value)

    @property
    @pulumi.getter(name="isHighAvailability")
    def is_high_availability(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether the Deployment is configured for high availability. If `true`, multiple scheduler pods will be online.
        """
        return pulumi.get(self, "is_high_availability")

    @is_high_availability.setter
    def is_high_availability(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_high_availability", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The Deployment's name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[str]]:
        """
        The region to host the Deployment in. Optional if `ClusterId` is specified.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter(name="resourceQuotaCpu")
    def resource_quota_cpu(self) -> Optional[pulumi.Input[str]]:
        """
        The CPU quota for worker Pods when running the Kubernetes executor or KubernetesPodOperator. If current CPU usage across all workers exceeds the quota, no new worker Pods can be scheduled. Units are in number of CPU cores.
        """
        return pulumi.get(self, "resource_quota_cpu")

    @resource_quota_cpu.setter
    def resource_quota_cpu(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_quota_cpu", value)

    @property
    @pulumi.getter(name="resourceQuotaMemory")
    def resource_quota_memory(self) -> Optional[pulumi.Input[str]]:
        """
        The memory quota for worker Pods when running the Kubernetes executor or KubernetesPodOperator. If current memory usage across all workers exceeds the quota, no new worker Pods can be scheduled. Units are in `Gi`. This value must always be twice the value of `ResourceQuotaCpu`.
        """
        return pulumi.get(self, "resource_quota_memory")

    @resource_quota_memory.setter
    def resource_quota_memory(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_quota_memory", value)

    @property
    @pulumi.getter(name="schedulerSize")
    def scheduler_size(self) -> Optional[pulumi.Input[str]]:
        """
        The size of the scheduler pod.
        """
        return pulumi.get(self, "scheduler_size")

    @scheduler_size.setter
    def scheduler_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "scheduler_size", value)

    @property
    @pulumi.getter(name="taskPodNodePoolId")
    def task_pod_node_pool_id(self) -> Optional[pulumi.Input[str]]:
        """
        The node pool ID for the task pods. For KUBERNETES executor only.
        """
        return pulumi.get(self, "task_pod_node_pool_id")

    @task_pod_node_pool_id.setter
    def task_pod_node_pool_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "task_pod_node_pool_id", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        The type of the Deployment.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="workerQueues")
    def worker_queues(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DeploymentWorkerQueueArgs']]]]:
        """
        The list of worker queues configured for the Deployment. Applies only when `Executor` is `CELERY`. At least 1 worker queue is needed. All Deployments need at least 1 worker queue called `default`.
        """
        return pulumi.get(self, "worker_queues")

    @worker_queues.setter
    def worker_queues(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DeploymentWorkerQueueArgs']]]]):
        pulumi.set(self, "worker_queues", value)

    @property
    @pulumi.getter(name="workloadIdentity")
    def workload_identity(self) -> Optional[pulumi.Input[str]]:
        """
        The Deployment's workload identity.
        """
        return pulumi.get(self, "workload_identity")

    @workload_identity.setter
    def workload_identity(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "workload_identity", value)

    @property
    @pulumi.getter(name="workspaceId")
    def workspace_id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of the workspace to which the Deployment belongs.
        """
        return pulumi.get(self, "workspace_id")

    @workspace_id.setter
    def workspace_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "workspace_id", value)


class Deployment(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 astro_runtime_version: Optional[pulumi.Input[str]] = None,
                 cloud_provider: Optional[pulumi.Input[str]] = None,
                 cluster_id: Optional[pulumi.Input[str]] = None,
                 default_task_pod_cpu: Optional[pulumi.Input[str]] = None,
                 default_task_pod_memory: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 environment_variables: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['DeploymentEnvironmentVariableArgs']]]]] = None,
                 executor: Optional[pulumi.Input[str]] = None,
                 is_cicd_enforced: Optional[pulumi.Input[bool]] = None,
                 is_dag_deploy_enabled: Optional[pulumi.Input[bool]] = None,
                 is_high_availability: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 region: Optional[pulumi.Input[str]] = None,
                 resource_quota_cpu: Optional[pulumi.Input[str]] = None,
                 resource_quota_memory: Optional[pulumi.Input[str]] = None,
                 scheduler_size: Optional[pulumi.Input[str]] = None,
                 task_pod_node_pool_id: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 worker_queues: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['DeploymentWorkerQueueArgs']]]]] = None,
                 workspace_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        An Astro Deployment is an Airflow environment that is powered by all core Airflow components.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] astro_runtime_version: Deployment's Astro Runtime version.
        :param pulumi.Input[str] cloud_provider: The cloud provider for the Deployment's cluster. Optional if `ClusterId` is specified.
        :param pulumi.Input[str] cluster_id: The ID of the cluster where the Deployment will be created.
        :param pulumi.Input[str] default_task_pod_cpu: The default CPU resource usage for a worker Pod when running the Kubernetes executor or KubernetesPodOperator. Units are in number of CPU cores.
        :param pulumi.Input[str] default_task_pod_memory: The default memory resource usage for a worker Pod when running the Kubernetes executor or KubernetesPodOperator. Units are in `Gi`. This value must always be twice the value of `DefaultTaskPodCpu`.
        :param pulumi.Input[str] description: The Deployment's description.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['DeploymentEnvironmentVariableArgs']]]] environment_variables: List of environment variables to add to the Deployment.
        :param pulumi.Input[str] executor: The Deployment's executor type.
        :param pulumi.Input[bool] is_cicd_enforced: Whether the Deployment requires that all deploys are made through CI/CD.
        :param pulumi.Input[bool] is_dag_deploy_enabled: Whether the Deployment has DAG deploys enabled.
        :param pulumi.Input[bool] is_high_availability: Whether the Deployment is configured for high availability. If `true`, multiple scheduler pods will be online.
        :param pulumi.Input[str] name: The Deployment's name.
        :param pulumi.Input[str] region: The region to host the Deployment in. Optional if `ClusterId` is specified.
        :param pulumi.Input[str] resource_quota_cpu: The CPU quota for worker Pods when running the Kubernetes executor or KubernetesPodOperator. If current CPU usage across all workers exceeds the quota, no new worker Pods can be scheduled. Units are in number of CPU cores.
        :param pulumi.Input[str] resource_quota_memory: The memory quota for worker Pods when running the Kubernetes executor or KubernetesPodOperator. If current memory usage across all workers exceeds the quota, no new worker Pods can be scheduled. Units are in `Gi`. This value must always be twice the value of `ResourceQuotaCpu`.
        :param pulumi.Input[str] scheduler_size: The size of the scheduler pod.
        :param pulumi.Input[str] task_pod_node_pool_id: The node pool ID for the task pods. For KUBERNETES executor only.
        :param pulumi.Input[str] type: The type of the Deployment.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['DeploymentWorkerQueueArgs']]]] worker_queues: The list of worker queues configured for the Deployment. Applies only when `Executor` is `CELERY`. At least 1 worker queue is needed. All Deployments need at least 1 worker queue called `default`.
        :param pulumi.Input[str] workspace_id: The ID of the workspace to which the Deployment belongs.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: DeploymentArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        An Astro Deployment is an Airflow environment that is powered by all core Airflow components.

        :param str resource_name: The name of the resource.
        :param DeploymentArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(DeploymentArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 astro_runtime_version: Optional[pulumi.Input[str]] = None,
                 cloud_provider: Optional[pulumi.Input[str]] = None,
                 cluster_id: Optional[pulumi.Input[str]] = None,
                 default_task_pod_cpu: Optional[pulumi.Input[str]] = None,
                 default_task_pod_memory: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 environment_variables: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['DeploymentEnvironmentVariableArgs']]]]] = None,
                 executor: Optional[pulumi.Input[str]] = None,
                 is_cicd_enforced: Optional[pulumi.Input[bool]] = None,
                 is_dag_deploy_enabled: Optional[pulumi.Input[bool]] = None,
                 is_high_availability: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 region: Optional[pulumi.Input[str]] = None,
                 resource_quota_cpu: Optional[pulumi.Input[str]] = None,
                 resource_quota_memory: Optional[pulumi.Input[str]] = None,
                 scheduler_size: Optional[pulumi.Input[str]] = None,
                 task_pod_node_pool_id: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 worker_queues: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['DeploymentWorkerQueueArgs']]]]] = None,
                 workspace_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = DeploymentArgs.__new__(DeploymentArgs)

            __props__.__dict__["astro_runtime_version"] = astro_runtime_version
            __props__.__dict__["cloud_provider"] = cloud_provider
            __props__.__dict__["cluster_id"] = cluster_id
            if default_task_pod_cpu is None and not opts.urn:
                raise TypeError("Missing required property 'default_task_pod_cpu'")
            __props__.__dict__["default_task_pod_cpu"] = default_task_pod_cpu
            if default_task_pod_memory is None and not opts.urn:
                raise TypeError("Missing required property 'default_task_pod_memory'")
            __props__.__dict__["default_task_pod_memory"] = default_task_pod_memory
            __props__.__dict__["description"] = description
            __props__.__dict__["environment_variables"] = environment_variables
            if executor is None and not opts.urn:
                raise TypeError("Missing required property 'executor'")
            __props__.__dict__["executor"] = executor
            if is_cicd_enforced is None and not opts.urn:
                raise TypeError("Missing required property 'is_cicd_enforced'")
            __props__.__dict__["is_cicd_enforced"] = is_cicd_enforced
            if is_dag_deploy_enabled is None and not opts.urn:
                raise TypeError("Missing required property 'is_dag_deploy_enabled'")
            __props__.__dict__["is_dag_deploy_enabled"] = is_dag_deploy_enabled
            if is_high_availability is None and not opts.urn:
                raise TypeError("Missing required property 'is_high_availability'")
            __props__.__dict__["is_high_availability"] = is_high_availability
            __props__.__dict__["name"] = name
            __props__.__dict__["region"] = region
            if resource_quota_cpu is None and not opts.urn:
                raise TypeError("Missing required property 'resource_quota_cpu'")
            __props__.__dict__["resource_quota_cpu"] = resource_quota_cpu
            if resource_quota_memory is None and not opts.urn:
                raise TypeError("Missing required property 'resource_quota_memory'")
            __props__.__dict__["resource_quota_memory"] = resource_quota_memory
            if scheduler_size is None and not opts.urn:
                raise TypeError("Missing required property 'scheduler_size'")
            __props__.__dict__["scheduler_size"] = scheduler_size
            __props__.__dict__["task_pod_node_pool_id"] = task_pod_node_pool_id
            if type is None and not opts.urn:
                raise TypeError("Missing required property 'type'")
            __props__.__dict__["type"] = type
            __props__.__dict__["worker_queues"] = worker_queues
            if workspace_id is None and not opts.urn:
                raise TypeError("Missing required property 'workspace_id'")
            __props__.__dict__["workspace_id"] = workspace_id
            __props__.__dict__["workload_identity"] = None
        super(Deployment, __self__).__init__(
            'astronomer:index/deployment:Deployment',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            astro_runtime_version: Optional[pulumi.Input[str]] = None,
            cloud_provider: Optional[pulumi.Input[str]] = None,
            cluster_id: Optional[pulumi.Input[str]] = None,
            default_task_pod_cpu: Optional[pulumi.Input[str]] = None,
            default_task_pod_memory: Optional[pulumi.Input[str]] = None,
            description: Optional[pulumi.Input[str]] = None,
            environment_variables: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['DeploymentEnvironmentVariableArgs']]]]] = None,
            executor: Optional[pulumi.Input[str]] = None,
            is_cicd_enforced: Optional[pulumi.Input[bool]] = None,
            is_dag_deploy_enabled: Optional[pulumi.Input[bool]] = None,
            is_high_availability: Optional[pulumi.Input[bool]] = None,
            name: Optional[pulumi.Input[str]] = None,
            region: Optional[pulumi.Input[str]] = None,
            resource_quota_cpu: Optional[pulumi.Input[str]] = None,
            resource_quota_memory: Optional[pulumi.Input[str]] = None,
            scheduler_size: Optional[pulumi.Input[str]] = None,
            task_pod_node_pool_id: Optional[pulumi.Input[str]] = None,
            type: Optional[pulumi.Input[str]] = None,
            worker_queues: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['DeploymentWorkerQueueArgs']]]]] = None,
            workload_identity: Optional[pulumi.Input[str]] = None,
            workspace_id: Optional[pulumi.Input[str]] = None) -> 'Deployment':
        """
        Get an existing Deployment resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] astro_runtime_version: Deployment's Astro Runtime version.
        :param pulumi.Input[str] cloud_provider: The cloud provider for the Deployment's cluster. Optional if `ClusterId` is specified.
        :param pulumi.Input[str] cluster_id: The ID of the cluster where the Deployment will be created.
        :param pulumi.Input[str] default_task_pod_cpu: The default CPU resource usage for a worker Pod when running the Kubernetes executor or KubernetesPodOperator. Units are in number of CPU cores.
        :param pulumi.Input[str] default_task_pod_memory: The default memory resource usage for a worker Pod when running the Kubernetes executor or KubernetesPodOperator. Units are in `Gi`. This value must always be twice the value of `DefaultTaskPodCpu`.
        :param pulumi.Input[str] description: The Deployment's description.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['DeploymentEnvironmentVariableArgs']]]] environment_variables: List of environment variables to add to the Deployment.
        :param pulumi.Input[str] executor: The Deployment's executor type.
        :param pulumi.Input[bool] is_cicd_enforced: Whether the Deployment requires that all deploys are made through CI/CD.
        :param pulumi.Input[bool] is_dag_deploy_enabled: Whether the Deployment has DAG deploys enabled.
        :param pulumi.Input[bool] is_high_availability: Whether the Deployment is configured for high availability. If `true`, multiple scheduler pods will be online.
        :param pulumi.Input[str] name: The Deployment's name.
        :param pulumi.Input[str] region: The region to host the Deployment in. Optional if `ClusterId` is specified.
        :param pulumi.Input[str] resource_quota_cpu: The CPU quota for worker Pods when running the Kubernetes executor or KubernetesPodOperator. If current CPU usage across all workers exceeds the quota, no new worker Pods can be scheduled. Units are in number of CPU cores.
        :param pulumi.Input[str] resource_quota_memory: The memory quota for worker Pods when running the Kubernetes executor or KubernetesPodOperator. If current memory usage across all workers exceeds the quota, no new worker Pods can be scheduled. Units are in `Gi`. This value must always be twice the value of `ResourceQuotaCpu`.
        :param pulumi.Input[str] scheduler_size: The size of the scheduler pod.
        :param pulumi.Input[str] task_pod_node_pool_id: The node pool ID for the task pods. For KUBERNETES executor only.
        :param pulumi.Input[str] type: The type of the Deployment.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['DeploymentWorkerQueueArgs']]]] worker_queues: The list of worker queues configured for the Deployment. Applies only when `Executor` is `CELERY`. At least 1 worker queue is needed. All Deployments need at least 1 worker queue called `default`.
        :param pulumi.Input[str] workload_identity: The Deployment's workload identity.
        :param pulumi.Input[str] workspace_id: The ID of the workspace to which the Deployment belongs.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _DeploymentState.__new__(_DeploymentState)

        __props__.__dict__["astro_runtime_version"] = astro_runtime_version
        __props__.__dict__["cloud_provider"] = cloud_provider
        __props__.__dict__["cluster_id"] = cluster_id
        __props__.__dict__["default_task_pod_cpu"] = default_task_pod_cpu
        __props__.__dict__["default_task_pod_memory"] = default_task_pod_memory
        __props__.__dict__["description"] = description
        __props__.__dict__["environment_variables"] = environment_variables
        __props__.__dict__["executor"] = executor
        __props__.__dict__["is_cicd_enforced"] = is_cicd_enforced
        __props__.__dict__["is_dag_deploy_enabled"] = is_dag_deploy_enabled
        __props__.__dict__["is_high_availability"] = is_high_availability
        __props__.__dict__["name"] = name
        __props__.__dict__["region"] = region
        __props__.__dict__["resource_quota_cpu"] = resource_quota_cpu
        __props__.__dict__["resource_quota_memory"] = resource_quota_memory
        __props__.__dict__["scheduler_size"] = scheduler_size
        __props__.__dict__["task_pod_node_pool_id"] = task_pod_node_pool_id
        __props__.__dict__["type"] = type
        __props__.__dict__["worker_queues"] = worker_queues
        __props__.__dict__["workload_identity"] = workload_identity
        __props__.__dict__["workspace_id"] = workspace_id
        return Deployment(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="astroRuntimeVersion")
    def astro_runtime_version(self) -> pulumi.Output[Optional[str]]:
        """
        Deployment's Astro Runtime version.
        """
        return pulumi.get(self, "astro_runtime_version")

    @property
    @pulumi.getter(name="cloudProvider")
    def cloud_provider(self) -> pulumi.Output[str]:
        """
        The cloud provider for the Deployment's cluster. Optional if `ClusterId` is specified.
        """
        return pulumi.get(self, "cloud_provider")

    @property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> pulumi.Output[Optional[str]]:
        """
        The ID of the cluster where the Deployment will be created.
        """
        return pulumi.get(self, "cluster_id")

    @property
    @pulumi.getter(name="defaultTaskPodCpu")
    def default_task_pod_cpu(self) -> pulumi.Output[str]:
        """
        The default CPU resource usage for a worker Pod when running the Kubernetes executor or KubernetesPodOperator. Units are in number of CPU cores.
        """
        return pulumi.get(self, "default_task_pod_cpu")

    @property
    @pulumi.getter(name="defaultTaskPodMemory")
    def default_task_pod_memory(self) -> pulumi.Output[str]:
        """
        The default memory resource usage for a worker Pod when running the Kubernetes executor or KubernetesPodOperator. Units are in `Gi`. This value must always be twice the value of `DefaultTaskPodCpu`.
        """
        return pulumi.get(self, "default_task_pod_memory")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        """
        The Deployment's description.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="environmentVariables")
    def environment_variables(self) -> pulumi.Output[Optional[Sequence['outputs.DeploymentEnvironmentVariable']]]:
        """
        List of environment variables to add to the Deployment.
        """
        return pulumi.get(self, "environment_variables")

    @property
    @pulumi.getter
    def executor(self) -> pulumi.Output[str]:
        """
        The Deployment's executor type.
        """
        return pulumi.get(self, "executor")

    @property
    @pulumi.getter(name="isCicdEnforced")
    def is_cicd_enforced(self) -> pulumi.Output[bool]:
        """
        Whether the Deployment requires that all deploys are made through CI/CD.
        """
        return pulumi.get(self, "is_cicd_enforced")

    @property
    @pulumi.getter(name="isDagDeployEnabled")
    def is_dag_deploy_enabled(self) -> pulumi.Output[bool]:
        """
        Whether the Deployment has DAG deploys enabled.
        """
        return pulumi.get(self, "is_dag_deploy_enabled")

    @property
    @pulumi.getter(name="isHighAvailability")
    def is_high_availability(self) -> pulumi.Output[bool]:
        """
        Whether the Deployment is configured for high availability. If `true`, multiple scheduler pods will be online.
        """
        return pulumi.get(self, "is_high_availability")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        The Deployment's name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def region(self) -> pulumi.Output[Optional[str]]:
        """
        The region to host the Deployment in. Optional if `ClusterId` is specified.
        """
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="resourceQuotaCpu")
    def resource_quota_cpu(self) -> pulumi.Output[str]:
        """
        The CPU quota for worker Pods when running the Kubernetes executor or KubernetesPodOperator. If current CPU usage across all workers exceeds the quota, no new worker Pods can be scheduled. Units are in number of CPU cores.
        """
        return pulumi.get(self, "resource_quota_cpu")

    @property
    @pulumi.getter(name="resourceQuotaMemory")
    def resource_quota_memory(self) -> pulumi.Output[str]:
        """
        The memory quota for worker Pods when running the Kubernetes executor or KubernetesPodOperator. If current memory usage across all workers exceeds the quota, no new worker Pods can be scheduled. Units are in `Gi`. This value must always be twice the value of `ResourceQuotaCpu`.
        """
        return pulumi.get(self, "resource_quota_memory")

    @property
    @pulumi.getter(name="schedulerSize")
    def scheduler_size(self) -> pulumi.Output[str]:
        """
        The size of the scheduler pod.
        """
        return pulumi.get(self, "scheduler_size")

    @property
    @pulumi.getter(name="taskPodNodePoolId")
    def task_pod_node_pool_id(self) -> pulumi.Output[Optional[str]]:
        """
        The node pool ID for the task pods. For KUBERNETES executor only.
        """
        return pulumi.get(self, "task_pod_node_pool_id")

    @property
    @pulumi.getter
    def type(self) -> pulumi.Output[str]:
        """
        The type of the Deployment.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="workerQueues")
    def worker_queues(self) -> pulumi.Output[Optional[Sequence['outputs.DeploymentWorkerQueue']]]:
        """
        The list of worker queues configured for the Deployment. Applies only when `Executor` is `CELERY`. At least 1 worker queue is needed. All Deployments need at least 1 worker queue called `default`.
        """
        return pulumi.get(self, "worker_queues")

    @property
    @pulumi.getter(name="workloadIdentity")
    def workload_identity(self) -> pulumi.Output[str]:
        """
        The Deployment's workload identity.
        """
        return pulumi.get(self, "workload_identity")

    @property
    @pulumi.getter(name="workspaceId")
    def workspace_id(self) -> pulumi.Output[str]:
        """
        The ID of the workspace to which the Deployment belongs.
        """
        return pulumi.get(self, "workspace_id")

