# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['DeploymentArgs', 'Deployment']

@pulumi.input_type
class DeploymentArgs:
    def __init__(__self__, *,
                 contact_emails: pulumi.Input[Sequence[pulumi.Input[str]]],
                 description: pulumi.Input[str],
                 environment_variables: pulumi.Input[Sequence[pulumi.Input['DeploymentEnvironmentVariableArgs']]],
                 executor: pulumi.Input[str],
                 is_cicd_enforced: pulumi.Input[bool],
                 is_dag_deploy_enabled: pulumi.Input[bool],
                 type: pulumi.Input[str],
                 workspace_id: pulumi.Input[str],
                 cloud_provider: Optional[pulumi.Input[str]] = None,
                 cluster_id: Optional[pulumi.Input[str]] = None,
                 default_task_pod_cpu: Optional[pulumi.Input[str]] = None,
                 default_task_pod_memory: Optional[pulumi.Input[str]] = None,
                 is_development_mode: Optional[pulumi.Input[bool]] = None,
                 is_high_availability: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 original_astro_runtime_version: Optional[pulumi.Input[str]] = None,
                 region: Optional[pulumi.Input[str]] = None,
                 resource_quota_cpu: Optional[pulumi.Input[str]] = None,
                 resource_quota_memory: Optional[pulumi.Input[str]] = None,
                 scaling_spec: Optional[pulumi.Input['DeploymentScalingSpecArgs']] = None,
                 scheduler_au: Optional[pulumi.Input[int]] = None,
                 scheduler_replicas: Optional[pulumi.Input[int]] = None,
                 scheduler_size: Optional[pulumi.Input[str]] = None,
                 task_pod_node_pool_id: Optional[pulumi.Input[str]] = None,
                 worker_queues: Optional[pulumi.Input[Sequence[pulumi.Input['DeploymentWorkerQueueArgs']]]] = None):
        """
        The set of arguments for constructing a Deployment resource.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] contact_emails: Deployment contact emails
        :param pulumi.Input[str] description: Deployment description
        :param pulumi.Input[Sequence[pulumi.Input['DeploymentEnvironmentVariableArgs']]] environment_variables: Deployment environment variables
        :param pulumi.Input[str] executor: Deployment executor
        :param pulumi.Input[bool] is_cicd_enforced: Deployment CI/CD enforced
        :param pulumi.Input[bool] is_dag_deploy_enabled: Whether DAG deploy is enabled - Changing this value may disrupt your deployment. Read more at https://docs.astronomer.io/astro/deploy-dags#enable-or-disable-dag-only-deploys-on-a-deployment
        :param pulumi.Input[str] type: Deployment type - if changing this value, the deployment will be recreated with the new type
        :param pulumi.Input[str] workspace_id: Deployment workspace identifier - if changing this value, the deployment will be recreated in the new workspace
        :param pulumi.Input[str] cloud_provider: Deployment cloud provider - required for 'STANDARD' deployments. If changing this value, the deployment will be recreated in the new cloud provider
        :param pulumi.Input[str] cluster_id: Deployment cluster identifier - required for 'HYBRID' and 'DEDICATED' deployments. If changing this value, the deployment will be recreated in the new cluster
        :param pulumi.Input[str] default_task_pod_cpu: Deployment default task pod CPU - required for 'STANDARD' and 'DEDICATED' deployments
        :param pulumi.Input[str] default_task_pod_memory: Deployment default task pod memory - required for 'STANDARD' and 'DEDICATED' deployments
        :param pulumi.Input[bool] is_development_mode: Deployment development mode - required for 'STANDARD' and 'DEDICATED' deployments. If changing from 'False' to 'True', the deployment will be recreated
        :param pulumi.Input[bool] is_high_availability: Deployment high availability - required for 'STANDARD' and 'DEDICATED' deployments
        :param pulumi.Input[str] name: Deployment name
        :param pulumi.Input[str] region: Deployment region - required for 'STANDARD' deployments. If changing this value, the deployment will be recreated in the new region
        :param pulumi.Input[str] resource_quota_cpu: Deployment resource quota CPU - required for 'STANDARD' and 'DEDICATED' deployments
        :param pulumi.Input[str] resource_quota_memory: Deployment resource quota memory - required for 'STANDARD' and 'DEDICATED' deployments
        :param pulumi.Input['DeploymentScalingSpecArgs'] scaling_spec: Deployment scaling spec - only for 'STANDARD' and 'DEDICATED' deployments
        :param pulumi.Input[int] scheduler_au: Deployment scheduler AU - required for 'HYBRID' deployments
        :param pulumi.Input[int] scheduler_replicas: Deployment scheduler replicas - required for 'HYBRID' deployments
        :param pulumi.Input[str] scheduler_size: Deployment scheduler size - required for 'STANDARD' and 'DEDICATED' deployments
        :param pulumi.Input[str] task_pod_node_pool_id: Deployment task pod node pool identifier - required if executor is 'KUBERNETES' and type is 'HYBRID'
        :param pulumi.Input[Sequence[pulumi.Input['DeploymentWorkerQueueArgs']]] worker_queues: Deployment worker queues - required for deployments with 'CELERY' executor
        """
        pulumi.set(__self__, "contact_emails", contact_emails)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "environment_variables", environment_variables)
        pulumi.set(__self__, "executor", executor)
        pulumi.set(__self__, "is_cicd_enforced", is_cicd_enforced)
        pulumi.set(__self__, "is_dag_deploy_enabled", is_dag_deploy_enabled)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "workspace_id", workspace_id)
        if cloud_provider is not None:
            pulumi.set(__self__, "cloud_provider", cloud_provider)
        if cluster_id is not None:
            pulumi.set(__self__, "cluster_id", cluster_id)
        if default_task_pod_cpu is not None:
            pulumi.set(__self__, "default_task_pod_cpu", default_task_pod_cpu)
        if default_task_pod_memory is not None:
            pulumi.set(__self__, "default_task_pod_memory", default_task_pod_memory)
        if is_development_mode is not None:
            pulumi.set(__self__, "is_development_mode", is_development_mode)
        if is_high_availability is not None:
            pulumi.set(__self__, "is_high_availability", is_high_availability)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if original_astro_runtime_version is not None:
            pulumi.set(__self__, "original_astro_runtime_version", original_astro_runtime_version)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if resource_quota_cpu is not None:
            pulumi.set(__self__, "resource_quota_cpu", resource_quota_cpu)
        if resource_quota_memory is not None:
            pulumi.set(__self__, "resource_quota_memory", resource_quota_memory)
        if scaling_spec is not None:
            pulumi.set(__self__, "scaling_spec", scaling_spec)
        if scheduler_au is not None:
            pulumi.set(__self__, "scheduler_au", scheduler_au)
        if scheduler_replicas is not None:
            pulumi.set(__self__, "scheduler_replicas", scheduler_replicas)
        if scheduler_size is not None:
            pulumi.set(__self__, "scheduler_size", scheduler_size)
        if task_pod_node_pool_id is not None:
            pulumi.set(__self__, "task_pod_node_pool_id", task_pod_node_pool_id)
        if worker_queues is not None:
            pulumi.set(__self__, "worker_queues", worker_queues)

    @property
    @pulumi.getter(name="contactEmails")
    def contact_emails(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        Deployment contact emails
        """
        return pulumi.get(self, "contact_emails")

    @contact_emails.setter
    def contact_emails(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "contact_emails", value)

    @property
    @pulumi.getter
    def description(self) -> pulumi.Input[str]:
        """
        Deployment description
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: pulumi.Input[str]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="environmentVariables")
    def environment_variables(self) -> pulumi.Input[Sequence[pulumi.Input['DeploymentEnvironmentVariableArgs']]]:
        """
        Deployment environment variables
        """
        return pulumi.get(self, "environment_variables")

    @environment_variables.setter
    def environment_variables(self, value: pulumi.Input[Sequence[pulumi.Input['DeploymentEnvironmentVariableArgs']]]):
        pulumi.set(self, "environment_variables", value)

    @property
    @pulumi.getter
    def executor(self) -> pulumi.Input[str]:
        """
        Deployment executor
        """
        return pulumi.get(self, "executor")

    @executor.setter
    def executor(self, value: pulumi.Input[str]):
        pulumi.set(self, "executor", value)

    @property
    @pulumi.getter(name="isCicdEnforced")
    def is_cicd_enforced(self) -> pulumi.Input[bool]:
        """
        Deployment CI/CD enforced
        """
        return pulumi.get(self, "is_cicd_enforced")

    @is_cicd_enforced.setter
    def is_cicd_enforced(self, value: pulumi.Input[bool]):
        pulumi.set(self, "is_cicd_enforced", value)

    @property
    @pulumi.getter(name="isDagDeployEnabled")
    def is_dag_deploy_enabled(self) -> pulumi.Input[bool]:
        """
        Whether DAG deploy is enabled - Changing this value may disrupt your deployment. Read more at https://docs.astronomer.io/astro/deploy-dags#enable-or-disable-dag-only-deploys-on-a-deployment
        """
        return pulumi.get(self, "is_dag_deploy_enabled")

    @is_dag_deploy_enabled.setter
    def is_dag_deploy_enabled(self, value: pulumi.Input[bool]):
        pulumi.set(self, "is_dag_deploy_enabled", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        Deployment type - if changing this value, the deployment will be recreated with the new type
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="workspaceId")
    def workspace_id(self) -> pulumi.Input[str]:
        """
        Deployment workspace identifier - if changing this value, the deployment will be recreated in the new workspace
        """
        return pulumi.get(self, "workspace_id")

    @workspace_id.setter
    def workspace_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "workspace_id", value)

    @property
    @pulumi.getter(name="cloudProvider")
    def cloud_provider(self) -> Optional[pulumi.Input[str]]:
        """
        Deployment cloud provider - required for 'STANDARD' deployments. If changing this value, the deployment will be recreated in the new cloud provider
        """
        return pulumi.get(self, "cloud_provider")

    @cloud_provider.setter
    def cloud_provider(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cloud_provider", value)

    @property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> Optional[pulumi.Input[str]]:
        """
        Deployment cluster identifier - required for 'HYBRID' and 'DEDICATED' deployments. If changing this value, the deployment will be recreated in the new cluster
        """
        return pulumi.get(self, "cluster_id")

    @cluster_id.setter
    def cluster_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cluster_id", value)

    @property
    @pulumi.getter(name="defaultTaskPodCpu")
    def default_task_pod_cpu(self) -> Optional[pulumi.Input[str]]:
        """
        Deployment default task pod CPU - required for 'STANDARD' and 'DEDICATED' deployments
        """
        return pulumi.get(self, "default_task_pod_cpu")

    @default_task_pod_cpu.setter
    def default_task_pod_cpu(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_task_pod_cpu", value)

    @property
    @pulumi.getter(name="defaultTaskPodMemory")
    def default_task_pod_memory(self) -> Optional[pulumi.Input[str]]:
        """
        Deployment default task pod memory - required for 'STANDARD' and 'DEDICATED' deployments
        """
        return pulumi.get(self, "default_task_pod_memory")

    @default_task_pod_memory.setter
    def default_task_pod_memory(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_task_pod_memory", value)

    @property
    @pulumi.getter(name="isDevelopmentMode")
    def is_development_mode(self) -> Optional[pulumi.Input[bool]]:
        """
        Deployment development mode - required for 'STANDARD' and 'DEDICATED' deployments. If changing from 'False' to 'True', the deployment will be recreated
        """
        return pulumi.get(self, "is_development_mode")

    @is_development_mode.setter
    def is_development_mode(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_development_mode", value)

    @property
    @pulumi.getter(name="isHighAvailability")
    def is_high_availability(self) -> Optional[pulumi.Input[bool]]:
        """
        Deployment high availability - required for 'STANDARD' and 'DEDICATED' deployments
        """
        return pulumi.get(self, "is_high_availability")

    @is_high_availability.setter
    def is_high_availability(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_high_availability", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Deployment name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="originalAstroRuntimeVersion")
    def original_astro_runtime_version(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "original_astro_runtime_version")

    @original_astro_runtime_version.setter
    def original_astro_runtime_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "original_astro_runtime_version", value)

    @property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[str]]:
        """
        Deployment region - required for 'STANDARD' deployments. If changing this value, the deployment will be recreated in the new region
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter(name="resourceQuotaCpu")
    def resource_quota_cpu(self) -> Optional[pulumi.Input[str]]:
        """
        Deployment resource quota CPU - required for 'STANDARD' and 'DEDICATED' deployments
        """
        return pulumi.get(self, "resource_quota_cpu")

    @resource_quota_cpu.setter
    def resource_quota_cpu(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_quota_cpu", value)

    @property
    @pulumi.getter(name="resourceQuotaMemory")
    def resource_quota_memory(self) -> Optional[pulumi.Input[str]]:
        """
        Deployment resource quota memory - required for 'STANDARD' and 'DEDICATED' deployments
        """
        return pulumi.get(self, "resource_quota_memory")

    @resource_quota_memory.setter
    def resource_quota_memory(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_quota_memory", value)

    @property
    @pulumi.getter(name="scalingSpec")
    def scaling_spec(self) -> Optional[pulumi.Input['DeploymentScalingSpecArgs']]:
        """
        Deployment scaling spec - only for 'STANDARD' and 'DEDICATED' deployments
        """
        return pulumi.get(self, "scaling_spec")

    @scaling_spec.setter
    def scaling_spec(self, value: Optional[pulumi.Input['DeploymentScalingSpecArgs']]):
        pulumi.set(self, "scaling_spec", value)

    @property
    @pulumi.getter(name="schedulerAu")
    def scheduler_au(self) -> Optional[pulumi.Input[int]]:
        """
        Deployment scheduler AU - required for 'HYBRID' deployments
        """
        return pulumi.get(self, "scheduler_au")

    @scheduler_au.setter
    def scheduler_au(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "scheduler_au", value)

    @property
    @pulumi.getter(name="schedulerReplicas")
    def scheduler_replicas(self) -> Optional[pulumi.Input[int]]:
        """
        Deployment scheduler replicas - required for 'HYBRID' deployments
        """
        return pulumi.get(self, "scheduler_replicas")

    @scheduler_replicas.setter
    def scheduler_replicas(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "scheduler_replicas", value)

    @property
    @pulumi.getter(name="schedulerSize")
    def scheduler_size(self) -> Optional[pulumi.Input[str]]:
        """
        Deployment scheduler size - required for 'STANDARD' and 'DEDICATED' deployments
        """
        return pulumi.get(self, "scheduler_size")

    @scheduler_size.setter
    def scheduler_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "scheduler_size", value)

    @property
    @pulumi.getter(name="taskPodNodePoolId")
    def task_pod_node_pool_id(self) -> Optional[pulumi.Input[str]]:
        """
        Deployment task pod node pool identifier - required if executor is 'KUBERNETES' and type is 'HYBRID'
        """
        return pulumi.get(self, "task_pod_node_pool_id")

    @task_pod_node_pool_id.setter
    def task_pod_node_pool_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "task_pod_node_pool_id", value)

    @property
    @pulumi.getter(name="workerQueues")
    def worker_queues(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DeploymentWorkerQueueArgs']]]]:
        """
        Deployment worker queues - required for deployments with 'CELERY' executor
        """
        return pulumi.get(self, "worker_queues")

    @worker_queues.setter
    def worker_queues(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DeploymentWorkerQueueArgs']]]]):
        pulumi.set(self, "worker_queues", value)


@pulumi.input_type
class _DeploymentState:
    def __init__(__self__, *,
                 airflow_version: Optional[pulumi.Input[str]] = None,
                 astro_runtime_version: Optional[pulumi.Input[str]] = None,
                 cloud_provider: Optional[pulumi.Input[str]] = None,
                 cluster_id: Optional[pulumi.Input[str]] = None,
                 contact_emails: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 created_at: Optional[pulumi.Input[str]] = None,
                 created_by: Optional[pulumi.Input['DeploymentCreatedByArgs']] = None,
                 dag_tarball_version: Optional[pulumi.Input[str]] = None,
                 default_task_pod_cpu: Optional[pulumi.Input[str]] = None,
                 default_task_pod_memory: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 desired_dag_tarball_version: Optional[pulumi.Input[str]] = None,
                 environment_variables: Optional[pulumi.Input[Sequence[pulumi.Input['DeploymentEnvironmentVariableArgs']]]] = None,
                 executor: Optional[pulumi.Input[str]] = None,
                 external_ips: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 image_repository: Optional[pulumi.Input[str]] = None,
                 image_tag: Optional[pulumi.Input[str]] = None,
                 image_version: Optional[pulumi.Input[str]] = None,
                 is_cicd_enforced: Optional[pulumi.Input[bool]] = None,
                 is_dag_deploy_enabled: Optional[pulumi.Input[bool]] = None,
                 is_development_mode: Optional[pulumi.Input[bool]] = None,
                 is_high_availability: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 namespace: Optional[pulumi.Input[str]] = None,
                 oidc_issuer_url: Optional[pulumi.Input[str]] = None,
                 original_astro_runtime_version: Optional[pulumi.Input[str]] = None,
                 region: Optional[pulumi.Input[str]] = None,
                 resource_quota_cpu: Optional[pulumi.Input[str]] = None,
                 resource_quota_memory: Optional[pulumi.Input[str]] = None,
                 scaling_spec: Optional[pulumi.Input['DeploymentScalingSpecArgs']] = None,
                 scaling_status: Optional[pulumi.Input['DeploymentScalingStatusArgs']] = None,
                 scheduler_au: Optional[pulumi.Input[int]] = None,
                 scheduler_cpu: Optional[pulumi.Input[str]] = None,
                 scheduler_memory: Optional[pulumi.Input[str]] = None,
                 scheduler_replicas: Optional[pulumi.Input[int]] = None,
                 scheduler_size: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 status_reason: Optional[pulumi.Input[str]] = None,
                 task_pod_node_pool_id: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 updated_at: Optional[pulumi.Input[str]] = None,
                 updated_by: Optional[pulumi.Input['DeploymentUpdatedByArgs']] = None,
                 webserver_airflow_api_url: Optional[pulumi.Input[str]] = None,
                 webserver_ingress_hostname: Optional[pulumi.Input[str]] = None,
                 webserver_url: Optional[pulumi.Input[str]] = None,
                 worker_queues: Optional[pulumi.Input[Sequence[pulumi.Input['DeploymentWorkerQueueArgs']]]] = None,
                 workload_identity: Optional[pulumi.Input[str]] = None,
                 workspace_id: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Deployment resources.
        :param pulumi.Input[str] airflow_version: Deployment Airflow version
        :param pulumi.Input[str] astro_runtime_version: Deployment's current Astro Runtime version
        :param pulumi.Input[str] cloud_provider: Deployment cloud provider - required for 'STANDARD' deployments. If changing this value, the deployment will be recreated in the new cloud provider
        :param pulumi.Input[str] cluster_id: Deployment cluster identifier - required for 'HYBRID' and 'DEDICATED' deployments. If changing this value, the deployment will be recreated in the new cluster
        :param pulumi.Input[Sequence[pulumi.Input[str]]] contact_emails: Deployment contact emails
        :param pulumi.Input[str] created_at: Deployment creation timestamp
        :param pulumi.Input['DeploymentCreatedByArgs'] created_by: Deployment creator
        :param pulumi.Input[str] dag_tarball_version: Deployment DAG tarball version
        :param pulumi.Input[str] default_task_pod_cpu: Deployment default task pod CPU - required for 'STANDARD' and 'DEDICATED' deployments
        :param pulumi.Input[str] default_task_pod_memory: Deployment default task pod memory - required for 'STANDARD' and 'DEDICATED' deployments
        :param pulumi.Input[str] description: Deployment description
        :param pulumi.Input[str] desired_dag_tarball_version: Deployment desired DAG tarball version
        :param pulumi.Input[Sequence[pulumi.Input['DeploymentEnvironmentVariableArgs']]] environment_variables: Deployment environment variables
        :param pulumi.Input[str] executor: Deployment executor
        :param pulumi.Input[Sequence[pulumi.Input[str]]] external_ips: Deployment external IPs
        :param pulumi.Input[str] image_repository: Deployment image repository
        :param pulumi.Input[str] image_tag: Deployment image tag
        :param pulumi.Input[str] image_version: Deployment image version
        :param pulumi.Input[bool] is_cicd_enforced: Deployment CI/CD enforced
        :param pulumi.Input[bool] is_dag_deploy_enabled: Whether DAG deploy is enabled - Changing this value may disrupt your deployment. Read more at https://docs.astronomer.io/astro/deploy-dags#enable-or-disable-dag-only-deploys-on-a-deployment
        :param pulumi.Input[bool] is_development_mode: Deployment development mode - required for 'STANDARD' and 'DEDICATED' deployments. If changing from 'False' to 'True', the deployment will be recreated
        :param pulumi.Input[bool] is_high_availability: Deployment high availability - required for 'STANDARD' and 'DEDICATED' deployments
        :param pulumi.Input[str] name: Deployment name
        :param pulumi.Input[str] namespace: Deployment namespace
        :param pulumi.Input[str] oidc_issuer_url: Deployment OIDC issuer URL
        :param pulumi.Input[str] region: Deployment region - required for 'STANDARD' deployments. If changing this value, the deployment will be recreated in the new region
        :param pulumi.Input[str] resource_quota_cpu: Deployment resource quota CPU - required for 'STANDARD' and 'DEDICATED' deployments
        :param pulumi.Input[str] resource_quota_memory: Deployment resource quota memory - required for 'STANDARD' and 'DEDICATED' deployments
        :param pulumi.Input['DeploymentScalingSpecArgs'] scaling_spec: Deployment scaling spec - only for 'STANDARD' and 'DEDICATED' deployments
        :param pulumi.Input['DeploymentScalingStatusArgs'] scaling_status: Deployment scaling status
        :param pulumi.Input[int] scheduler_au: Deployment scheduler AU - required for 'HYBRID' deployments
        :param pulumi.Input[str] scheduler_cpu: Deployment scheduler CPU
        :param pulumi.Input[str] scheduler_memory: Deployment scheduler memory
        :param pulumi.Input[int] scheduler_replicas: Deployment scheduler replicas - required for 'HYBRID' deployments
        :param pulumi.Input[str] scheduler_size: Deployment scheduler size - required for 'STANDARD' and 'DEDICATED' deployments
        :param pulumi.Input[str] status: Deployment status
        :param pulumi.Input[str] status_reason: Deployment status reason
        :param pulumi.Input[str] task_pod_node_pool_id: Deployment task pod node pool identifier - required if executor is 'KUBERNETES' and type is 'HYBRID'
        :param pulumi.Input[str] type: Deployment type - if changing this value, the deployment will be recreated with the new type
        :param pulumi.Input[str] updated_at: Deployment last updated timestamp
        :param pulumi.Input['DeploymentUpdatedByArgs'] updated_by: Deployment updater
        :param pulumi.Input[str] webserver_airflow_api_url: Deployment webserver Airflow API URL
        :param pulumi.Input[str] webserver_ingress_hostname: Deployment webserver ingress hostname
        :param pulumi.Input[str] webserver_url: Deployment webserver URL
        :param pulumi.Input[Sequence[pulumi.Input['DeploymentWorkerQueueArgs']]] worker_queues: Deployment worker queues - required for deployments with 'CELERY' executor
        :param pulumi.Input[str] workload_identity: Deployment workload identity. This value can be changed via the Astro API if applicable.
        :param pulumi.Input[str] workspace_id: Deployment workspace identifier - if changing this value, the deployment will be recreated in the new workspace
        """
        if airflow_version is not None:
            pulumi.set(__self__, "airflow_version", airflow_version)
        if astro_runtime_version is not None:
            pulumi.set(__self__, "astro_runtime_version", astro_runtime_version)
        if cloud_provider is not None:
            pulumi.set(__self__, "cloud_provider", cloud_provider)
        if cluster_id is not None:
            pulumi.set(__self__, "cluster_id", cluster_id)
        if contact_emails is not None:
            pulumi.set(__self__, "contact_emails", contact_emails)
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if created_by is not None:
            pulumi.set(__self__, "created_by", created_by)
        if dag_tarball_version is not None:
            pulumi.set(__self__, "dag_tarball_version", dag_tarball_version)
        if default_task_pod_cpu is not None:
            pulumi.set(__self__, "default_task_pod_cpu", default_task_pod_cpu)
        if default_task_pod_memory is not None:
            pulumi.set(__self__, "default_task_pod_memory", default_task_pod_memory)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if desired_dag_tarball_version is not None:
            pulumi.set(__self__, "desired_dag_tarball_version", desired_dag_tarball_version)
        if environment_variables is not None:
            pulumi.set(__self__, "environment_variables", environment_variables)
        if executor is not None:
            pulumi.set(__self__, "executor", executor)
        if external_ips is not None:
            pulumi.set(__self__, "external_ips", external_ips)
        if image_repository is not None:
            pulumi.set(__self__, "image_repository", image_repository)
        if image_tag is not None:
            pulumi.set(__self__, "image_tag", image_tag)
        if image_version is not None:
            pulumi.set(__self__, "image_version", image_version)
        if is_cicd_enforced is not None:
            pulumi.set(__self__, "is_cicd_enforced", is_cicd_enforced)
        if is_dag_deploy_enabled is not None:
            pulumi.set(__self__, "is_dag_deploy_enabled", is_dag_deploy_enabled)
        if is_development_mode is not None:
            pulumi.set(__self__, "is_development_mode", is_development_mode)
        if is_high_availability is not None:
            pulumi.set(__self__, "is_high_availability", is_high_availability)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if oidc_issuer_url is not None:
            pulumi.set(__self__, "oidc_issuer_url", oidc_issuer_url)
        if original_astro_runtime_version is not None:
            pulumi.set(__self__, "original_astro_runtime_version", original_astro_runtime_version)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if resource_quota_cpu is not None:
            pulumi.set(__self__, "resource_quota_cpu", resource_quota_cpu)
        if resource_quota_memory is not None:
            pulumi.set(__self__, "resource_quota_memory", resource_quota_memory)
        if scaling_spec is not None:
            pulumi.set(__self__, "scaling_spec", scaling_spec)
        if scaling_status is not None:
            pulumi.set(__self__, "scaling_status", scaling_status)
        if scheduler_au is not None:
            pulumi.set(__self__, "scheduler_au", scheduler_au)
        if scheduler_cpu is not None:
            pulumi.set(__self__, "scheduler_cpu", scheduler_cpu)
        if scheduler_memory is not None:
            pulumi.set(__self__, "scheduler_memory", scheduler_memory)
        if scheduler_replicas is not None:
            pulumi.set(__self__, "scheduler_replicas", scheduler_replicas)
        if scheduler_size is not None:
            pulumi.set(__self__, "scheduler_size", scheduler_size)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if status_reason is not None:
            pulumi.set(__self__, "status_reason", status_reason)
        if task_pod_node_pool_id is not None:
            pulumi.set(__self__, "task_pod_node_pool_id", task_pod_node_pool_id)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if updated_at is not None:
            pulumi.set(__self__, "updated_at", updated_at)
        if updated_by is not None:
            pulumi.set(__self__, "updated_by", updated_by)
        if webserver_airflow_api_url is not None:
            pulumi.set(__self__, "webserver_airflow_api_url", webserver_airflow_api_url)
        if webserver_ingress_hostname is not None:
            pulumi.set(__self__, "webserver_ingress_hostname", webserver_ingress_hostname)
        if webserver_url is not None:
            pulumi.set(__self__, "webserver_url", webserver_url)
        if worker_queues is not None:
            pulumi.set(__self__, "worker_queues", worker_queues)
        if workload_identity is not None:
            pulumi.set(__self__, "workload_identity", workload_identity)
        if workspace_id is not None:
            pulumi.set(__self__, "workspace_id", workspace_id)

    @property
    @pulumi.getter(name="airflowVersion")
    def airflow_version(self) -> Optional[pulumi.Input[str]]:
        """
        Deployment Airflow version
        """
        return pulumi.get(self, "airflow_version")

    @airflow_version.setter
    def airflow_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "airflow_version", value)

    @property
    @pulumi.getter(name="astroRuntimeVersion")
    def astro_runtime_version(self) -> Optional[pulumi.Input[str]]:
        """
        Deployment's current Astro Runtime version
        """
        return pulumi.get(self, "astro_runtime_version")

    @astro_runtime_version.setter
    def astro_runtime_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "astro_runtime_version", value)

    @property
    @pulumi.getter(name="cloudProvider")
    def cloud_provider(self) -> Optional[pulumi.Input[str]]:
        """
        Deployment cloud provider - required for 'STANDARD' deployments. If changing this value, the deployment will be recreated in the new cloud provider
        """
        return pulumi.get(self, "cloud_provider")

    @cloud_provider.setter
    def cloud_provider(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cloud_provider", value)

    @property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> Optional[pulumi.Input[str]]:
        """
        Deployment cluster identifier - required for 'HYBRID' and 'DEDICATED' deployments. If changing this value, the deployment will be recreated in the new cluster
        """
        return pulumi.get(self, "cluster_id")

    @cluster_id.setter
    def cluster_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cluster_id", value)

    @property
    @pulumi.getter(name="contactEmails")
    def contact_emails(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Deployment contact emails
        """
        return pulumi.get(self, "contact_emails")

    @contact_emails.setter
    def contact_emails(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "contact_emails", value)

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[pulumi.Input[str]]:
        """
        Deployment creation timestamp
        """
        return pulumi.get(self, "created_at")

    @created_at.setter
    def created_at(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "created_at", value)

    @property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> Optional[pulumi.Input['DeploymentCreatedByArgs']]:
        """
        Deployment creator
        """
        return pulumi.get(self, "created_by")

    @created_by.setter
    def created_by(self, value: Optional[pulumi.Input['DeploymentCreatedByArgs']]):
        pulumi.set(self, "created_by", value)

    @property
    @pulumi.getter(name="dagTarballVersion")
    def dag_tarball_version(self) -> Optional[pulumi.Input[str]]:
        """
        Deployment DAG tarball version
        """
        return pulumi.get(self, "dag_tarball_version")

    @dag_tarball_version.setter
    def dag_tarball_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dag_tarball_version", value)

    @property
    @pulumi.getter(name="defaultTaskPodCpu")
    def default_task_pod_cpu(self) -> Optional[pulumi.Input[str]]:
        """
        Deployment default task pod CPU - required for 'STANDARD' and 'DEDICATED' deployments
        """
        return pulumi.get(self, "default_task_pod_cpu")

    @default_task_pod_cpu.setter
    def default_task_pod_cpu(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_task_pod_cpu", value)

    @property
    @pulumi.getter(name="defaultTaskPodMemory")
    def default_task_pod_memory(self) -> Optional[pulumi.Input[str]]:
        """
        Deployment default task pod memory - required for 'STANDARD' and 'DEDICATED' deployments
        """
        return pulumi.get(self, "default_task_pod_memory")

    @default_task_pod_memory.setter
    def default_task_pod_memory(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_task_pod_memory", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Deployment description
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="desiredDagTarballVersion")
    def desired_dag_tarball_version(self) -> Optional[pulumi.Input[str]]:
        """
        Deployment desired DAG tarball version
        """
        return pulumi.get(self, "desired_dag_tarball_version")

    @desired_dag_tarball_version.setter
    def desired_dag_tarball_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "desired_dag_tarball_version", value)

    @property
    @pulumi.getter(name="environmentVariables")
    def environment_variables(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DeploymentEnvironmentVariableArgs']]]]:
        """
        Deployment environment variables
        """
        return pulumi.get(self, "environment_variables")

    @environment_variables.setter
    def environment_variables(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DeploymentEnvironmentVariableArgs']]]]):
        pulumi.set(self, "environment_variables", value)

    @property
    @pulumi.getter
    def executor(self) -> Optional[pulumi.Input[str]]:
        """
        Deployment executor
        """
        return pulumi.get(self, "executor")

    @executor.setter
    def executor(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "executor", value)

    @property
    @pulumi.getter(name="externalIps")
    def external_ips(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Deployment external IPs
        """
        return pulumi.get(self, "external_ips")

    @external_ips.setter
    def external_ips(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "external_ips", value)

    @property
    @pulumi.getter(name="imageRepository")
    def image_repository(self) -> Optional[pulumi.Input[str]]:
        """
        Deployment image repository
        """
        return pulumi.get(self, "image_repository")

    @image_repository.setter
    def image_repository(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image_repository", value)

    @property
    @pulumi.getter(name="imageTag")
    def image_tag(self) -> Optional[pulumi.Input[str]]:
        """
        Deployment image tag
        """
        return pulumi.get(self, "image_tag")

    @image_tag.setter
    def image_tag(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image_tag", value)

    @property
    @pulumi.getter(name="imageVersion")
    def image_version(self) -> Optional[pulumi.Input[str]]:
        """
        Deployment image version
        """
        return pulumi.get(self, "image_version")

    @image_version.setter
    def image_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image_version", value)

    @property
    @pulumi.getter(name="isCicdEnforced")
    def is_cicd_enforced(self) -> Optional[pulumi.Input[bool]]:
        """
        Deployment CI/CD enforced
        """
        return pulumi.get(self, "is_cicd_enforced")

    @is_cicd_enforced.setter
    def is_cicd_enforced(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_cicd_enforced", value)

    @property
    @pulumi.getter(name="isDagDeployEnabled")
    def is_dag_deploy_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether DAG deploy is enabled - Changing this value may disrupt your deployment. Read more at https://docs.astronomer.io/astro/deploy-dags#enable-or-disable-dag-only-deploys-on-a-deployment
        """
        return pulumi.get(self, "is_dag_deploy_enabled")

    @is_dag_deploy_enabled.setter
    def is_dag_deploy_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_dag_deploy_enabled", value)

    @property
    @pulumi.getter(name="isDevelopmentMode")
    def is_development_mode(self) -> Optional[pulumi.Input[bool]]:
        """
        Deployment development mode - required for 'STANDARD' and 'DEDICATED' deployments. If changing from 'False' to 'True', the deployment will be recreated
        """
        return pulumi.get(self, "is_development_mode")

    @is_development_mode.setter
    def is_development_mode(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_development_mode", value)

    @property
    @pulumi.getter(name="isHighAvailability")
    def is_high_availability(self) -> Optional[pulumi.Input[bool]]:
        """
        Deployment high availability - required for 'STANDARD' and 'DEDICATED' deployments
        """
        return pulumi.get(self, "is_high_availability")

    @is_high_availability.setter
    def is_high_availability(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_high_availability", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Deployment name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def namespace(self) -> Optional[pulumi.Input[str]]:
        """
        Deployment namespace
        """
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "namespace", value)

    @property
    @pulumi.getter(name="oidcIssuerUrl")
    def oidc_issuer_url(self) -> Optional[pulumi.Input[str]]:
        """
        Deployment OIDC issuer URL
        """
        return pulumi.get(self, "oidc_issuer_url")

    @oidc_issuer_url.setter
    def oidc_issuer_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "oidc_issuer_url", value)

    @property
    @pulumi.getter(name="originalAstroRuntimeVersion")
    def original_astro_runtime_version(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "original_astro_runtime_version")

    @original_astro_runtime_version.setter
    def original_astro_runtime_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "original_astro_runtime_version", value)

    @property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[str]]:
        """
        Deployment region - required for 'STANDARD' deployments. If changing this value, the deployment will be recreated in the new region
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter(name="resourceQuotaCpu")
    def resource_quota_cpu(self) -> Optional[pulumi.Input[str]]:
        """
        Deployment resource quota CPU - required for 'STANDARD' and 'DEDICATED' deployments
        """
        return pulumi.get(self, "resource_quota_cpu")

    @resource_quota_cpu.setter
    def resource_quota_cpu(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_quota_cpu", value)

    @property
    @pulumi.getter(name="resourceQuotaMemory")
    def resource_quota_memory(self) -> Optional[pulumi.Input[str]]:
        """
        Deployment resource quota memory - required for 'STANDARD' and 'DEDICATED' deployments
        """
        return pulumi.get(self, "resource_quota_memory")

    @resource_quota_memory.setter
    def resource_quota_memory(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_quota_memory", value)

    @property
    @pulumi.getter(name="scalingSpec")
    def scaling_spec(self) -> Optional[pulumi.Input['DeploymentScalingSpecArgs']]:
        """
        Deployment scaling spec - only for 'STANDARD' and 'DEDICATED' deployments
        """
        return pulumi.get(self, "scaling_spec")

    @scaling_spec.setter
    def scaling_spec(self, value: Optional[pulumi.Input['DeploymentScalingSpecArgs']]):
        pulumi.set(self, "scaling_spec", value)

    @property
    @pulumi.getter(name="scalingStatus")
    def scaling_status(self) -> Optional[pulumi.Input['DeploymentScalingStatusArgs']]:
        """
        Deployment scaling status
        """
        return pulumi.get(self, "scaling_status")

    @scaling_status.setter
    def scaling_status(self, value: Optional[pulumi.Input['DeploymentScalingStatusArgs']]):
        pulumi.set(self, "scaling_status", value)

    @property
    @pulumi.getter(name="schedulerAu")
    def scheduler_au(self) -> Optional[pulumi.Input[int]]:
        """
        Deployment scheduler AU - required for 'HYBRID' deployments
        """
        return pulumi.get(self, "scheduler_au")

    @scheduler_au.setter
    def scheduler_au(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "scheduler_au", value)

    @property
    @pulumi.getter(name="schedulerCpu")
    def scheduler_cpu(self) -> Optional[pulumi.Input[str]]:
        """
        Deployment scheduler CPU
        """
        return pulumi.get(self, "scheduler_cpu")

    @scheduler_cpu.setter
    def scheduler_cpu(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "scheduler_cpu", value)

    @property
    @pulumi.getter(name="schedulerMemory")
    def scheduler_memory(self) -> Optional[pulumi.Input[str]]:
        """
        Deployment scheduler memory
        """
        return pulumi.get(self, "scheduler_memory")

    @scheduler_memory.setter
    def scheduler_memory(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "scheduler_memory", value)

    @property
    @pulumi.getter(name="schedulerReplicas")
    def scheduler_replicas(self) -> Optional[pulumi.Input[int]]:
        """
        Deployment scheduler replicas - required for 'HYBRID' deployments
        """
        return pulumi.get(self, "scheduler_replicas")

    @scheduler_replicas.setter
    def scheduler_replicas(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "scheduler_replicas", value)

    @property
    @pulumi.getter(name="schedulerSize")
    def scheduler_size(self) -> Optional[pulumi.Input[str]]:
        """
        Deployment scheduler size - required for 'STANDARD' and 'DEDICATED' deployments
        """
        return pulumi.get(self, "scheduler_size")

    @scheduler_size.setter
    def scheduler_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "scheduler_size", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Deployment status
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="statusReason")
    def status_reason(self) -> Optional[pulumi.Input[str]]:
        """
        Deployment status reason
        """
        return pulumi.get(self, "status_reason")

    @status_reason.setter
    def status_reason(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status_reason", value)

    @property
    @pulumi.getter(name="taskPodNodePoolId")
    def task_pod_node_pool_id(self) -> Optional[pulumi.Input[str]]:
        """
        Deployment task pod node pool identifier - required if executor is 'KUBERNETES' and type is 'HYBRID'
        """
        return pulumi.get(self, "task_pod_node_pool_id")

    @task_pod_node_pool_id.setter
    def task_pod_node_pool_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "task_pod_node_pool_id", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        Deployment type - if changing this value, the deployment will be recreated with the new type
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> Optional[pulumi.Input[str]]:
        """
        Deployment last updated timestamp
        """
        return pulumi.get(self, "updated_at")

    @updated_at.setter
    def updated_at(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "updated_at", value)

    @property
    @pulumi.getter(name="updatedBy")
    def updated_by(self) -> Optional[pulumi.Input['DeploymentUpdatedByArgs']]:
        """
        Deployment updater
        """
        return pulumi.get(self, "updated_by")

    @updated_by.setter
    def updated_by(self, value: Optional[pulumi.Input['DeploymentUpdatedByArgs']]):
        pulumi.set(self, "updated_by", value)

    @property
    @pulumi.getter(name="webserverAirflowApiUrl")
    def webserver_airflow_api_url(self) -> Optional[pulumi.Input[str]]:
        """
        Deployment webserver Airflow API URL
        """
        return pulumi.get(self, "webserver_airflow_api_url")

    @webserver_airflow_api_url.setter
    def webserver_airflow_api_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "webserver_airflow_api_url", value)

    @property
    @pulumi.getter(name="webserverIngressHostname")
    def webserver_ingress_hostname(self) -> Optional[pulumi.Input[str]]:
        """
        Deployment webserver ingress hostname
        """
        return pulumi.get(self, "webserver_ingress_hostname")

    @webserver_ingress_hostname.setter
    def webserver_ingress_hostname(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "webserver_ingress_hostname", value)

    @property
    @pulumi.getter(name="webserverUrl")
    def webserver_url(self) -> Optional[pulumi.Input[str]]:
        """
        Deployment webserver URL
        """
        return pulumi.get(self, "webserver_url")

    @webserver_url.setter
    def webserver_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "webserver_url", value)

    @property
    @pulumi.getter(name="workerQueues")
    def worker_queues(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DeploymentWorkerQueueArgs']]]]:
        """
        Deployment worker queues - required for deployments with 'CELERY' executor
        """
        return pulumi.get(self, "worker_queues")

    @worker_queues.setter
    def worker_queues(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DeploymentWorkerQueueArgs']]]]):
        pulumi.set(self, "worker_queues", value)

    @property
    @pulumi.getter(name="workloadIdentity")
    def workload_identity(self) -> Optional[pulumi.Input[str]]:
        """
        Deployment workload identity. This value can be changed via the Astro API if applicable.
        """
        return pulumi.get(self, "workload_identity")

    @workload_identity.setter
    def workload_identity(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "workload_identity", value)

    @property
    @pulumi.getter(name="workspaceId")
    def workspace_id(self) -> Optional[pulumi.Input[str]]:
        """
        Deployment workspace identifier - if changing this value, the deployment will be recreated in the new workspace
        """
        return pulumi.get(self, "workspace_id")

    @workspace_id.setter
    def workspace_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "workspace_id", value)


class Deployment(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cloud_provider: Optional[pulumi.Input[str]] = None,
                 cluster_id: Optional[pulumi.Input[str]] = None,
                 contact_emails: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 default_task_pod_cpu: Optional[pulumi.Input[str]] = None,
                 default_task_pod_memory: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 environment_variables: Optional[pulumi.Input[Sequence[pulumi.Input[Union['DeploymentEnvironmentVariableArgs', 'DeploymentEnvironmentVariableArgsDict']]]]] = None,
                 executor: Optional[pulumi.Input[str]] = None,
                 is_cicd_enforced: Optional[pulumi.Input[bool]] = None,
                 is_dag_deploy_enabled: Optional[pulumi.Input[bool]] = None,
                 is_development_mode: Optional[pulumi.Input[bool]] = None,
                 is_high_availability: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 original_astro_runtime_version: Optional[pulumi.Input[str]] = None,
                 region: Optional[pulumi.Input[str]] = None,
                 resource_quota_cpu: Optional[pulumi.Input[str]] = None,
                 resource_quota_memory: Optional[pulumi.Input[str]] = None,
                 scaling_spec: Optional[pulumi.Input[Union['DeploymentScalingSpecArgs', 'DeploymentScalingSpecArgsDict']]] = None,
                 scheduler_au: Optional[pulumi.Input[int]] = None,
                 scheduler_replicas: Optional[pulumi.Input[int]] = None,
                 scheduler_size: Optional[pulumi.Input[str]] = None,
                 task_pod_node_pool_id: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 worker_queues: Optional[pulumi.Input[Sequence[pulumi.Input[Union['DeploymentWorkerQueueArgs', 'DeploymentWorkerQueueArgsDict']]]]] = None,
                 workspace_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Deployment resource

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] cloud_provider: Deployment cloud provider - required for 'STANDARD' deployments. If changing this value, the deployment will be recreated in the new cloud provider
        :param pulumi.Input[str] cluster_id: Deployment cluster identifier - required for 'HYBRID' and 'DEDICATED' deployments. If changing this value, the deployment will be recreated in the new cluster
        :param pulumi.Input[Sequence[pulumi.Input[str]]] contact_emails: Deployment contact emails
        :param pulumi.Input[str] default_task_pod_cpu: Deployment default task pod CPU - required for 'STANDARD' and 'DEDICATED' deployments
        :param pulumi.Input[str] default_task_pod_memory: Deployment default task pod memory - required for 'STANDARD' and 'DEDICATED' deployments
        :param pulumi.Input[str] description: Deployment description
        :param pulumi.Input[Sequence[pulumi.Input[Union['DeploymentEnvironmentVariableArgs', 'DeploymentEnvironmentVariableArgsDict']]]] environment_variables: Deployment environment variables
        :param pulumi.Input[str] executor: Deployment executor
        :param pulumi.Input[bool] is_cicd_enforced: Deployment CI/CD enforced
        :param pulumi.Input[bool] is_dag_deploy_enabled: Whether DAG deploy is enabled - Changing this value may disrupt your deployment. Read more at https://docs.astronomer.io/astro/deploy-dags#enable-or-disable-dag-only-deploys-on-a-deployment
        :param pulumi.Input[bool] is_development_mode: Deployment development mode - required for 'STANDARD' and 'DEDICATED' deployments. If changing from 'False' to 'True', the deployment will be recreated
        :param pulumi.Input[bool] is_high_availability: Deployment high availability - required for 'STANDARD' and 'DEDICATED' deployments
        :param pulumi.Input[str] name: Deployment name
        :param pulumi.Input[str] region: Deployment region - required for 'STANDARD' deployments. If changing this value, the deployment will be recreated in the new region
        :param pulumi.Input[str] resource_quota_cpu: Deployment resource quota CPU - required for 'STANDARD' and 'DEDICATED' deployments
        :param pulumi.Input[str] resource_quota_memory: Deployment resource quota memory - required for 'STANDARD' and 'DEDICATED' deployments
        :param pulumi.Input[Union['DeploymentScalingSpecArgs', 'DeploymentScalingSpecArgsDict']] scaling_spec: Deployment scaling spec - only for 'STANDARD' and 'DEDICATED' deployments
        :param pulumi.Input[int] scheduler_au: Deployment scheduler AU - required for 'HYBRID' deployments
        :param pulumi.Input[int] scheduler_replicas: Deployment scheduler replicas - required for 'HYBRID' deployments
        :param pulumi.Input[str] scheduler_size: Deployment scheduler size - required for 'STANDARD' and 'DEDICATED' deployments
        :param pulumi.Input[str] task_pod_node_pool_id: Deployment task pod node pool identifier - required if executor is 'KUBERNETES' and type is 'HYBRID'
        :param pulumi.Input[str] type: Deployment type - if changing this value, the deployment will be recreated with the new type
        :param pulumi.Input[Sequence[pulumi.Input[Union['DeploymentWorkerQueueArgs', 'DeploymentWorkerQueueArgsDict']]]] worker_queues: Deployment worker queues - required for deployments with 'CELERY' executor
        :param pulumi.Input[str] workspace_id: Deployment workspace identifier - if changing this value, the deployment will be recreated in the new workspace
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: DeploymentArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Deployment resource

        :param str resource_name: The name of the resource.
        :param DeploymentArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(DeploymentArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cloud_provider: Optional[pulumi.Input[str]] = None,
                 cluster_id: Optional[pulumi.Input[str]] = None,
                 contact_emails: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 default_task_pod_cpu: Optional[pulumi.Input[str]] = None,
                 default_task_pod_memory: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 environment_variables: Optional[pulumi.Input[Sequence[pulumi.Input[Union['DeploymentEnvironmentVariableArgs', 'DeploymentEnvironmentVariableArgsDict']]]]] = None,
                 executor: Optional[pulumi.Input[str]] = None,
                 is_cicd_enforced: Optional[pulumi.Input[bool]] = None,
                 is_dag_deploy_enabled: Optional[pulumi.Input[bool]] = None,
                 is_development_mode: Optional[pulumi.Input[bool]] = None,
                 is_high_availability: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 original_astro_runtime_version: Optional[pulumi.Input[str]] = None,
                 region: Optional[pulumi.Input[str]] = None,
                 resource_quota_cpu: Optional[pulumi.Input[str]] = None,
                 resource_quota_memory: Optional[pulumi.Input[str]] = None,
                 scaling_spec: Optional[pulumi.Input[Union['DeploymentScalingSpecArgs', 'DeploymentScalingSpecArgsDict']]] = None,
                 scheduler_au: Optional[pulumi.Input[int]] = None,
                 scheduler_replicas: Optional[pulumi.Input[int]] = None,
                 scheduler_size: Optional[pulumi.Input[str]] = None,
                 task_pod_node_pool_id: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 worker_queues: Optional[pulumi.Input[Sequence[pulumi.Input[Union['DeploymentWorkerQueueArgs', 'DeploymentWorkerQueueArgsDict']]]]] = None,
                 workspace_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = DeploymentArgs.__new__(DeploymentArgs)

            __props__.__dict__["cloud_provider"] = cloud_provider
            __props__.__dict__["cluster_id"] = cluster_id
            if contact_emails is None and not opts.urn:
                raise TypeError("Missing required property 'contact_emails'")
            __props__.__dict__["contact_emails"] = contact_emails
            __props__.__dict__["default_task_pod_cpu"] = default_task_pod_cpu
            __props__.__dict__["default_task_pod_memory"] = default_task_pod_memory
            if description is None and not opts.urn:
                raise TypeError("Missing required property 'description'")
            __props__.__dict__["description"] = description
            if environment_variables is None and not opts.urn:
                raise TypeError("Missing required property 'environment_variables'")
            __props__.__dict__["environment_variables"] = environment_variables
            if executor is None and not opts.urn:
                raise TypeError("Missing required property 'executor'")
            __props__.__dict__["executor"] = executor
            if is_cicd_enforced is None and not opts.urn:
                raise TypeError("Missing required property 'is_cicd_enforced'")
            __props__.__dict__["is_cicd_enforced"] = is_cicd_enforced
            if is_dag_deploy_enabled is None and not opts.urn:
                raise TypeError("Missing required property 'is_dag_deploy_enabled'")
            __props__.__dict__["is_dag_deploy_enabled"] = is_dag_deploy_enabled
            __props__.__dict__["is_development_mode"] = is_development_mode
            __props__.__dict__["is_high_availability"] = is_high_availability
            __props__.__dict__["name"] = name
            __props__.__dict__["original_astro_runtime_version"] = original_astro_runtime_version
            __props__.__dict__["region"] = region
            __props__.__dict__["resource_quota_cpu"] = resource_quota_cpu
            __props__.__dict__["resource_quota_memory"] = resource_quota_memory
            __props__.__dict__["scaling_spec"] = scaling_spec
            __props__.__dict__["scheduler_au"] = scheduler_au
            __props__.__dict__["scheduler_replicas"] = scheduler_replicas
            __props__.__dict__["scheduler_size"] = scheduler_size
            __props__.__dict__["task_pod_node_pool_id"] = task_pod_node_pool_id
            if type is None and not opts.urn:
                raise TypeError("Missing required property 'type'")
            __props__.__dict__["type"] = type
            __props__.__dict__["worker_queues"] = worker_queues
            if workspace_id is None and not opts.urn:
                raise TypeError("Missing required property 'workspace_id'")
            __props__.__dict__["workspace_id"] = workspace_id
            __props__.__dict__["airflow_version"] = None
            __props__.__dict__["astro_runtime_version"] = None
            __props__.__dict__["created_at"] = None
            __props__.__dict__["created_by"] = None
            __props__.__dict__["dag_tarball_version"] = None
            __props__.__dict__["desired_dag_tarball_version"] = None
            __props__.__dict__["external_ips"] = None
            __props__.__dict__["image_repository"] = None
            __props__.__dict__["image_tag"] = None
            __props__.__dict__["image_version"] = None
            __props__.__dict__["namespace"] = None
            __props__.__dict__["oidc_issuer_url"] = None
            __props__.__dict__["scaling_status"] = None
            __props__.__dict__["scheduler_cpu"] = None
            __props__.__dict__["scheduler_memory"] = None
            __props__.__dict__["status"] = None
            __props__.__dict__["status_reason"] = None
            __props__.__dict__["updated_at"] = None
            __props__.__dict__["updated_by"] = None
            __props__.__dict__["webserver_airflow_api_url"] = None
            __props__.__dict__["webserver_ingress_hostname"] = None
            __props__.__dict__["webserver_url"] = None
            __props__.__dict__["workload_identity"] = None
        super(Deployment, __self__).__init__(
            'astronomer:index/deployment:Deployment',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            airflow_version: Optional[pulumi.Input[str]] = None,
            astro_runtime_version: Optional[pulumi.Input[str]] = None,
            cloud_provider: Optional[pulumi.Input[str]] = None,
            cluster_id: Optional[pulumi.Input[str]] = None,
            contact_emails: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            created_at: Optional[pulumi.Input[str]] = None,
            created_by: Optional[pulumi.Input[Union['DeploymentCreatedByArgs', 'DeploymentCreatedByArgsDict']]] = None,
            dag_tarball_version: Optional[pulumi.Input[str]] = None,
            default_task_pod_cpu: Optional[pulumi.Input[str]] = None,
            default_task_pod_memory: Optional[pulumi.Input[str]] = None,
            description: Optional[pulumi.Input[str]] = None,
            desired_dag_tarball_version: Optional[pulumi.Input[str]] = None,
            environment_variables: Optional[pulumi.Input[Sequence[pulumi.Input[Union['DeploymentEnvironmentVariableArgs', 'DeploymentEnvironmentVariableArgsDict']]]]] = None,
            executor: Optional[pulumi.Input[str]] = None,
            external_ips: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            image_repository: Optional[pulumi.Input[str]] = None,
            image_tag: Optional[pulumi.Input[str]] = None,
            image_version: Optional[pulumi.Input[str]] = None,
            is_cicd_enforced: Optional[pulumi.Input[bool]] = None,
            is_dag_deploy_enabled: Optional[pulumi.Input[bool]] = None,
            is_development_mode: Optional[pulumi.Input[bool]] = None,
            is_high_availability: Optional[pulumi.Input[bool]] = None,
            name: Optional[pulumi.Input[str]] = None,
            namespace: Optional[pulumi.Input[str]] = None,
            oidc_issuer_url: Optional[pulumi.Input[str]] = None,
            original_astro_runtime_version: Optional[pulumi.Input[str]] = None,
            region: Optional[pulumi.Input[str]] = None,
            resource_quota_cpu: Optional[pulumi.Input[str]] = None,
            resource_quota_memory: Optional[pulumi.Input[str]] = None,
            scaling_spec: Optional[pulumi.Input[Union['DeploymentScalingSpecArgs', 'DeploymentScalingSpecArgsDict']]] = None,
            scaling_status: Optional[pulumi.Input[Union['DeploymentScalingStatusArgs', 'DeploymentScalingStatusArgsDict']]] = None,
            scheduler_au: Optional[pulumi.Input[int]] = None,
            scheduler_cpu: Optional[pulumi.Input[str]] = None,
            scheduler_memory: Optional[pulumi.Input[str]] = None,
            scheduler_replicas: Optional[pulumi.Input[int]] = None,
            scheduler_size: Optional[pulumi.Input[str]] = None,
            status: Optional[pulumi.Input[str]] = None,
            status_reason: Optional[pulumi.Input[str]] = None,
            task_pod_node_pool_id: Optional[pulumi.Input[str]] = None,
            type: Optional[pulumi.Input[str]] = None,
            updated_at: Optional[pulumi.Input[str]] = None,
            updated_by: Optional[pulumi.Input[Union['DeploymentUpdatedByArgs', 'DeploymentUpdatedByArgsDict']]] = None,
            webserver_airflow_api_url: Optional[pulumi.Input[str]] = None,
            webserver_ingress_hostname: Optional[pulumi.Input[str]] = None,
            webserver_url: Optional[pulumi.Input[str]] = None,
            worker_queues: Optional[pulumi.Input[Sequence[pulumi.Input[Union['DeploymentWorkerQueueArgs', 'DeploymentWorkerQueueArgsDict']]]]] = None,
            workload_identity: Optional[pulumi.Input[str]] = None,
            workspace_id: Optional[pulumi.Input[str]] = None) -> 'Deployment':
        """
        Get an existing Deployment resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] airflow_version: Deployment Airflow version
        :param pulumi.Input[str] astro_runtime_version: Deployment's current Astro Runtime version
        :param pulumi.Input[str] cloud_provider: Deployment cloud provider - required for 'STANDARD' deployments. If changing this value, the deployment will be recreated in the new cloud provider
        :param pulumi.Input[str] cluster_id: Deployment cluster identifier - required for 'HYBRID' and 'DEDICATED' deployments. If changing this value, the deployment will be recreated in the new cluster
        :param pulumi.Input[Sequence[pulumi.Input[str]]] contact_emails: Deployment contact emails
        :param pulumi.Input[str] created_at: Deployment creation timestamp
        :param pulumi.Input[Union['DeploymentCreatedByArgs', 'DeploymentCreatedByArgsDict']] created_by: Deployment creator
        :param pulumi.Input[str] dag_tarball_version: Deployment DAG tarball version
        :param pulumi.Input[str] default_task_pod_cpu: Deployment default task pod CPU - required for 'STANDARD' and 'DEDICATED' deployments
        :param pulumi.Input[str] default_task_pod_memory: Deployment default task pod memory - required for 'STANDARD' and 'DEDICATED' deployments
        :param pulumi.Input[str] description: Deployment description
        :param pulumi.Input[str] desired_dag_tarball_version: Deployment desired DAG tarball version
        :param pulumi.Input[Sequence[pulumi.Input[Union['DeploymentEnvironmentVariableArgs', 'DeploymentEnvironmentVariableArgsDict']]]] environment_variables: Deployment environment variables
        :param pulumi.Input[str] executor: Deployment executor
        :param pulumi.Input[Sequence[pulumi.Input[str]]] external_ips: Deployment external IPs
        :param pulumi.Input[str] image_repository: Deployment image repository
        :param pulumi.Input[str] image_tag: Deployment image tag
        :param pulumi.Input[str] image_version: Deployment image version
        :param pulumi.Input[bool] is_cicd_enforced: Deployment CI/CD enforced
        :param pulumi.Input[bool] is_dag_deploy_enabled: Whether DAG deploy is enabled - Changing this value may disrupt your deployment. Read more at https://docs.astronomer.io/astro/deploy-dags#enable-or-disable-dag-only-deploys-on-a-deployment
        :param pulumi.Input[bool] is_development_mode: Deployment development mode - required for 'STANDARD' and 'DEDICATED' deployments. If changing from 'False' to 'True', the deployment will be recreated
        :param pulumi.Input[bool] is_high_availability: Deployment high availability - required for 'STANDARD' and 'DEDICATED' deployments
        :param pulumi.Input[str] name: Deployment name
        :param pulumi.Input[str] namespace: Deployment namespace
        :param pulumi.Input[str] oidc_issuer_url: Deployment OIDC issuer URL
        :param pulumi.Input[str] region: Deployment region - required for 'STANDARD' deployments. If changing this value, the deployment will be recreated in the new region
        :param pulumi.Input[str] resource_quota_cpu: Deployment resource quota CPU - required for 'STANDARD' and 'DEDICATED' deployments
        :param pulumi.Input[str] resource_quota_memory: Deployment resource quota memory - required for 'STANDARD' and 'DEDICATED' deployments
        :param pulumi.Input[Union['DeploymentScalingSpecArgs', 'DeploymentScalingSpecArgsDict']] scaling_spec: Deployment scaling spec - only for 'STANDARD' and 'DEDICATED' deployments
        :param pulumi.Input[Union['DeploymentScalingStatusArgs', 'DeploymentScalingStatusArgsDict']] scaling_status: Deployment scaling status
        :param pulumi.Input[int] scheduler_au: Deployment scheduler AU - required for 'HYBRID' deployments
        :param pulumi.Input[str] scheduler_cpu: Deployment scheduler CPU
        :param pulumi.Input[str] scheduler_memory: Deployment scheduler memory
        :param pulumi.Input[int] scheduler_replicas: Deployment scheduler replicas - required for 'HYBRID' deployments
        :param pulumi.Input[str] scheduler_size: Deployment scheduler size - required for 'STANDARD' and 'DEDICATED' deployments
        :param pulumi.Input[str] status: Deployment status
        :param pulumi.Input[str] status_reason: Deployment status reason
        :param pulumi.Input[str] task_pod_node_pool_id: Deployment task pod node pool identifier - required if executor is 'KUBERNETES' and type is 'HYBRID'
        :param pulumi.Input[str] type: Deployment type - if changing this value, the deployment will be recreated with the new type
        :param pulumi.Input[str] updated_at: Deployment last updated timestamp
        :param pulumi.Input[Union['DeploymentUpdatedByArgs', 'DeploymentUpdatedByArgsDict']] updated_by: Deployment updater
        :param pulumi.Input[str] webserver_airflow_api_url: Deployment webserver Airflow API URL
        :param pulumi.Input[str] webserver_ingress_hostname: Deployment webserver ingress hostname
        :param pulumi.Input[str] webserver_url: Deployment webserver URL
        :param pulumi.Input[Sequence[pulumi.Input[Union['DeploymentWorkerQueueArgs', 'DeploymentWorkerQueueArgsDict']]]] worker_queues: Deployment worker queues - required for deployments with 'CELERY' executor
        :param pulumi.Input[str] workload_identity: Deployment workload identity. This value can be changed via the Astro API if applicable.
        :param pulumi.Input[str] workspace_id: Deployment workspace identifier - if changing this value, the deployment will be recreated in the new workspace
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _DeploymentState.__new__(_DeploymentState)

        __props__.__dict__["airflow_version"] = airflow_version
        __props__.__dict__["astro_runtime_version"] = astro_runtime_version
        __props__.__dict__["cloud_provider"] = cloud_provider
        __props__.__dict__["cluster_id"] = cluster_id
        __props__.__dict__["contact_emails"] = contact_emails
        __props__.__dict__["created_at"] = created_at
        __props__.__dict__["created_by"] = created_by
        __props__.__dict__["dag_tarball_version"] = dag_tarball_version
        __props__.__dict__["default_task_pod_cpu"] = default_task_pod_cpu
        __props__.__dict__["default_task_pod_memory"] = default_task_pod_memory
        __props__.__dict__["description"] = description
        __props__.__dict__["desired_dag_tarball_version"] = desired_dag_tarball_version
        __props__.__dict__["environment_variables"] = environment_variables
        __props__.__dict__["executor"] = executor
        __props__.__dict__["external_ips"] = external_ips
        __props__.__dict__["image_repository"] = image_repository
        __props__.__dict__["image_tag"] = image_tag
        __props__.__dict__["image_version"] = image_version
        __props__.__dict__["is_cicd_enforced"] = is_cicd_enforced
        __props__.__dict__["is_dag_deploy_enabled"] = is_dag_deploy_enabled
        __props__.__dict__["is_development_mode"] = is_development_mode
        __props__.__dict__["is_high_availability"] = is_high_availability
        __props__.__dict__["name"] = name
        __props__.__dict__["namespace"] = namespace
        __props__.__dict__["oidc_issuer_url"] = oidc_issuer_url
        __props__.__dict__["original_astro_runtime_version"] = original_astro_runtime_version
        __props__.__dict__["region"] = region
        __props__.__dict__["resource_quota_cpu"] = resource_quota_cpu
        __props__.__dict__["resource_quota_memory"] = resource_quota_memory
        __props__.__dict__["scaling_spec"] = scaling_spec
        __props__.__dict__["scaling_status"] = scaling_status
        __props__.__dict__["scheduler_au"] = scheduler_au
        __props__.__dict__["scheduler_cpu"] = scheduler_cpu
        __props__.__dict__["scheduler_memory"] = scheduler_memory
        __props__.__dict__["scheduler_replicas"] = scheduler_replicas
        __props__.__dict__["scheduler_size"] = scheduler_size
        __props__.__dict__["status"] = status
        __props__.__dict__["status_reason"] = status_reason
        __props__.__dict__["task_pod_node_pool_id"] = task_pod_node_pool_id
        __props__.__dict__["type"] = type
        __props__.__dict__["updated_at"] = updated_at
        __props__.__dict__["updated_by"] = updated_by
        __props__.__dict__["webserver_airflow_api_url"] = webserver_airflow_api_url
        __props__.__dict__["webserver_ingress_hostname"] = webserver_ingress_hostname
        __props__.__dict__["webserver_url"] = webserver_url
        __props__.__dict__["worker_queues"] = worker_queues
        __props__.__dict__["workload_identity"] = workload_identity
        __props__.__dict__["workspace_id"] = workspace_id
        return Deployment(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="airflowVersion")
    def airflow_version(self) -> pulumi.Output[str]:
        """
        Deployment Airflow version
        """
        return pulumi.get(self, "airflow_version")

    @property
    @pulumi.getter(name="astroRuntimeVersion")
    def astro_runtime_version(self) -> pulumi.Output[str]:
        """
        Deployment's current Astro Runtime version
        """
        return pulumi.get(self, "astro_runtime_version")

    @property
    @pulumi.getter(name="cloudProvider")
    def cloud_provider(self) -> pulumi.Output[str]:
        """
        Deployment cloud provider - required for 'STANDARD' deployments. If changing this value, the deployment will be recreated in the new cloud provider
        """
        return pulumi.get(self, "cloud_provider")

    @property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> pulumi.Output[str]:
        """
        Deployment cluster identifier - required for 'HYBRID' and 'DEDICATED' deployments. If changing this value, the deployment will be recreated in the new cluster
        """
        return pulumi.get(self, "cluster_id")

    @property
    @pulumi.getter(name="contactEmails")
    def contact_emails(self) -> pulumi.Output[Sequence[str]]:
        """
        Deployment contact emails
        """
        return pulumi.get(self, "contact_emails")

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> pulumi.Output[str]:
        """
        Deployment creation timestamp
        """
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> pulumi.Output['outputs.DeploymentCreatedBy']:
        """
        Deployment creator
        """
        return pulumi.get(self, "created_by")

    @property
    @pulumi.getter(name="dagTarballVersion")
    def dag_tarball_version(self) -> pulumi.Output[str]:
        """
        Deployment DAG tarball version
        """
        return pulumi.get(self, "dag_tarball_version")

    @property
    @pulumi.getter(name="defaultTaskPodCpu")
    def default_task_pod_cpu(self) -> pulumi.Output[Optional[str]]:
        """
        Deployment default task pod CPU - required for 'STANDARD' and 'DEDICATED' deployments
        """
        return pulumi.get(self, "default_task_pod_cpu")

    @property
    @pulumi.getter(name="defaultTaskPodMemory")
    def default_task_pod_memory(self) -> pulumi.Output[Optional[str]]:
        """
        Deployment default task pod memory - required for 'STANDARD' and 'DEDICATED' deployments
        """
        return pulumi.get(self, "default_task_pod_memory")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[str]:
        """
        Deployment description
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="desiredDagTarballVersion")
    def desired_dag_tarball_version(self) -> pulumi.Output[str]:
        """
        Deployment desired DAG tarball version
        """
        return pulumi.get(self, "desired_dag_tarball_version")

    @property
    @pulumi.getter(name="environmentVariables")
    def environment_variables(self) -> pulumi.Output[Sequence['outputs.DeploymentEnvironmentVariable']]:
        """
        Deployment environment variables
        """
        return pulumi.get(self, "environment_variables")

    @property
    @pulumi.getter
    def executor(self) -> pulumi.Output[str]:
        """
        Deployment executor
        """
        return pulumi.get(self, "executor")

    @property
    @pulumi.getter(name="externalIps")
    def external_ips(self) -> pulumi.Output[Sequence[str]]:
        """
        Deployment external IPs
        """
        return pulumi.get(self, "external_ips")

    @property
    @pulumi.getter(name="imageRepository")
    def image_repository(self) -> pulumi.Output[str]:
        """
        Deployment image repository
        """
        return pulumi.get(self, "image_repository")

    @property
    @pulumi.getter(name="imageTag")
    def image_tag(self) -> pulumi.Output[str]:
        """
        Deployment image tag
        """
        return pulumi.get(self, "image_tag")

    @property
    @pulumi.getter(name="imageVersion")
    def image_version(self) -> pulumi.Output[str]:
        """
        Deployment image version
        """
        return pulumi.get(self, "image_version")

    @property
    @pulumi.getter(name="isCicdEnforced")
    def is_cicd_enforced(self) -> pulumi.Output[bool]:
        """
        Deployment CI/CD enforced
        """
        return pulumi.get(self, "is_cicd_enforced")

    @property
    @pulumi.getter(name="isDagDeployEnabled")
    def is_dag_deploy_enabled(self) -> pulumi.Output[bool]:
        """
        Whether DAG deploy is enabled - Changing this value may disrupt your deployment. Read more at https://docs.astronomer.io/astro/deploy-dags#enable-or-disable-dag-only-deploys-on-a-deployment
        """
        return pulumi.get(self, "is_dag_deploy_enabled")

    @property
    @pulumi.getter(name="isDevelopmentMode")
    def is_development_mode(self) -> pulumi.Output[Optional[bool]]:
        """
        Deployment development mode - required for 'STANDARD' and 'DEDICATED' deployments. If changing from 'False' to 'True', the deployment will be recreated
        """
        return pulumi.get(self, "is_development_mode")

    @property
    @pulumi.getter(name="isHighAvailability")
    def is_high_availability(self) -> pulumi.Output[Optional[bool]]:
        """
        Deployment high availability - required for 'STANDARD' and 'DEDICATED' deployments
        """
        return pulumi.get(self, "is_high_availability")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Deployment name
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def namespace(self) -> pulumi.Output[str]:
        """
        Deployment namespace
        """
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter(name="oidcIssuerUrl")
    def oidc_issuer_url(self) -> pulumi.Output[str]:
        """
        Deployment OIDC issuer URL
        """
        return pulumi.get(self, "oidc_issuer_url")

    @property
    @pulumi.getter(name="originalAstroRuntimeVersion")
    def original_astro_runtime_version(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "original_astro_runtime_version")

    @property
    @pulumi.getter
    def region(self) -> pulumi.Output[str]:
        """
        Deployment region - required for 'STANDARD' deployments. If changing this value, the deployment will be recreated in the new region
        """
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="resourceQuotaCpu")
    def resource_quota_cpu(self) -> pulumi.Output[Optional[str]]:
        """
        Deployment resource quota CPU - required for 'STANDARD' and 'DEDICATED' deployments
        """
        return pulumi.get(self, "resource_quota_cpu")

    @property
    @pulumi.getter(name="resourceQuotaMemory")
    def resource_quota_memory(self) -> pulumi.Output[Optional[str]]:
        """
        Deployment resource quota memory - required for 'STANDARD' and 'DEDICATED' deployments
        """
        return pulumi.get(self, "resource_quota_memory")

    @property
    @pulumi.getter(name="scalingSpec")
    def scaling_spec(self) -> pulumi.Output[Optional['outputs.DeploymentScalingSpec']]:
        """
        Deployment scaling spec - only for 'STANDARD' and 'DEDICATED' deployments
        """
        return pulumi.get(self, "scaling_spec")

    @property
    @pulumi.getter(name="scalingStatus")
    def scaling_status(self) -> pulumi.Output['outputs.DeploymentScalingStatus']:
        """
        Deployment scaling status
        """
        return pulumi.get(self, "scaling_status")

    @property
    @pulumi.getter(name="schedulerAu")
    def scheduler_au(self) -> pulumi.Output[Optional[int]]:
        """
        Deployment scheduler AU - required for 'HYBRID' deployments
        """
        return pulumi.get(self, "scheduler_au")

    @property
    @pulumi.getter(name="schedulerCpu")
    def scheduler_cpu(self) -> pulumi.Output[str]:
        """
        Deployment scheduler CPU
        """
        return pulumi.get(self, "scheduler_cpu")

    @property
    @pulumi.getter(name="schedulerMemory")
    def scheduler_memory(self) -> pulumi.Output[str]:
        """
        Deployment scheduler memory
        """
        return pulumi.get(self, "scheduler_memory")

    @property
    @pulumi.getter(name="schedulerReplicas")
    def scheduler_replicas(self) -> pulumi.Output[int]:
        """
        Deployment scheduler replicas - required for 'HYBRID' deployments
        """
        return pulumi.get(self, "scheduler_replicas")

    @property
    @pulumi.getter(name="schedulerSize")
    def scheduler_size(self) -> pulumi.Output[Optional[str]]:
        """
        Deployment scheduler size - required for 'STANDARD' and 'DEDICATED' deployments
        """
        return pulumi.get(self, "scheduler_size")

    @property
    @pulumi.getter
    def status(self) -> pulumi.Output[str]:
        """
        Deployment status
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="statusReason")
    def status_reason(self) -> pulumi.Output[str]:
        """
        Deployment status reason
        """
        return pulumi.get(self, "status_reason")

    @property
    @pulumi.getter(name="taskPodNodePoolId")
    def task_pod_node_pool_id(self) -> pulumi.Output[Optional[str]]:
        """
        Deployment task pod node pool identifier - required if executor is 'KUBERNETES' and type is 'HYBRID'
        """
        return pulumi.get(self, "task_pod_node_pool_id")

    @property
    @pulumi.getter
    def type(self) -> pulumi.Output[str]:
        """
        Deployment type - if changing this value, the deployment will be recreated with the new type
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> pulumi.Output[str]:
        """
        Deployment last updated timestamp
        """
        return pulumi.get(self, "updated_at")

    @property
    @pulumi.getter(name="updatedBy")
    def updated_by(self) -> pulumi.Output['outputs.DeploymentUpdatedBy']:
        """
        Deployment updater
        """
        return pulumi.get(self, "updated_by")

    @property
    @pulumi.getter(name="webserverAirflowApiUrl")
    def webserver_airflow_api_url(self) -> pulumi.Output[str]:
        """
        Deployment webserver Airflow API URL
        """
        return pulumi.get(self, "webserver_airflow_api_url")

    @property
    @pulumi.getter(name="webserverIngressHostname")
    def webserver_ingress_hostname(self) -> pulumi.Output[str]:
        """
        Deployment webserver ingress hostname
        """
        return pulumi.get(self, "webserver_ingress_hostname")

    @property
    @pulumi.getter(name="webserverUrl")
    def webserver_url(self) -> pulumi.Output[str]:
        """
        Deployment webserver URL
        """
        return pulumi.get(self, "webserver_url")

    @property
    @pulumi.getter(name="workerQueues")
    def worker_queues(self) -> pulumi.Output[Optional[Sequence['outputs.DeploymentWorkerQueue']]]:
        """
        Deployment worker queues - required for deployments with 'CELERY' executor
        """
        return pulumi.get(self, "worker_queues")

    @property
    @pulumi.getter(name="workloadIdentity")
    def workload_identity(self) -> pulumi.Output[str]:
        """
        Deployment workload identity. This value can be changed via the Astro API if applicable.
        """
        return pulumi.get(self, "workload_identity")

    @property
    @pulumi.getter(name="workspaceId")
    def workspace_id(self) -> pulumi.Output[str]:
        """
        Deployment workspace identifier - if changing this value, the deployment will be recreated in the new workspace
        """
        return pulumi.get(self, "workspace_id")

