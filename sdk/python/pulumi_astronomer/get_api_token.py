# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs

__all__ = [
    'GetApiTokenResult',
    'AwaitableGetApiTokenResult',
    'get_api_token',
    'get_api_token_output',
]

@pulumi.output_type
class GetApiTokenResult:
    """
    A collection of values returned by getApiToken.
    """
    def __init__(__self__, created_at=None, created_by=None, description=None, end_at=None, expiry_period_in_days=None, id=None, last_used_at=None, name=None, roles=None, short_token=None, start_at=None, type=None, updated_at=None, updated_by=None):
        if created_at and not isinstance(created_at, str):
            raise TypeError("Expected argument 'created_at' to be a str")
        pulumi.set(__self__, "created_at", created_at)
        if created_by and not isinstance(created_by, dict):
            raise TypeError("Expected argument 'created_by' to be a dict")
        pulumi.set(__self__, "created_by", created_by)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if end_at and not isinstance(end_at, str):
            raise TypeError("Expected argument 'end_at' to be a str")
        pulumi.set(__self__, "end_at", end_at)
        if expiry_period_in_days and not isinstance(expiry_period_in_days, int):
            raise TypeError("Expected argument 'expiry_period_in_days' to be a int")
        pulumi.set(__self__, "expiry_period_in_days", expiry_period_in_days)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if last_used_at and not isinstance(last_used_at, str):
            raise TypeError("Expected argument 'last_used_at' to be a str")
        pulumi.set(__self__, "last_used_at", last_used_at)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if roles and not isinstance(roles, list):
            raise TypeError("Expected argument 'roles' to be a list")
        pulumi.set(__self__, "roles", roles)
        if short_token and not isinstance(short_token, str):
            raise TypeError("Expected argument 'short_token' to be a str")
        pulumi.set(__self__, "short_token", short_token)
        if start_at and not isinstance(start_at, str):
            raise TypeError("Expected argument 'start_at' to be a str")
        pulumi.set(__self__, "start_at", start_at)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)
        if updated_at and not isinstance(updated_at, str):
            raise TypeError("Expected argument 'updated_at' to be a str")
        pulumi.set(__self__, "updated_at", updated_at)
        if updated_by and not isinstance(updated_by, dict):
            raise TypeError("Expected argument 'updated_by' to be a dict")
        pulumi.set(__self__, "updated_by", updated_by)

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> str:
        """
        API Token creation timestamp
        """
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> 'outputs.GetApiTokenCreatedByResult':
        """
        API Token creator
        """
        return pulumi.get(self, "created_by")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        API Token description
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="endAt")
    def end_at(self) -> str:
        """
        time when the API token will expire in UTC
        """
        return pulumi.get(self, "end_at")

    @property
    @pulumi.getter(name="expiryPeriodInDays")
    def expiry_period_in_days(self) -> int:
        """
        API Token expiry period in days
        """
        return pulumi.get(self, "expiry_period_in_days")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        API Token identifier
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="lastUsedAt")
    def last_used_at(self) -> str:
        """
        API Token last used timestamp
        """
        return pulumi.get(self, "last_used_at")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        API Token name
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def roles(self) -> Sequence['outputs.GetApiTokenRoleResult']:
        """
        The roles assigned to the API Token
        """
        return pulumi.get(self, "roles")

    @property
    @pulumi.getter(name="shortToken")
    def short_token(self) -> str:
        """
        API Token short token
        """
        return pulumi.get(self, "short_token")

    @property
    @pulumi.getter(name="startAt")
    def start_at(self) -> str:
        """
        time when the API token will become valid in UTC
        """
        return pulumi.get(self, "start_at")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        API Token type
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> str:
        """
        API Token last updated timestamp
        """
        return pulumi.get(self, "updated_at")

    @property
    @pulumi.getter(name="updatedBy")
    def updated_by(self) -> 'outputs.GetApiTokenUpdatedByResult':
        """
        API Token updater
        """
        return pulumi.get(self, "updated_by")


class AwaitableGetApiTokenResult(GetApiTokenResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetApiTokenResult(
            created_at=self.created_at,
            created_by=self.created_by,
            description=self.description,
            end_at=self.end_at,
            expiry_period_in_days=self.expiry_period_in_days,
            id=self.id,
            last_used_at=self.last_used_at,
            name=self.name,
            roles=self.roles,
            short_token=self.short_token,
            start_at=self.start_at,
            type=self.type,
            updated_at=self.updated_at,
            updated_by=self.updated_by)


def get_api_token(id: Optional[str] = None,
                  opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetApiTokenResult:
    """
    API Token data source

    ## Example Usage

    ```python
    import pulumi
    import pulumi_astronomer as astronomer

    example_api_token = astronomer.get_api_token(id="clxm4836f00ql01me3nigmcr6")
    pulumi.export("apiToken", example_api_token)
    ```


    :param str id: API Token identifier
    """
    __args__ = dict()
    __args__['id'] = id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('astronomer:index/getApiToken:getApiToken', __args__, opts=opts, typ=GetApiTokenResult).value

    return AwaitableGetApiTokenResult(
        created_at=pulumi.get(__ret__, 'created_at'),
        created_by=pulumi.get(__ret__, 'created_by'),
        description=pulumi.get(__ret__, 'description'),
        end_at=pulumi.get(__ret__, 'end_at'),
        expiry_period_in_days=pulumi.get(__ret__, 'expiry_period_in_days'),
        id=pulumi.get(__ret__, 'id'),
        last_used_at=pulumi.get(__ret__, 'last_used_at'),
        name=pulumi.get(__ret__, 'name'),
        roles=pulumi.get(__ret__, 'roles'),
        short_token=pulumi.get(__ret__, 'short_token'),
        start_at=pulumi.get(__ret__, 'start_at'),
        type=pulumi.get(__ret__, 'type'),
        updated_at=pulumi.get(__ret__, 'updated_at'),
        updated_by=pulumi.get(__ret__, 'updated_by'))


@_utilities.lift_output_func(get_api_token)
def get_api_token_output(id: Optional[pulumi.Input[str]] = None,
                         opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetApiTokenResult]:
    """
    API Token data source

    ## Example Usage

    ```python
    import pulumi
    import pulumi_astronomer as astronomer

    example_api_token = astronomer.get_api_token(id="clxm4836f00ql01me3nigmcr6")
    pulumi.export("apiToken", example_api_token)
    ```


    :param str id: API Token identifier
    """
    ...
