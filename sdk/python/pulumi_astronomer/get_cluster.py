# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs

__all__ = [
    'GetClusterResult',
    'AwaitableGetClusterResult',
    'get_cluster',
    'get_cluster_output',
]

@pulumi.output_type
class GetClusterResult:
    """
    A collection of values returned by getCluster.
    """
    def __init__(__self__, cloud_provider=None, created_at=None, db_instance_type=None, health_status=None, id=None, is_limited=None, metadata=None, name=None, node_pools=None, pod_subnet_range=None, provider_account=None, region=None, service_peering_range=None, service_subnet_range=None, status=None, tags=None, tenant_id=None, type=None, updated_at=None, vpc_subnet_range=None, workspace_ids=None):
        if cloud_provider and not isinstance(cloud_provider, str):
            raise TypeError("Expected argument 'cloud_provider' to be a str")
        pulumi.set(__self__, "cloud_provider", cloud_provider)
        if created_at and not isinstance(created_at, str):
            raise TypeError("Expected argument 'created_at' to be a str")
        pulumi.set(__self__, "created_at", created_at)
        if db_instance_type and not isinstance(db_instance_type, str):
            raise TypeError("Expected argument 'db_instance_type' to be a str")
        pulumi.set(__self__, "db_instance_type", db_instance_type)
        if health_status and not isinstance(health_status, dict):
            raise TypeError("Expected argument 'health_status' to be a dict")
        pulumi.set(__self__, "health_status", health_status)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if is_limited and not isinstance(is_limited, bool):
            raise TypeError("Expected argument 'is_limited' to be a bool")
        pulumi.set(__self__, "is_limited", is_limited)
        if metadata and not isinstance(metadata, dict):
            raise TypeError("Expected argument 'metadata' to be a dict")
        pulumi.set(__self__, "metadata", metadata)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if node_pools and not isinstance(node_pools, list):
            raise TypeError("Expected argument 'node_pools' to be a list")
        pulumi.set(__self__, "node_pools", node_pools)
        if pod_subnet_range and not isinstance(pod_subnet_range, str):
            raise TypeError("Expected argument 'pod_subnet_range' to be a str")
        pulumi.set(__self__, "pod_subnet_range", pod_subnet_range)
        if provider_account and not isinstance(provider_account, str):
            raise TypeError("Expected argument 'provider_account' to be a str")
        pulumi.set(__self__, "provider_account", provider_account)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if service_peering_range and not isinstance(service_peering_range, str):
            raise TypeError("Expected argument 'service_peering_range' to be a str")
        pulumi.set(__self__, "service_peering_range", service_peering_range)
        if service_subnet_range and not isinstance(service_subnet_range, str):
            raise TypeError("Expected argument 'service_subnet_range' to be a str")
        pulumi.set(__self__, "service_subnet_range", service_subnet_range)
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        pulumi.set(__self__, "status", status)
        if tags and not isinstance(tags, list):
            raise TypeError("Expected argument 'tags' to be a list")
        pulumi.set(__self__, "tags", tags)
        if tenant_id and not isinstance(tenant_id, str):
            raise TypeError("Expected argument 'tenant_id' to be a str")
        pulumi.set(__self__, "tenant_id", tenant_id)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)
        if updated_at and not isinstance(updated_at, str):
            raise TypeError("Expected argument 'updated_at' to be a str")
        pulumi.set(__self__, "updated_at", updated_at)
        if vpc_subnet_range and not isinstance(vpc_subnet_range, str):
            raise TypeError("Expected argument 'vpc_subnet_range' to be a str")
        pulumi.set(__self__, "vpc_subnet_range", vpc_subnet_range)
        if workspace_ids and not isinstance(workspace_ids, list):
            raise TypeError("Expected argument 'workspace_ids' to be a list")
        pulumi.set(__self__, "workspace_ids", workspace_ids)

    @property
    @pulumi.getter(name="cloudProvider")
    def cloud_provider(self) -> str:
        """
        Cluster cloud provider
        """
        return pulumi.get(self, "cloud_provider")

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> str:
        """
        Cluster creation timestamp
        """
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter(name="dbInstanceType")
    def db_instance_type(self) -> str:
        """
        Cluster database instance type
        """
        return pulumi.get(self, "db_instance_type")

    @property
    @pulumi.getter(name="healthStatus")
    def health_status(self) -> 'outputs.GetClusterHealthStatusResult':
        """
        Cluster health status
        """
        return pulumi.get(self, "health_status")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Cluster identifier
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isLimited")
    def is_limited(self) -> bool:
        """
        Whether the cluster is limited
        """
        return pulumi.get(self, "is_limited")

    @property
    @pulumi.getter
    def metadata(self) -> 'outputs.GetClusterMetadataResult':
        """
        Cluster metadata
        """
        return pulumi.get(self, "metadata")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Cluster name
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="nodePools")
    def node_pools(self) -> Sequence['outputs.GetClusterNodePoolResult']:
        """
        Cluster node pools
        """
        return pulumi.get(self, "node_pools")

    @property
    @pulumi.getter(name="podSubnetRange")
    def pod_subnet_range(self) -> str:
        """
        Cluster pod subnet range
        """
        return pulumi.get(self, "pod_subnet_range")

    @property
    @pulumi.getter(name="providerAccount")
    def provider_account(self) -> str:
        """
        Cluster provider account
        """
        return pulumi.get(self, "provider_account")

    @property
    @pulumi.getter
    def region(self) -> str:
        """
        Cluster region
        """
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="servicePeeringRange")
    def service_peering_range(self) -> str:
        """
        Cluster service peering range
        """
        return pulumi.get(self, "service_peering_range")

    @property
    @pulumi.getter(name="serviceSubnetRange")
    def service_subnet_range(self) -> str:
        """
        Cluster service subnet range
        """
        return pulumi.get(self, "service_subnet_range")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        Cluster status
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def tags(self) -> Sequence['outputs.GetClusterTagResult']:
        """
        Cluster tags
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="tenantId")
    def tenant_id(self) -> str:
        """
        Cluster tenant ID
        """
        return pulumi.get(self, "tenant_id")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Cluster type
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> str:
        """
        Cluster last updated timestamp
        """
        return pulumi.get(self, "updated_at")

    @property
    @pulumi.getter(name="vpcSubnetRange")
    def vpc_subnet_range(self) -> str:
        """
        Cluster VPC subnet range
        """
        return pulumi.get(self, "vpc_subnet_range")

    @property
    @pulumi.getter(name="workspaceIds")
    def workspace_ids(self) -> Sequence[str]:
        """
        Cluster workspace IDs
        """
        return pulumi.get(self, "workspace_ids")


class AwaitableGetClusterResult(GetClusterResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetClusterResult(
            cloud_provider=self.cloud_provider,
            created_at=self.created_at,
            db_instance_type=self.db_instance_type,
            health_status=self.health_status,
            id=self.id,
            is_limited=self.is_limited,
            metadata=self.metadata,
            name=self.name,
            node_pools=self.node_pools,
            pod_subnet_range=self.pod_subnet_range,
            provider_account=self.provider_account,
            region=self.region,
            service_peering_range=self.service_peering_range,
            service_subnet_range=self.service_subnet_range,
            status=self.status,
            tags=self.tags,
            tenant_id=self.tenant_id,
            type=self.type,
            updated_at=self.updated_at,
            vpc_subnet_range=self.vpc_subnet_range,
            workspace_ids=self.workspace_ids)


def get_cluster(id: Optional[str] = None,
                opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetClusterResult:
    """
    Cluster data source

    ## Example Usage

    ```python
    import pulumi
    import pulumi_astronomer as astronomer

    example_cluster = astronomer.get_cluster(id="clozc036j01to01jrlgvueo8t")
    pulumi.export("cluster", example_cluster)
    ```


    :param str id: Cluster identifier
    """
    __args__ = dict()
    __args__['id'] = id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('astronomer:index/getCluster:getCluster', __args__, opts=opts, typ=GetClusterResult).value

    return AwaitableGetClusterResult(
        cloud_provider=pulumi.get(__ret__, 'cloud_provider'),
        created_at=pulumi.get(__ret__, 'created_at'),
        db_instance_type=pulumi.get(__ret__, 'db_instance_type'),
        health_status=pulumi.get(__ret__, 'health_status'),
        id=pulumi.get(__ret__, 'id'),
        is_limited=pulumi.get(__ret__, 'is_limited'),
        metadata=pulumi.get(__ret__, 'metadata'),
        name=pulumi.get(__ret__, 'name'),
        node_pools=pulumi.get(__ret__, 'node_pools'),
        pod_subnet_range=pulumi.get(__ret__, 'pod_subnet_range'),
        provider_account=pulumi.get(__ret__, 'provider_account'),
        region=pulumi.get(__ret__, 'region'),
        service_peering_range=pulumi.get(__ret__, 'service_peering_range'),
        service_subnet_range=pulumi.get(__ret__, 'service_subnet_range'),
        status=pulumi.get(__ret__, 'status'),
        tags=pulumi.get(__ret__, 'tags'),
        tenant_id=pulumi.get(__ret__, 'tenant_id'),
        type=pulumi.get(__ret__, 'type'),
        updated_at=pulumi.get(__ret__, 'updated_at'),
        vpc_subnet_range=pulumi.get(__ret__, 'vpc_subnet_range'),
        workspace_ids=pulumi.get(__ret__, 'workspace_ids'))


@_utilities.lift_output_func(get_cluster)
def get_cluster_output(id: Optional[pulumi.Input[str]] = None,
                       opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetClusterResult]:
    """
    Cluster data source

    ## Example Usage

    ```python
    import pulumi
    import pulumi_astronomer as astronomer

    example_cluster = astronomer.get_cluster(id="clozc036j01to01jrlgvueo8t")
    pulumi.export("cluster", example_cluster)
    ```


    :param str id: Cluster identifier
    """
    ...
