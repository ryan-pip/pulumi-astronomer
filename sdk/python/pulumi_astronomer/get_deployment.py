# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs

__all__ = [
    'GetDeploymentResult',
    'AwaitableGetDeploymentResult',
    'get_deployment',
    'get_deployment_output',
]

@pulumi.output_type
class GetDeploymentResult:
    """
    A collection of values returned by getDeployment.
    """
    def __init__(__self__, airflow_version=None, astro_runtime_version=None, cloud_provider=None, cluster_id=None, contact_emails=None, created_at=None, created_by=None, dag_tarball_version=None, default_task_pod_cpu=None, default_task_pod_memory=None, description=None, desired_dag_tarball_version=None, environment_variables=None, executor=None, external_ips=None, id=None, image_repository=None, image_tag=None, image_version=None, is_cicd_enforced=None, is_dag_deploy_enabled=None, is_development_mode=None, is_high_availability=None, name=None, namespace=None, oidc_issuer_url=None, region=None, resource_quota_cpu=None, resource_quota_memory=None, scaling_spec=None, scaling_status=None, scheduler_au=None, scheduler_cpu=None, scheduler_memory=None, scheduler_replicas=None, scheduler_size=None, status=None, status_reason=None, task_pod_node_pool_id=None, type=None, updated_at=None, updated_by=None, webserver_airflow_api_url=None, webserver_ingress_hostname=None, webserver_url=None, worker_queues=None, workload_identity=None, workspace_id=None):
        if airflow_version and not isinstance(airflow_version, str):
            raise TypeError("Expected argument 'airflow_version' to be a str")
        pulumi.set(__self__, "airflow_version", airflow_version)
        if astro_runtime_version and not isinstance(astro_runtime_version, str):
            raise TypeError("Expected argument 'astro_runtime_version' to be a str")
        pulumi.set(__self__, "astro_runtime_version", astro_runtime_version)
        if cloud_provider and not isinstance(cloud_provider, str):
            raise TypeError("Expected argument 'cloud_provider' to be a str")
        pulumi.set(__self__, "cloud_provider", cloud_provider)
        if cluster_id and not isinstance(cluster_id, str):
            raise TypeError("Expected argument 'cluster_id' to be a str")
        pulumi.set(__self__, "cluster_id", cluster_id)
        if contact_emails and not isinstance(contact_emails, list):
            raise TypeError("Expected argument 'contact_emails' to be a list")
        pulumi.set(__self__, "contact_emails", contact_emails)
        if created_at and not isinstance(created_at, str):
            raise TypeError("Expected argument 'created_at' to be a str")
        pulumi.set(__self__, "created_at", created_at)
        if created_by and not isinstance(created_by, dict):
            raise TypeError("Expected argument 'created_by' to be a dict")
        pulumi.set(__self__, "created_by", created_by)
        if dag_tarball_version and not isinstance(dag_tarball_version, str):
            raise TypeError("Expected argument 'dag_tarball_version' to be a str")
        pulumi.set(__self__, "dag_tarball_version", dag_tarball_version)
        if default_task_pod_cpu and not isinstance(default_task_pod_cpu, str):
            raise TypeError("Expected argument 'default_task_pod_cpu' to be a str")
        pulumi.set(__self__, "default_task_pod_cpu", default_task_pod_cpu)
        if default_task_pod_memory and not isinstance(default_task_pod_memory, str):
            raise TypeError("Expected argument 'default_task_pod_memory' to be a str")
        pulumi.set(__self__, "default_task_pod_memory", default_task_pod_memory)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if desired_dag_tarball_version and not isinstance(desired_dag_tarball_version, str):
            raise TypeError("Expected argument 'desired_dag_tarball_version' to be a str")
        pulumi.set(__self__, "desired_dag_tarball_version", desired_dag_tarball_version)
        if environment_variables and not isinstance(environment_variables, list):
            raise TypeError("Expected argument 'environment_variables' to be a list")
        pulumi.set(__self__, "environment_variables", environment_variables)
        if executor and not isinstance(executor, str):
            raise TypeError("Expected argument 'executor' to be a str")
        pulumi.set(__self__, "executor", executor)
        if external_ips and not isinstance(external_ips, list):
            raise TypeError("Expected argument 'external_ips' to be a list")
        pulumi.set(__self__, "external_ips", external_ips)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if image_repository and not isinstance(image_repository, str):
            raise TypeError("Expected argument 'image_repository' to be a str")
        pulumi.set(__self__, "image_repository", image_repository)
        if image_tag and not isinstance(image_tag, str):
            raise TypeError("Expected argument 'image_tag' to be a str")
        pulumi.set(__self__, "image_tag", image_tag)
        if image_version and not isinstance(image_version, str):
            raise TypeError("Expected argument 'image_version' to be a str")
        pulumi.set(__self__, "image_version", image_version)
        if is_cicd_enforced and not isinstance(is_cicd_enforced, bool):
            raise TypeError("Expected argument 'is_cicd_enforced' to be a bool")
        pulumi.set(__self__, "is_cicd_enforced", is_cicd_enforced)
        if is_dag_deploy_enabled and not isinstance(is_dag_deploy_enabled, bool):
            raise TypeError("Expected argument 'is_dag_deploy_enabled' to be a bool")
        pulumi.set(__self__, "is_dag_deploy_enabled", is_dag_deploy_enabled)
        if is_development_mode and not isinstance(is_development_mode, bool):
            raise TypeError("Expected argument 'is_development_mode' to be a bool")
        pulumi.set(__self__, "is_development_mode", is_development_mode)
        if is_high_availability and not isinstance(is_high_availability, bool):
            raise TypeError("Expected argument 'is_high_availability' to be a bool")
        pulumi.set(__self__, "is_high_availability", is_high_availability)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if namespace and not isinstance(namespace, str):
            raise TypeError("Expected argument 'namespace' to be a str")
        pulumi.set(__self__, "namespace", namespace)
        if oidc_issuer_url and not isinstance(oidc_issuer_url, str):
            raise TypeError("Expected argument 'oidc_issuer_url' to be a str")
        pulumi.set(__self__, "oidc_issuer_url", oidc_issuer_url)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if resource_quota_cpu and not isinstance(resource_quota_cpu, str):
            raise TypeError("Expected argument 'resource_quota_cpu' to be a str")
        pulumi.set(__self__, "resource_quota_cpu", resource_quota_cpu)
        if resource_quota_memory and not isinstance(resource_quota_memory, str):
            raise TypeError("Expected argument 'resource_quota_memory' to be a str")
        pulumi.set(__self__, "resource_quota_memory", resource_quota_memory)
        if scaling_spec and not isinstance(scaling_spec, dict):
            raise TypeError("Expected argument 'scaling_spec' to be a dict")
        pulumi.set(__self__, "scaling_spec", scaling_spec)
        if scaling_status and not isinstance(scaling_status, dict):
            raise TypeError("Expected argument 'scaling_status' to be a dict")
        pulumi.set(__self__, "scaling_status", scaling_status)
        if scheduler_au and not isinstance(scheduler_au, int):
            raise TypeError("Expected argument 'scheduler_au' to be a int")
        pulumi.set(__self__, "scheduler_au", scheduler_au)
        if scheduler_cpu and not isinstance(scheduler_cpu, str):
            raise TypeError("Expected argument 'scheduler_cpu' to be a str")
        pulumi.set(__self__, "scheduler_cpu", scheduler_cpu)
        if scheduler_memory and not isinstance(scheduler_memory, str):
            raise TypeError("Expected argument 'scheduler_memory' to be a str")
        pulumi.set(__self__, "scheduler_memory", scheduler_memory)
        if scheduler_replicas and not isinstance(scheduler_replicas, int):
            raise TypeError("Expected argument 'scheduler_replicas' to be a int")
        pulumi.set(__self__, "scheduler_replicas", scheduler_replicas)
        if scheduler_size and not isinstance(scheduler_size, str):
            raise TypeError("Expected argument 'scheduler_size' to be a str")
        pulumi.set(__self__, "scheduler_size", scheduler_size)
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        pulumi.set(__self__, "status", status)
        if status_reason and not isinstance(status_reason, str):
            raise TypeError("Expected argument 'status_reason' to be a str")
        pulumi.set(__self__, "status_reason", status_reason)
        if task_pod_node_pool_id and not isinstance(task_pod_node_pool_id, str):
            raise TypeError("Expected argument 'task_pod_node_pool_id' to be a str")
        pulumi.set(__self__, "task_pod_node_pool_id", task_pod_node_pool_id)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)
        if updated_at and not isinstance(updated_at, str):
            raise TypeError("Expected argument 'updated_at' to be a str")
        pulumi.set(__self__, "updated_at", updated_at)
        if updated_by and not isinstance(updated_by, dict):
            raise TypeError("Expected argument 'updated_by' to be a dict")
        pulumi.set(__self__, "updated_by", updated_by)
        if webserver_airflow_api_url and not isinstance(webserver_airflow_api_url, str):
            raise TypeError("Expected argument 'webserver_airflow_api_url' to be a str")
        pulumi.set(__self__, "webserver_airflow_api_url", webserver_airflow_api_url)
        if webserver_ingress_hostname and not isinstance(webserver_ingress_hostname, str):
            raise TypeError("Expected argument 'webserver_ingress_hostname' to be a str")
        pulumi.set(__self__, "webserver_ingress_hostname", webserver_ingress_hostname)
        if webserver_url and not isinstance(webserver_url, str):
            raise TypeError("Expected argument 'webserver_url' to be a str")
        pulumi.set(__self__, "webserver_url", webserver_url)
        if worker_queues and not isinstance(worker_queues, list):
            raise TypeError("Expected argument 'worker_queues' to be a list")
        pulumi.set(__self__, "worker_queues", worker_queues)
        if workload_identity and not isinstance(workload_identity, str):
            raise TypeError("Expected argument 'workload_identity' to be a str")
        pulumi.set(__self__, "workload_identity", workload_identity)
        if workspace_id and not isinstance(workspace_id, str):
            raise TypeError("Expected argument 'workspace_id' to be a str")
        pulumi.set(__self__, "workspace_id", workspace_id)

    @property
    @pulumi.getter(name="airflowVersion")
    def airflow_version(self) -> str:
        """
        Deployment Airflow version
        """
        return pulumi.get(self, "airflow_version")

    @property
    @pulumi.getter(name="astroRuntimeVersion")
    def astro_runtime_version(self) -> str:
        """
        Deployment Astro Runtime version
        """
        return pulumi.get(self, "astro_runtime_version")

    @property
    @pulumi.getter(name="cloudProvider")
    def cloud_provider(self) -> str:
        """
        Deployment cloud provider
        """
        return pulumi.get(self, "cloud_provider")

    @property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> str:
        """
        Deployment cluster identifier
        """
        return pulumi.get(self, "cluster_id")

    @property
    @pulumi.getter(name="contactEmails")
    def contact_emails(self) -> Sequence[str]:
        """
        Deployment contact emails
        """
        return pulumi.get(self, "contact_emails")

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> str:
        """
        Deployment creation timestamp
        """
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> 'outputs.GetDeploymentCreatedByResult':
        """
        Deployment creator
        """
        return pulumi.get(self, "created_by")

    @property
    @pulumi.getter(name="dagTarballVersion")
    def dag_tarball_version(self) -> str:
        """
        Deployment DAG tarball version
        """
        return pulumi.get(self, "dag_tarball_version")

    @property
    @pulumi.getter(name="defaultTaskPodCpu")
    def default_task_pod_cpu(self) -> str:
        """
        Deployment default task pod CPU
        """
        return pulumi.get(self, "default_task_pod_cpu")

    @property
    @pulumi.getter(name="defaultTaskPodMemory")
    def default_task_pod_memory(self) -> str:
        """
        Deployment default task pod memory
        """
        return pulumi.get(self, "default_task_pod_memory")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        Deployment description
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="desiredDagTarballVersion")
    def desired_dag_tarball_version(self) -> str:
        """
        Deployment desired DAG tarball version
        """
        return pulumi.get(self, "desired_dag_tarball_version")

    @property
    @pulumi.getter(name="environmentVariables")
    def environment_variables(self) -> Sequence['outputs.GetDeploymentEnvironmentVariableResult']:
        """
        Deployment environment variables
        """
        return pulumi.get(self, "environment_variables")

    @property
    @pulumi.getter
    def executor(self) -> str:
        """
        Deployment executor
        """
        return pulumi.get(self, "executor")

    @property
    @pulumi.getter(name="externalIps")
    def external_ips(self) -> Sequence[str]:
        """
        Deployment external IPs
        """
        return pulumi.get(self, "external_ips")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Deployment identifier
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="imageRepository")
    def image_repository(self) -> str:
        """
        Deployment image repository
        """
        return pulumi.get(self, "image_repository")

    @property
    @pulumi.getter(name="imageTag")
    def image_tag(self) -> str:
        """
        Deployment image tag
        """
        return pulumi.get(self, "image_tag")

    @property
    @pulumi.getter(name="imageVersion")
    def image_version(self) -> str:
        """
        Deployment image version
        """
        return pulumi.get(self, "image_version")

    @property
    @pulumi.getter(name="isCicdEnforced")
    def is_cicd_enforced(self) -> bool:
        """
        Whether the Deployment enforces CI/CD deploys
        """
        return pulumi.get(self, "is_cicd_enforced")

    @property
    @pulumi.getter(name="isDagDeployEnabled")
    def is_dag_deploy_enabled(self) -> bool:
        """
        Whether DAG deploy is enabled
        """
        return pulumi.get(self, "is_dag_deploy_enabled")

    @property
    @pulumi.getter(name="isDevelopmentMode")
    def is_development_mode(self) -> bool:
        """
        Whether Deployment is in development mode
        """
        return pulumi.get(self, "is_development_mode")

    @property
    @pulumi.getter(name="isHighAvailability")
    def is_high_availability(self) -> bool:
        """
        Whether Deployment has high availability
        """
        return pulumi.get(self, "is_high_availability")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Deployment name
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def namespace(self) -> str:
        """
        Deployment namespace
        """
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter(name="oidcIssuerUrl")
    def oidc_issuer_url(self) -> str:
        """
        Deployment OIDC issuer URL
        """
        return pulumi.get(self, "oidc_issuer_url")

    @property
    @pulumi.getter
    def region(self) -> str:
        """
        Deployment region
        """
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="resourceQuotaCpu")
    def resource_quota_cpu(self) -> str:
        """
        Deployment resource quota CPU
        """
        return pulumi.get(self, "resource_quota_cpu")

    @property
    @pulumi.getter(name="resourceQuotaMemory")
    def resource_quota_memory(self) -> str:
        """
        Deployment resource quota memory
        """
        return pulumi.get(self, "resource_quota_memory")

    @property
    @pulumi.getter(name="scalingSpec")
    def scaling_spec(self) -> 'outputs.GetDeploymentScalingSpecResult':
        """
        Deployment scaling spec
        """
        return pulumi.get(self, "scaling_spec")

    @property
    @pulumi.getter(name="scalingStatus")
    def scaling_status(self) -> 'outputs.GetDeploymentScalingStatusResult':
        """
        Deployment scaling status
        """
        return pulumi.get(self, "scaling_status")

    @property
    @pulumi.getter(name="schedulerAu")
    def scheduler_au(self) -> int:
        """
        Deployment scheduler AU
        """
        return pulumi.get(self, "scheduler_au")

    @property
    @pulumi.getter(name="schedulerCpu")
    def scheduler_cpu(self) -> str:
        """
        Deployment scheduler CPU
        """
        return pulumi.get(self, "scheduler_cpu")

    @property
    @pulumi.getter(name="schedulerMemory")
    def scheduler_memory(self) -> str:
        """
        Deployment scheduler memory
        """
        return pulumi.get(self, "scheduler_memory")

    @property
    @pulumi.getter(name="schedulerReplicas")
    def scheduler_replicas(self) -> int:
        """
        Deployment scheduler replicas
        """
        return pulumi.get(self, "scheduler_replicas")

    @property
    @pulumi.getter(name="schedulerSize")
    def scheduler_size(self) -> str:
        """
        Deployment scheduler size
        """
        return pulumi.get(self, "scheduler_size")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        Deployment status
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="statusReason")
    def status_reason(self) -> str:
        """
        Deployment status reason
        """
        return pulumi.get(self, "status_reason")

    @property
    @pulumi.getter(name="taskPodNodePoolId")
    def task_pod_node_pool_id(self) -> str:
        """
        Deployment task pod node pool identifier
        """
        return pulumi.get(self, "task_pod_node_pool_id")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Deployment type
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> str:
        """
        Deployment last updated timestamp
        """
        return pulumi.get(self, "updated_at")

    @property
    @pulumi.getter(name="updatedBy")
    def updated_by(self) -> 'outputs.GetDeploymentUpdatedByResult':
        """
        Deployment updater
        """
        return pulumi.get(self, "updated_by")

    @property
    @pulumi.getter(name="webserverAirflowApiUrl")
    def webserver_airflow_api_url(self) -> str:
        """
        Deployment webserver Airflow API URL
        """
        return pulumi.get(self, "webserver_airflow_api_url")

    @property
    @pulumi.getter(name="webserverIngressHostname")
    def webserver_ingress_hostname(self) -> str:
        """
        Deployment webserver ingress hostname
        """
        return pulumi.get(self, "webserver_ingress_hostname")

    @property
    @pulumi.getter(name="webserverUrl")
    def webserver_url(self) -> str:
        """
        Deployment webserver URL
        """
        return pulumi.get(self, "webserver_url")

    @property
    @pulumi.getter(name="workerQueues")
    def worker_queues(self) -> Sequence['outputs.GetDeploymentWorkerQueueResult']:
        """
        Deployment worker queues
        """
        return pulumi.get(self, "worker_queues")

    @property
    @pulumi.getter(name="workloadIdentity")
    def workload_identity(self) -> str:
        """
        Deployment workload identity
        """
        return pulumi.get(self, "workload_identity")

    @property
    @pulumi.getter(name="workspaceId")
    def workspace_id(self) -> str:
        """
        Deployment workspace identifier
        """
        return pulumi.get(self, "workspace_id")


class AwaitableGetDeploymentResult(GetDeploymentResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetDeploymentResult(
            airflow_version=self.airflow_version,
            astro_runtime_version=self.astro_runtime_version,
            cloud_provider=self.cloud_provider,
            cluster_id=self.cluster_id,
            contact_emails=self.contact_emails,
            created_at=self.created_at,
            created_by=self.created_by,
            dag_tarball_version=self.dag_tarball_version,
            default_task_pod_cpu=self.default_task_pod_cpu,
            default_task_pod_memory=self.default_task_pod_memory,
            description=self.description,
            desired_dag_tarball_version=self.desired_dag_tarball_version,
            environment_variables=self.environment_variables,
            executor=self.executor,
            external_ips=self.external_ips,
            id=self.id,
            image_repository=self.image_repository,
            image_tag=self.image_tag,
            image_version=self.image_version,
            is_cicd_enforced=self.is_cicd_enforced,
            is_dag_deploy_enabled=self.is_dag_deploy_enabled,
            is_development_mode=self.is_development_mode,
            is_high_availability=self.is_high_availability,
            name=self.name,
            namespace=self.namespace,
            oidc_issuer_url=self.oidc_issuer_url,
            region=self.region,
            resource_quota_cpu=self.resource_quota_cpu,
            resource_quota_memory=self.resource_quota_memory,
            scaling_spec=self.scaling_spec,
            scaling_status=self.scaling_status,
            scheduler_au=self.scheduler_au,
            scheduler_cpu=self.scheduler_cpu,
            scheduler_memory=self.scheduler_memory,
            scheduler_replicas=self.scheduler_replicas,
            scheduler_size=self.scheduler_size,
            status=self.status,
            status_reason=self.status_reason,
            task_pod_node_pool_id=self.task_pod_node_pool_id,
            type=self.type,
            updated_at=self.updated_at,
            updated_by=self.updated_by,
            webserver_airflow_api_url=self.webserver_airflow_api_url,
            webserver_ingress_hostname=self.webserver_ingress_hostname,
            webserver_url=self.webserver_url,
            worker_queues=self.worker_queues,
            workload_identity=self.workload_identity,
            workspace_id=self.workspace_id)


def get_deployment(id: Optional[str] = None,
                   opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetDeploymentResult:
    """
    Deployment data source

    ## Example Usage

    ```python
    import pulumi
    import pulumi_astronomer as astronomer

    example_deployment = astronomer.get_deployment(id="clozc036j01to01jrlgvueo8t")
    pulumi.export("deployment", example_deployment)
    ```


    :param str id: Deployment identifier
    """
    __args__ = dict()
    __args__['id'] = id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('astronomer:index/getDeployment:getDeployment', __args__, opts=opts, typ=GetDeploymentResult).value

    return AwaitableGetDeploymentResult(
        airflow_version=pulumi.get(__ret__, 'airflow_version'),
        astro_runtime_version=pulumi.get(__ret__, 'astro_runtime_version'),
        cloud_provider=pulumi.get(__ret__, 'cloud_provider'),
        cluster_id=pulumi.get(__ret__, 'cluster_id'),
        contact_emails=pulumi.get(__ret__, 'contact_emails'),
        created_at=pulumi.get(__ret__, 'created_at'),
        created_by=pulumi.get(__ret__, 'created_by'),
        dag_tarball_version=pulumi.get(__ret__, 'dag_tarball_version'),
        default_task_pod_cpu=pulumi.get(__ret__, 'default_task_pod_cpu'),
        default_task_pod_memory=pulumi.get(__ret__, 'default_task_pod_memory'),
        description=pulumi.get(__ret__, 'description'),
        desired_dag_tarball_version=pulumi.get(__ret__, 'desired_dag_tarball_version'),
        environment_variables=pulumi.get(__ret__, 'environment_variables'),
        executor=pulumi.get(__ret__, 'executor'),
        external_ips=pulumi.get(__ret__, 'external_ips'),
        id=pulumi.get(__ret__, 'id'),
        image_repository=pulumi.get(__ret__, 'image_repository'),
        image_tag=pulumi.get(__ret__, 'image_tag'),
        image_version=pulumi.get(__ret__, 'image_version'),
        is_cicd_enforced=pulumi.get(__ret__, 'is_cicd_enforced'),
        is_dag_deploy_enabled=pulumi.get(__ret__, 'is_dag_deploy_enabled'),
        is_development_mode=pulumi.get(__ret__, 'is_development_mode'),
        is_high_availability=pulumi.get(__ret__, 'is_high_availability'),
        name=pulumi.get(__ret__, 'name'),
        namespace=pulumi.get(__ret__, 'namespace'),
        oidc_issuer_url=pulumi.get(__ret__, 'oidc_issuer_url'),
        region=pulumi.get(__ret__, 'region'),
        resource_quota_cpu=pulumi.get(__ret__, 'resource_quota_cpu'),
        resource_quota_memory=pulumi.get(__ret__, 'resource_quota_memory'),
        scaling_spec=pulumi.get(__ret__, 'scaling_spec'),
        scaling_status=pulumi.get(__ret__, 'scaling_status'),
        scheduler_au=pulumi.get(__ret__, 'scheduler_au'),
        scheduler_cpu=pulumi.get(__ret__, 'scheduler_cpu'),
        scheduler_memory=pulumi.get(__ret__, 'scheduler_memory'),
        scheduler_replicas=pulumi.get(__ret__, 'scheduler_replicas'),
        scheduler_size=pulumi.get(__ret__, 'scheduler_size'),
        status=pulumi.get(__ret__, 'status'),
        status_reason=pulumi.get(__ret__, 'status_reason'),
        task_pod_node_pool_id=pulumi.get(__ret__, 'task_pod_node_pool_id'),
        type=pulumi.get(__ret__, 'type'),
        updated_at=pulumi.get(__ret__, 'updated_at'),
        updated_by=pulumi.get(__ret__, 'updated_by'),
        webserver_airflow_api_url=pulumi.get(__ret__, 'webserver_airflow_api_url'),
        webserver_ingress_hostname=pulumi.get(__ret__, 'webserver_ingress_hostname'),
        webserver_url=pulumi.get(__ret__, 'webserver_url'),
        worker_queues=pulumi.get(__ret__, 'worker_queues'),
        workload_identity=pulumi.get(__ret__, 'workload_identity'),
        workspace_id=pulumi.get(__ret__, 'workspace_id'))


@_utilities.lift_output_func(get_deployment)
def get_deployment_output(id: Optional[pulumi.Input[str]] = None,
                          opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetDeploymentResult]:
    """
    Deployment data source

    ## Example Usage

    ```python
    import pulumi
    import pulumi_astronomer as astronomer

    example_deployment = astronomer.get_deployment(id="clozc036j01to01jrlgvueo8t")
    pulumi.export("deployment", example_deployment)
    ```


    :param str id: Deployment identifier
    """
    ...
