# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs

__all__ = [
    'GetDeploymentsResult',
    'AwaitableGetDeploymentsResult',
    'get_deployments',
    'get_deployments_output',
]

@pulumi.output_type
class GetDeploymentsResult:
    """
    A collection of values returned by getDeployments.
    """
    def __init__(__self__, deployment_ids=None, deployments=None, id=None, names=None, workspace_ids=None):
        if deployment_ids and not isinstance(deployment_ids, list):
            raise TypeError("Expected argument 'deployment_ids' to be a list")
        pulumi.set(__self__, "deployment_ids", deployment_ids)
        if deployments and not isinstance(deployments, list):
            raise TypeError("Expected argument 'deployments' to be a list")
        pulumi.set(__self__, "deployments", deployments)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if names and not isinstance(names, list):
            raise TypeError("Expected argument 'names' to be a list")
        pulumi.set(__self__, "names", names)
        if workspace_ids and not isinstance(workspace_ids, list):
            raise TypeError("Expected argument 'workspace_ids' to be a list")
        pulumi.set(__self__, "workspace_ids", workspace_ids)

    @property
    @pulumi.getter(name="deploymentIds")
    def deployment_ids(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "deployment_ids")

    @property
    @pulumi.getter
    def deployments(self) -> Sequence['outputs.GetDeploymentsDeploymentResult']:
        return pulumi.get(self, "deployments")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def names(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "names")

    @property
    @pulumi.getter(name="workspaceIds")
    def workspace_ids(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "workspace_ids")


class AwaitableGetDeploymentsResult(GetDeploymentsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetDeploymentsResult(
            deployment_ids=self.deployment_ids,
            deployments=self.deployments,
            id=self.id,
            names=self.names,
            workspace_ids=self.workspace_ids)


def get_deployments(deployment_ids: Optional[Sequence[str]] = None,
                    names: Optional[Sequence[str]] = None,
                    workspace_ids: Optional[Sequence[str]] = None,
                    opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetDeploymentsResult:
    """
    Deployments data source

    ## Example Usage

    ```python
    import pulumi
    import pulumi_astronomer as astronomer

    example_deployments = astronomer.get_deployments()
    example_deployments_filter_by_names = astronomer.get_deployments(names=["my deployment"])
    example_deployments_filter_by_deployment_ids = astronomer.get_deployments(deployment_ids=["clozc036j01to01jrlgvueo8t"])
    example_deployments_filter_by_workspace_ids = astronomer.get_deployments(workspace_ids=["clozc036j01to01jrlgvu798d"])
    pulumi.export("deployments", example_deployments)
    ```
    """
    __args__ = dict()
    __args__['deploymentIds'] = deployment_ids
    __args__['names'] = names
    __args__['workspaceIds'] = workspace_ids
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('astronomer:index/getDeployments:getDeployments', __args__, opts=opts, typ=GetDeploymentsResult).value

    return AwaitableGetDeploymentsResult(
        deployment_ids=pulumi.get(__ret__, 'deployment_ids'),
        deployments=pulumi.get(__ret__, 'deployments'),
        id=pulumi.get(__ret__, 'id'),
        names=pulumi.get(__ret__, 'names'),
        workspace_ids=pulumi.get(__ret__, 'workspace_ids'))


@_utilities.lift_output_func(get_deployments)
def get_deployments_output(deployment_ids: Optional[pulumi.Input[Optional[Sequence[str]]]] = None,
                           names: Optional[pulumi.Input[Optional[Sequence[str]]]] = None,
                           workspace_ids: Optional[pulumi.Input[Optional[Sequence[str]]]] = None,
                           opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetDeploymentsResult]:
    """
    Deployments data source

    ## Example Usage

    ```python
    import pulumi
    import pulumi_astronomer as astronomer

    example_deployments = astronomer.get_deployments()
    example_deployments_filter_by_names = astronomer.get_deployments(names=["my deployment"])
    example_deployments_filter_by_deployment_ids = astronomer.get_deployments(deployment_ids=["clozc036j01to01jrlgvueo8t"])
    example_deployments_filter_by_workspace_ids = astronomer.get_deployments(workspace_ids=["clozc036j01to01jrlgvu798d"])
    pulumi.export("deployments", example_deployments)
    ```
    """
    ...
