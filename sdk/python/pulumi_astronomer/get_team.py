# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs

__all__ = [
    'GetTeamResult',
    'AwaitableGetTeamResult',
    'get_team',
    'get_team_output',
]

@pulumi.output_type
class GetTeamResult:
    """
    A collection of values returned by getTeam.
    """
    def __init__(__self__, created_at=None, created_by=None, deployment_roles=None, description=None, id=None, is_idp_managed=None, name=None, organization_role=None, roles_count=None, updated_at=None, updated_by=None, workspace_roles=None):
        if created_at and not isinstance(created_at, str):
            raise TypeError("Expected argument 'created_at' to be a str")
        pulumi.set(__self__, "created_at", created_at)
        if created_by and not isinstance(created_by, dict):
            raise TypeError("Expected argument 'created_by' to be a dict")
        pulumi.set(__self__, "created_by", created_by)
        if deployment_roles and not isinstance(deployment_roles, list):
            raise TypeError("Expected argument 'deployment_roles' to be a list")
        pulumi.set(__self__, "deployment_roles", deployment_roles)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if is_idp_managed and not isinstance(is_idp_managed, bool):
            raise TypeError("Expected argument 'is_idp_managed' to be a bool")
        pulumi.set(__self__, "is_idp_managed", is_idp_managed)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if organization_role and not isinstance(organization_role, str):
            raise TypeError("Expected argument 'organization_role' to be a str")
        pulumi.set(__self__, "organization_role", organization_role)
        if roles_count and not isinstance(roles_count, int):
            raise TypeError("Expected argument 'roles_count' to be a int")
        pulumi.set(__self__, "roles_count", roles_count)
        if updated_at and not isinstance(updated_at, str):
            raise TypeError("Expected argument 'updated_at' to be a str")
        pulumi.set(__self__, "updated_at", updated_at)
        if updated_by and not isinstance(updated_by, dict):
            raise TypeError("Expected argument 'updated_by' to be a dict")
        pulumi.set(__self__, "updated_by", updated_by)
        if workspace_roles and not isinstance(workspace_roles, list):
            raise TypeError("Expected argument 'workspace_roles' to be a list")
        pulumi.set(__self__, "workspace_roles", workspace_roles)

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> str:
        """
        Team creation timestamp
        """
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> 'outputs.GetTeamCreatedByResult':
        """
        Team creator
        """
        return pulumi.get(self, "created_by")

    @property
    @pulumi.getter(name="deploymentRoles")
    def deployment_roles(self) -> Sequence['outputs.GetTeamDeploymentRoleResult']:
        """
        The roles assigned to the Deployments
        """
        return pulumi.get(self, "deployment_roles")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        Team description
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Team ID
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isIdpManaged")
    def is_idp_managed(self) -> bool:
        """
        Whether the Team is managed by an identity provider
        """
        return pulumi.get(self, "is_idp_managed")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Team name
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="organizationRole")
    def organization_role(self) -> str:
        """
        The role assigned to the Organization
        """
        return pulumi.get(self, "organization_role")

    @property
    @pulumi.getter(name="rolesCount")
    def roles_count(self) -> int:
        """
        Number of roles assigned to the Team
        """
        return pulumi.get(self, "roles_count")

    @property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> str:
        """
        Team last updated timestamp
        """
        return pulumi.get(self, "updated_at")

    @property
    @pulumi.getter(name="updatedBy")
    def updated_by(self) -> 'outputs.GetTeamUpdatedByResult':
        """
        Team updater
        """
        return pulumi.get(self, "updated_by")

    @property
    @pulumi.getter(name="workspaceRoles")
    def workspace_roles(self) -> Sequence['outputs.GetTeamWorkspaceRoleResult']:
        """
        The roles assigned to the Workspaces
        """
        return pulumi.get(self, "workspace_roles")


class AwaitableGetTeamResult(GetTeamResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetTeamResult(
            created_at=self.created_at,
            created_by=self.created_by,
            deployment_roles=self.deployment_roles,
            description=self.description,
            id=self.id,
            is_idp_managed=self.is_idp_managed,
            name=self.name,
            organization_role=self.organization_role,
            roles_count=self.roles_count,
            updated_at=self.updated_at,
            updated_by=self.updated_by,
            workspace_roles=self.workspace_roles)


def get_team(id: Optional[str] = None,
             opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetTeamResult:
    """
    Team data source

    ## Example Usage

    ```python
    import pulumi
    import pulumi_astronomer as astronomer

    example_team = astronomer.get_team(id="clwbclrc100bl01ozjj5s4jmq")
    pulumi.export("team", example_team)
    ```


    :param str id: Team ID
    """
    __args__ = dict()
    __args__['id'] = id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('astronomer:index/getTeam:getTeam', __args__, opts=opts, typ=GetTeamResult).value

    return AwaitableGetTeamResult(
        created_at=pulumi.get(__ret__, 'created_at'),
        created_by=pulumi.get(__ret__, 'created_by'),
        deployment_roles=pulumi.get(__ret__, 'deployment_roles'),
        description=pulumi.get(__ret__, 'description'),
        id=pulumi.get(__ret__, 'id'),
        is_idp_managed=pulumi.get(__ret__, 'is_idp_managed'),
        name=pulumi.get(__ret__, 'name'),
        organization_role=pulumi.get(__ret__, 'organization_role'),
        roles_count=pulumi.get(__ret__, 'roles_count'),
        updated_at=pulumi.get(__ret__, 'updated_at'),
        updated_by=pulumi.get(__ret__, 'updated_by'),
        workspace_roles=pulumi.get(__ret__, 'workspace_roles'))


@_utilities.lift_output_func(get_team)
def get_team_output(id: Optional[pulumi.Input[str]] = None,
                    opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetTeamResult]:
    """
    Team data source

    ## Example Usage

    ```python
    import pulumi
    import pulumi_astronomer as astronomer

    example_team = astronomer.get_team(id="clwbclrc100bl01ozjj5s4jmq")
    pulumi.export("team", example_team)
    ```


    :param str id: Team ID
    """
    ...
