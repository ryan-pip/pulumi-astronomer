# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs

__all__ = [
    'GetUserResult',
    'AwaitableGetUserResult',
    'get_user',
    'get_user_output',
]

@pulumi.output_type
class GetUserResult:
    """
    A collection of values returned by getUser.
    """
    def __init__(__self__, avatar_url=None, created_at=None, deployment_roles=None, full_name=None, id=None, organization_role=None, status=None, updated_at=None, username=None, workspace_roles=None):
        if avatar_url and not isinstance(avatar_url, str):
            raise TypeError("Expected argument 'avatar_url' to be a str")
        pulumi.set(__self__, "avatar_url", avatar_url)
        if created_at and not isinstance(created_at, str):
            raise TypeError("Expected argument 'created_at' to be a str")
        pulumi.set(__self__, "created_at", created_at)
        if deployment_roles and not isinstance(deployment_roles, list):
            raise TypeError("Expected argument 'deployment_roles' to be a list")
        pulumi.set(__self__, "deployment_roles", deployment_roles)
        if full_name and not isinstance(full_name, str):
            raise TypeError("Expected argument 'full_name' to be a str")
        pulumi.set(__self__, "full_name", full_name)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if organization_role and not isinstance(organization_role, str):
            raise TypeError("Expected argument 'organization_role' to be a str")
        pulumi.set(__self__, "organization_role", organization_role)
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        pulumi.set(__self__, "status", status)
        if updated_at and not isinstance(updated_at, str):
            raise TypeError("Expected argument 'updated_at' to be a str")
        pulumi.set(__self__, "updated_at", updated_at)
        if username and not isinstance(username, str):
            raise TypeError("Expected argument 'username' to be a str")
        pulumi.set(__self__, "username", username)
        if workspace_roles and not isinstance(workspace_roles, list):
            raise TypeError("Expected argument 'workspace_roles' to be a list")
        pulumi.set(__self__, "workspace_roles", workspace_roles)

    @property
    @pulumi.getter(name="avatarUrl")
    def avatar_url(self) -> str:
        """
        User avatar URL
        """
        return pulumi.get(self, "avatar_url")

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> str:
        """
        User creation timestamp
        """
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter(name="deploymentRoles")
    def deployment_roles(self) -> Sequence['outputs.GetUserDeploymentRoleResult']:
        """
        The roles assigned to the deployments
        """
        return pulumi.get(self, "deployment_roles")

    @property
    @pulumi.getter(name="fullName")
    def full_name(self) -> str:
        """
        User full name
        """
        return pulumi.get(self, "full_name")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        User identifier
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="organizationRole")
    def organization_role(self) -> str:
        """
        The role assigned to the organization
        """
        return pulumi.get(self, "organization_role")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        User status
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> str:
        """
        User last updated timestamp
        """
        return pulumi.get(self, "updated_at")

    @property
    @pulumi.getter
    def username(self) -> str:
        """
        User username
        """
        return pulumi.get(self, "username")

    @property
    @pulumi.getter(name="workspaceRoles")
    def workspace_roles(self) -> Sequence['outputs.GetUserWorkspaceRoleResult']:
        """
        The roles assigned to the workspaces
        """
        return pulumi.get(self, "workspace_roles")


class AwaitableGetUserResult(GetUserResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetUserResult(
            avatar_url=self.avatar_url,
            created_at=self.created_at,
            deployment_roles=self.deployment_roles,
            full_name=self.full_name,
            id=self.id,
            organization_role=self.organization_role,
            status=self.status,
            updated_at=self.updated_at,
            username=self.username,
            workspace_roles=self.workspace_roles)


def get_user(id: Optional[str] = None,
             opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetUserResult:
    """
    User data source

    ## Example Usage

    ```python
    import pulumi
    import pulumi_astronomer as astronomer

    example_user = astronomer.get_user(id="clhpichn8002m01mqa4ocs7g6")
    pulumi.export("user", example_user)
    ```


    :param str id: User identifier
    """
    __args__ = dict()
    __args__['id'] = id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('astronomer:index/getUser:getUser', __args__, opts=opts, typ=GetUserResult).value

    return AwaitableGetUserResult(
        avatar_url=pulumi.get(__ret__, 'avatar_url'),
        created_at=pulumi.get(__ret__, 'created_at'),
        deployment_roles=pulumi.get(__ret__, 'deployment_roles'),
        full_name=pulumi.get(__ret__, 'full_name'),
        id=pulumi.get(__ret__, 'id'),
        organization_role=pulumi.get(__ret__, 'organization_role'),
        status=pulumi.get(__ret__, 'status'),
        updated_at=pulumi.get(__ret__, 'updated_at'),
        username=pulumi.get(__ret__, 'username'),
        workspace_roles=pulumi.get(__ret__, 'workspace_roles'))


@_utilities.lift_output_func(get_user)
def get_user_output(id: Optional[pulumi.Input[str]] = None,
                    opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetUserResult]:
    """
    User data source

    ## Example Usage

    ```python
    import pulumi
    import pulumi_astronomer as astronomer

    example_user = astronomer.get_user(id="clhpichn8002m01mqa4ocs7g6")
    pulumi.export("user", example_user)
    ```


    :param str id: User identifier
    """
    ...
