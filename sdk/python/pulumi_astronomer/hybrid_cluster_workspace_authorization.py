# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['HybridClusterWorkspaceAuthorizationArgs', 'HybridClusterWorkspaceAuthorization']

@pulumi.input_type
class HybridClusterWorkspaceAuthorizationArgs:
    def __init__(__self__, *,
                 cluster_id: pulumi.Input[str],
                 workspace_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        The set of arguments for constructing a HybridClusterWorkspaceAuthorization resource.
        :param pulumi.Input[str] cluster_id: The ID of the hybrid cluster to set authorizations for
        :param pulumi.Input[Sequence[pulumi.Input[str]]] workspace_ids: The IDs of the workspaces to authorize for the hybrid cluster
        """
        pulumi.set(__self__, "cluster_id", cluster_id)
        if workspace_ids is not None:
            pulumi.set(__self__, "workspace_ids", workspace_ids)

    @property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> pulumi.Input[str]:
        """
        The ID of the hybrid cluster to set authorizations for
        """
        return pulumi.get(self, "cluster_id")

    @cluster_id.setter
    def cluster_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "cluster_id", value)

    @property
    @pulumi.getter(name="workspaceIds")
    def workspace_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The IDs of the workspaces to authorize for the hybrid cluster
        """
        return pulumi.get(self, "workspace_ids")

    @workspace_ids.setter
    def workspace_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "workspace_ids", value)


@pulumi.input_type
class _HybridClusterWorkspaceAuthorizationState:
    def __init__(__self__, *,
                 cluster_id: Optional[pulumi.Input[str]] = None,
                 workspace_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        Input properties used for looking up and filtering HybridClusterWorkspaceAuthorization resources.
        :param pulumi.Input[str] cluster_id: The ID of the hybrid cluster to set authorizations for
        :param pulumi.Input[Sequence[pulumi.Input[str]]] workspace_ids: The IDs of the workspaces to authorize for the hybrid cluster
        """
        if cluster_id is not None:
            pulumi.set(__self__, "cluster_id", cluster_id)
        if workspace_ids is not None:
            pulumi.set(__self__, "workspace_ids", workspace_ids)

    @property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of the hybrid cluster to set authorizations for
        """
        return pulumi.get(self, "cluster_id")

    @cluster_id.setter
    def cluster_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cluster_id", value)

    @property
    @pulumi.getter(name="workspaceIds")
    def workspace_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The IDs of the workspaces to authorize for the hybrid cluster
        """
        return pulumi.get(self, "workspace_ids")

    @workspace_ids.setter
    def workspace_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "workspace_ids", value)


class HybridClusterWorkspaceAuthorization(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cluster_id: Optional[pulumi.Input[str]] = None,
                 workspace_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 __props__=None):
        """
        Hybrid cluster workspace authorization resource

        ## Example Usage

        ```python
        import pulumi
        import pulumi_astronomer as astronomer

        example = astronomer.HybridClusterWorkspaceAuthorization("example",
            cluster_id="clk8h0fv1006801j8yysfybbt",
            workspace_ids=[
                "cl70oe7cu445571iynrkthtybl",
                "cl70oe7cu445571iynrkthacsd",
            ])
        imported_cluster_workspace_authorization = astronomer.HybridClusterWorkspaceAuthorization("importedClusterWorkspaceAuthorization",
            cluster_id="clk8h0fv1006801j8yysfybbt",
            workspace_ids=["cl70oe7cu445571iynrkthtybl"])
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] cluster_id: The ID of the hybrid cluster to set authorizations for
        :param pulumi.Input[Sequence[pulumi.Input[str]]] workspace_ids: The IDs of the workspaces to authorize for the hybrid cluster
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: HybridClusterWorkspaceAuthorizationArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Hybrid cluster workspace authorization resource

        ## Example Usage

        ```python
        import pulumi
        import pulumi_astronomer as astronomer

        example = astronomer.HybridClusterWorkspaceAuthorization("example",
            cluster_id="clk8h0fv1006801j8yysfybbt",
            workspace_ids=[
                "cl70oe7cu445571iynrkthtybl",
                "cl70oe7cu445571iynrkthacsd",
            ])
        imported_cluster_workspace_authorization = astronomer.HybridClusterWorkspaceAuthorization("importedClusterWorkspaceAuthorization",
            cluster_id="clk8h0fv1006801j8yysfybbt",
            workspace_ids=["cl70oe7cu445571iynrkthtybl"])
        ```

        :param str resource_name: The name of the resource.
        :param HybridClusterWorkspaceAuthorizationArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(HybridClusterWorkspaceAuthorizationArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cluster_id: Optional[pulumi.Input[str]] = None,
                 workspace_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = HybridClusterWorkspaceAuthorizationArgs.__new__(HybridClusterWorkspaceAuthorizationArgs)

            if cluster_id is None and not opts.urn:
                raise TypeError("Missing required property 'cluster_id'")
            __props__.__dict__["cluster_id"] = cluster_id
            __props__.__dict__["workspace_ids"] = workspace_ids
        super(HybridClusterWorkspaceAuthorization, __self__).__init__(
            'astronomer:index/hybridClusterWorkspaceAuthorization:HybridClusterWorkspaceAuthorization',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            cluster_id: Optional[pulumi.Input[str]] = None,
            workspace_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None) -> 'HybridClusterWorkspaceAuthorization':
        """
        Get an existing HybridClusterWorkspaceAuthorization resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] cluster_id: The ID of the hybrid cluster to set authorizations for
        :param pulumi.Input[Sequence[pulumi.Input[str]]] workspace_ids: The IDs of the workspaces to authorize for the hybrid cluster
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _HybridClusterWorkspaceAuthorizationState.__new__(_HybridClusterWorkspaceAuthorizationState)

        __props__.__dict__["cluster_id"] = cluster_id
        __props__.__dict__["workspace_ids"] = workspace_ids
        return HybridClusterWorkspaceAuthorization(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> pulumi.Output[str]:
        """
        The ID of the hybrid cluster to set authorizations for
        """
        return pulumi.get(self, "cluster_id")

    @property
    @pulumi.getter(name="workspaceIds")
    def workspace_ids(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        The IDs of the workspaces to authorize for the hybrid cluster
        """
        return pulumi.get(self, "workspace_ids")

