# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs

__all__ = [
    'ApiTokenCreatedBy',
    'ApiTokenRole',
    'ApiTokenUpdatedBy',
    'ClusterHealthStatus',
    'ClusterHealthStatusDetail',
    'ClusterMetadata',
    'ClusterNodePool',
    'ClusterTimeouts',
    'DeploymentCreatedBy',
    'DeploymentEnvironmentVariable',
    'DeploymentScalingSpec',
    'DeploymentScalingSpecHibernationSpec',
    'DeploymentScalingSpecHibernationSpecOverride',
    'DeploymentScalingSpecHibernationSpecSchedule',
    'DeploymentScalingStatus',
    'DeploymentScalingStatusHibernationStatus',
    'DeploymentUpdatedBy',
    'DeploymentWorkerQueue',
    'TeamCreatedBy',
    'TeamDeploymentRole',
    'TeamRolesDeploymentRole',
    'TeamRolesWorkspaceRole',
    'TeamUpdatedBy',
    'TeamWorkspaceRole',
    'UserInviteInvitee',
    'UserInviteInviter',
    'UserRolesDeploymentRole',
    'UserRolesWorkspaceRole',
    'WorkspaceCreatedBy',
    'WorkspaceUpdatedBy',
    'GetApiTokenCreatedByResult',
    'GetApiTokenRoleResult',
    'GetApiTokenUpdatedByResult',
    'GetApiTokensApiTokenResult',
    'GetApiTokensApiTokenCreatedByResult',
    'GetApiTokensApiTokenRoleResult',
    'GetApiTokensApiTokenUpdatedByResult',
    'GetClusterHealthStatusResult',
    'GetClusterHealthStatusDetailResult',
    'GetClusterMetadataResult',
    'GetClusterNodePoolResult',
    'GetClusterOptionsClusterOptionResult',
    'GetClusterOptionsClusterOptionDatabaseInstanceResult',
    'GetClusterOptionsClusterOptionDefaultDatabaseInstanceResult',
    'GetClusterOptionsClusterOptionDefaultNodeInstanceResult',
    'GetClusterOptionsClusterOptionDefaultRegionResult',
    'GetClusterOptionsClusterOptionNodeInstanceResult',
    'GetClusterOptionsClusterOptionRegionResult',
    'GetClusterTagResult',
    'GetClustersClusterResult',
    'GetClustersClusterHealthStatusResult',
    'GetClustersClusterHealthStatusDetailResult',
    'GetClustersClusterMetadataResult',
    'GetClustersClusterNodePoolResult',
    'GetClustersClusterTagResult',
    'GetDeploymentCreatedByResult',
    'GetDeploymentEnvironmentVariableResult',
    'GetDeploymentOptionsResourceQuotasResult',
    'GetDeploymentOptionsResourceQuotasDefaultPodSizeResult',
    'GetDeploymentOptionsResourceQuotasDefaultPodSizeCpuResult',
    'GetDeploymentOptionsResourceQuotasDefaultPodSizeMemoryResult',
    'GetDeploymentOptionsResourceQuotasResourceQuotaResult',
    'GetDeploymentOptionsResourceQuotasResourceQuotaCpuResult',
    'GetDeploymentOptionsResourceQuotasResourceQuotaMemoryResult',
    'GetDeploymentOptionsRuntimeReleaseResult',
    'GetDeploymentOptionsSchedulerMachineResult',
    'GetDeploymentOptionsSchedulerMachineSpecResult',
    'GetDeploymentOptionsWorkerMachineResult',
    'GetDeploymentOptionsWorkerMachineConcurrencyResult',
    'GetDeploymentOptionsWorkerMachineSpecResult',
    'GetDeploymentOptionsWorkerQueuesResult',
    'GetDeploymentOptionsWorkerQueuesMaxWorkersResult',
    'GetDeploymentOptionsWorkerQueuesMinWorkersResult',
    'GetDeploymentOptionsWorkerQueuesWorkerConcurrencyResult',
    'GetDeploymentOptionsWorkloadIdentityOptionResult',
    'GetDeploymentScalingSpecResult',
    'GetDeploymentScalingSpecHibernationSpecResult',
    'GetDeploymentScalingSpecHibernationSpecOverrideResult',
    'GetDeploymentScalingSpecHibernationSpecScheduleResult',
    'GetDeploymentScalingStatusResult',
    'GetDeploymentScalingStatusHibernationStatusResult',
    'GetDeploymentUpdatedByResult',
    'GetDeploymentWorkerQueueResult',
    'GetDeploymentsDeploymentResult',
    'GetDeploymentsDeploymentCreatedByResult',
    'GetDeploymentsDeploymentEnvironmentVariableResult',
    'GetDeploymentsDeploymentScalingSpecResult',
    'GetDeploymentsDeploymentScalingSpecHibernationSpecResult',
    'GetDeploymentsDeploymentScalingSpecHibernationSpecOverrideResult',
    'GetDeploymentsDeploymentScalingSpecHibernationSpecScheduleResult',
    'GetDeploymentsDeploymentScalingStatusResult',
    'GetDeploymentsDeploymentScalingStatusHibernationStatusResult',
    'GetDeploymentsDeploymentUpdatedByResult',
    'GetDeploymentsDeploymentWorkerQueueResult',
    'GetOrganizationCreatedByResult',
    'GetOrganizationUpdatedByResult',
    'GetTeamCreatedByResult',
    'GetTeamDeploymentRoleResult',
    'GetTeamUpdatedByResult',
    'GetTeamWorkspaceRoleResult',
    'GetTeamsTeamResult',
    'GetTeamsTeamCreatedByResult',
    'GetTeamsTeamDeploymentRoleResult',
    'GetTeamsTeamUpdatedByResult',
    'GetTeamsTeamWorkspaceRoleResult',
    'GetUserDeploymentRoleResult',
    'GetUserWorkspaceRoleResult',
    'GetUsersUserResult',
    'GetUsersUserDeploymentRoleResult',
    'GetUsersUserWorkspaceRoleResult',
    'GetWorkspaceCreatedByResult',
    'GetWorkspaceUpdatedByResult',
    'GetWorkspacesWorkspaceResult',
    'GetWorkspacesWorkspaceCreatedByResult',
    'GetWorkspacesWorkspaceUpdatedByResult',
]

@pulumi.output_type
class ApiTokenCreatedBy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "apiTokenName":
            suggest = "api_token_name"
        elif key == "avatarUrl":
            suggest = "avatar_url"
        elif key == "fullName":
            suggest = "full_name"
        elif key == "subjectType":
            suggest = "subject_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApiTokenCreatedBy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApiTokenCreatedBy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApiTokenCreatedBy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 api_token_name: Optional[str] = None,
                 avatar_url: Optional[str] = None,
                 full_name: Optional[str] = None,
                 id: Optional[str] = None,
                 subject_type: Optional[str] = None,
                 username: Optional[str] = None):
        if api_token_name is not None:
            pulumi.set(__self__, "api_token_name", api_token_name)
        if avatar_url is not None:
            pulumi.set(__self__, "avatar_url", avatar_url)
        if full_name is not None:
            pulumi.set(__self__, "full_name", full_name)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if subject_type is not None:
            pulumi.set(__self__, "subject_type", subject_type)
        if username is not None:
            pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter(name="apiTokenName")
    def api_token_name(self) -> Optional[str]:
        return pulumi.get(self, "api_token_name")

    @property
    @pulumi.getter(name="avatarUrl")
    def avatar_url(self) -> Optional[str]:
        return pulumi.get(self, "avatar_url")

    @property
    @pulumi.getter(name="fullName")
    def full_name(self) -> Optional[str]:
        return pulumi.get(self, "full_name")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="subjectType")
    def subject_type(self) -> Optional[str]:
        return pulumi.get(self, "subject_type")

    @property
    @pulumi.getter
    def username(self) -> Optional[str]:
        return pulumi.get(self, "username")


@pulumi.output_type
class ApiTokenRole(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "entityId":
            suggest = "entity_id"
        elif key == "entityType":
            suggest = "entity_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApiTokenRole. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApiTokenRole.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApiTokenRole.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 entity_id: str,
                 entity_type: str,
                 role: str):
        """
        :param str entity_id: The ID of the entity to assign the role to
        :param str entity_type: The type of entity to assign the role to
        :param str role: The role to assign to the entity
        """
        pulumi.set(__self__, "entity_id", entity_id)
        pulumi.set(__self__, "entity_type", entity_type)
        pulumi.set(__self__, "role", role)

    @property
    @pulumi.getter(name="entityId")
    def entity_id(self) -> str:
        """
        The ID of the entity to assign the role to
        """
        return pulumi.get(self, "entity_id")

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> str:
        """
        The type of entity to assign the role to
        """
        return pulumi.get(self, "entity_type")

    @property
    @pulumi.getter
    def role(self) -> str:
        """
        The role to assign to the entity
        """
        return pulumi.get(self, "role")


@pulumi.output_type
class ApiTokenUpdatedBy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "apiTokenName":
            suggest = "api_token_name"
        elif key == "avatarUrl":
            suggest = "avatar_url"
        elif key == "fullName":
            suggest = "full_name"
        elif key == "subjectType":
            suggest = "subject_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApiTokenUpdatedBy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApiTokenUpdatedBy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApiTokenUpdatedBy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 api_token_name: Optional[str] = None,
                 avatar_url: Optional[str] = None,
                 full_name: Optional[str] = None,
                 id: Optional[str] = None,
                 subject_type: Optional[str] = None,
                 username: Optional[str] = None):
        if api_token_name is not None:
            pulumi.set(__self__, "api_token_name", api_token_name)
        if avatar_url is not None:
            pulumi.set(__self__, "avatar_url", avatar_url)
        if full_name is not None:
            pulumi.set(__self__, "full_name", full_name)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if subject_type is not None:
            pulumi.set(__self__, "subject_type", subject_type)
        if username is not None:
            pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter(name="apiTokenName")
    def api_token_name(self) -> Optional[str]:
        return pulumi.get(self, "api_token_name")

    @property
    @pulumi.getter(name="avatarUrl")
    def avatar_url(self) -> Optional[str]:
        return pulumi.get(self, "avatar_url")

    @property
    @pulumi.getter(name="fullName")
    def full_name(self) -> Optional[str]:
        return pulumi.get(self, "full_name")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="subjectType")
    def subject_type(self) -> Optional[str]:
        return pulumi.get(self, "subject_type")

    @property
    @pulumi.getter
    def username(self) -> Optional[str]:
        return pulumi.get(self, "username")


@pulumi.output_type
class ClusterHealthStatus(dict):
    def __init__(__self__, *,
                 details: Optional[Sequence['outputs.ClusterHealthStatusDetail']] = None,
                 value: Optional[str] = None):
        """
        :param Sequence['ClusterHealthStatusDetailArgs'] details: Cluster health status details
        :param str value: Cluster health status value
        """
        if details is not None:
            pulumi.set(__self__, "details", details)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def details(self) -> Optional[Sequence['outputs.ClusterHealthStatusDetail']]:
        """
        Cluster health status details
        """
        return pulumi.get(self, "details")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Cluster health status value
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ClusterHealthStatusDetail(dict):
    def __init__(__self__, *,
                 code: Optional[str] = None,
                 description: Optional[str] = None,
                 severity: Optional[str] = None):
        """
        :param str code: Cluster health status detail code
        :param str description: Cluster health status detail description
        :param str severity: Cluster health status detail severity
        """
        if code is not None:
            pulumi.set(__self__, "code", code)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if severity is not None:
            pulumi.set(__self__, "severity", severity)

    @property
    @pulumi.getter
    def code(self) -> Optional[str]:
        """
        Cluster health status detail code
        """
        return pulumi.get(self, "code")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        Cluster health status detail description
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def severity(self) -> Optional[str]:
        """
        Cluster health status detail severity
        """
        return pulumi.get(self, "severity")


@pulumi.output_type
class ClusterMetadata(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "externalIps":
            suggest = "external_ips"
        elif key == "kubeDnsIp":
            suggest = "kube_dns_ip"
        elif key == "oidcIssuerUrl":
            suggest = "oidc_issuer_url"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ClusterMetadata. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ClusterMetadata.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ClusterMetadata.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 external_ips: Optional[Sequence[str]] = None,
                 kube_dns_ip: Optional[str] = None,
                 oidc_issuer_url: Optional[str] = None):
        """
        :param Sequence[str] external_ips: Cluster external IPs
        :param str kube_dns_ip: Cluster kube DNS IP
        :param str oidc_issuer_url: Cluster OIDC issuer URL
        """
        if external_ips is not None:
            pulumi.set(__self__, "external_ips", external_ips)
        if kube_dns_ip is not None:
            pulumi.set(__self__, "kube_dns_ip", kube_dns_ip)
        if oidc_issuer_url is not None:
            pulumi.set(__self__, "oidc_issuer_url", oidc_issuer_url)

    @property
    @pulumi.getter(name="externalIps")
    def external_ips(self) -> Optional[Sequence[str]]:
        """
        Cluster external IPs
        """
        return pulumi.get(self, "external_ips")

    @property
    @pulumi.getter(name="kubeDnsIp")
    def kube_dns_ip(self) -> Optional[str]:
        """
        Cluster kube DNS IP
        """
        return pulumi.get(self, "kube_dns_ip")

    @property
    @pulumi.getter(name="oidcIssuerUrl")
    def oidc_issuer_url(self) -> Optional[str]:
        """
        Cluster OIDC issuer URL
        """
        return pulumi.get(self, "oidc_issuer_url")


@pulumi.output_type
class ClusterNodePool(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "cloudProvider":
            suggest = "cloud_provider"
        elif key == "clusterId":
            suggest = "cluster_id"
        elif key == "createdAt":
            suggest = "created_at"
        elif key == "isDefault":
            suggest = "is_default"
        elif key == "maxNodeCount":
            suggest = "max_node_count"
        elif key == "nodeInstanceType":
            suggest = "node_instance_type"
        elif key == "supportedAstroMachines":
            suggest = "supported_astro_machines"
        elif key == "updatedAt":
            suggest = "updated_at"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ClusterNodePool. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ClusterNodePool.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ClusterNodePool.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cloud_provider: Optional[str] = None,
                 cluster_id: Optional[str] = None,
                 created_at: Optional[str] = None,
                 id: Optional[str] = None,
                 is_default: Optional[bool] = None,
                 max_node_count: Optional[int] = None,
                 name: Optional[str] = None,
                 node_instance_type: Optional[str] = None,
                 supported_astro_machines: Optional[Sequence[str]] = None,
                 updated_at: Optional[str] = None):
        """
        :param str cloud_provider: Node pool cloud provider
        :param str cluster_id: Node pool cluster identifier
        :param str created_at: Node pool creation timestamp
        :param str id: Node pool identifier
        :param bool is_default: Whether the node pool is the default node pool of the cluster
        :param int max_node_count: Node pool maximum node count
        :param str name: Node pool name
        :param str node_instance_type: Node pool node instance type
        :param Sequence[str] supported_astro_machines: Node pool supported Astro machines
        :param str updated_at: Node pool last updated timestamp
        """
        if cloud_provider is not None:
            pulumi.set(__self__, "cloud_provider", cloud_provider)
        if cluster_id is not None:
            pulumi.set(__self__, "cluster_id", cluster_id)
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if is_default is not None:
            pulumi.set(__self__, "is_default", is_default)
        if max_node_count is not None:
            pulumi.set(__self__, "max_node_count", max_node_count)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if node_instance_type is not None:
            pulumi.set(__self__, "node_instance_type", node_instance_type)
        if supported_astro_machines is not None:
            pulumi.set(__self__, "supported_astro_machines", supported_astro_machines)
        if updated_at is not None:
            pulumi.set(__self__, "updated_at", updated_at)

    @property
    @pulumi.getter(name="cloudProvider")
    def cloud_provider(self) -> Optional[str]:
        """
        Node pool cloud provider
        """
        return pulumi.get(self, "cloud_provider")

    @property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> Optional[str]:
        """
        Node pool cluster identifier
        """
        return pulumi.get(self, "cluster_id")

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[str]:
        """
        Node pool creation timestamp
        """
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        Node pool identifier
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isDefault")
    def is_default(self) -> Optional[bool]:
        """
        Whether the node pool is the default node pool of the cluster
        """
        return pulumi.get(self, "is_default")

    @property
    @pulumi.getter(name="maxNodeCount")
    def max_node_count(self) -> Optional[int]:
        """
        Node pool maximum node count
        """
        return pulumi.get(self, "max_node_count")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Node pool name
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="nodeInstanceType")
    def node_instance_type(self) -> Optional[str]:
        """
        Node pool node instance type
        """
        return pulumi.get(self, "node_instance_type")

    @property
    @pulumi.getter(name="supportedAstroMachines")
    def supported_astro_machines(self) -> Optional[Sequence[str]]:
        """
        Node pool supported Astro machines
        """
        return pulumi.get(self, "supported_astro_machines")

    @property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> Optional[str]:
        """
        Node pool last updated timestamp
        """
        return pulumi.get(self, "updated_at")


@pulumi.output_type
class ClusterTimeouts(dict):
    def __init__(__self__, *,
                 create: Optional[str] = None,
                 delete: Optional[str] = None,
                 update: Optional[str] = None):
        """
        :param str create: A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
        :param str delete: A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Setting a timeout for a Delete operation is only applicable if changes are saved into state before the destroy operation occurs.
        :param str update: A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
        """
        if create is not None:
            pulumi.set(__self__, "create", create)
        if delete is not None:
            pulumi.set(__self__, "delete", delete)
        if update is not None:
            pulumi.set(__self__, "update", update)

    @property
    @pulumi.getter
    def create(self) -> Optional[str]:
        """
        A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
        """
        return pulumi.get(self, "create")

    @property
    @pulumi.getter
    def delete(self) -> Optional[str]:
        """
        A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Setting a timeout for a Delete operation is only applicable if changes are saved into state before the destroy operation occurs.
        """
        return pulumi.get(self, "delete")

    @property
    @pulumi.getter
    def update(self) -> Optional[str]:
        """
        A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
        """
        return pulumi.get(self, "update")


@pulumi.output_type
class DeploymentCreatedBy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "apiTokenName":
            suggest = "api_token_name"
        elif key == "avatarUrl":
            suggest = "avatar_url"
        elif key == "fullName":
            suggest = "full_name"
        elif key == "subjectType":
            suggest = "subject_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeploymentCreatedBy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeploymentCreatedBy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeploymentCreatedBy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 api_token_name: Optional[str] = None,
                 avatar_url: Optional[str] = None,
                 full_name: Optional[str] = None,
                 id: Optional[str] = None,
                 subject_type: Optional[str] = None,
                 username: Optional[str] = None):
        if api_token_name is not None:
            pulumi.set(__self__, "api_token_name", api_token_name)
        if avatar_url is not None:
            pulumi.set(__self__, "avatar_url", avatar_url)
        if full_name is not None:
            pulumi.set(__self__, "full_name", full_name)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if subject_type is not None:
            pulumi.set(__self__, "subject_type", subject_type)
        if username is not None:
            pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter(name="apiTokenName")
    def api_token_name(self) -> Optional[str]:
        return pulumi.get(self, "api_token_name")

    @property
    @pulumi.getter(name="avatarUrl")
    def avatar_url(self) -> Optional[str]:
        return pulumi.get(self, "avatar_url")

    @property
    @pulumi.getter(name="fullName")
    def full_name(self) -> Optional[str]:
        return pulumi.get(self, "full_name")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="subjectType")
    def subject_type(self) -> Optional[str]:
        return pulumi.get(self, "subject_type")

    @property
    @pulumi.getter
    def username(self) -> Optional[str]:
        return pulumi.get(self, "username")


@pulumi.output_type
class DeploymentEnvironmentVariable(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "isSecret":
            suggest = "is_secret"
        elif key == "updatedAt":
            suggest = "updated_at"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeploymentEnvironmentVariable. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeploymentEnvironmentVariable.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeploymentEnvironmentVariable.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 is_secret: bool,
                 key: str,
                 updated_at: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param bool is_secret: Whether Environment variable is a secret
        :param str key: Environment variable key
        :param str updated_at: Environment variable last updated timestamp
        :param str value: Environment variable value
        """
        pulumi.set(__self__, "is_secret", is_secret)
        pulumi.set(__self__, "key", key)
        if updated_at is not None:
            pulumi.set(__self__, "updated_at", updated_at)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="isSecret")
    def is_secret(self) -> bool:
        """
        Whether Environment variable is a secret
        """
        return pulumi.get(self, "is_secret")

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        Environment variable key
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> Optional[str]:
        """
        Environment variable last updated timestamp
        """
        return pulumi.get(self, "updated_at")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Environment variable value
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class DeploymentScalingSpec(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "hibernationSpec":
            suggest = "hibernation_spec"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeploymentScalingSpec. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeploymentScalingSpec.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeploymentScalingSpec.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 hibernation_spec: 'outputs.DeploymentScalingSpecHibernationSpec'):
        """
        :param 'DeploymentScalingSpecHibernationSpecArgs' hibernation_spec: Hibernation configuration for the deployment. The deployment will hibernate according to the schedules defined in this configuration. To remove the hibernation configuration, set scaling*spec to null.
        """
        pulumi.set(__self__, "hibernation_spec", hibernation_spec)

    @property
    @pulumi.getter(name="hibernationSpec")
    def hibernation_spec(self) -> 'outputs.DeploymentScalingSpecHibernationSpec':
        """
        Hibernation configuration for the deployment. The deployment will hibernate according to the schedules defined in this configuration. To remove the hibernation configuration, set scaling*spec to null.
        """
        return pulumi.get(self, "hibernation_spec")


@pulumi.output_type
class DeploymentScalingSpecHibernationSpec(dict):
    def __init__(__self__, *,
                 override: Optional['outputs.DeploymentScalingSpecHibernationSpecOverride'] = None,
                 schedules: Optional[Sequence['outputs.DeploymentScalingSpecHibernationSpecSchedule']] = None):
        """
        :param 'DeploymentScalingSpecHibernationSpecOverrideArgs' override: Hibernation override configuration. Set to null to remove the override.
        :param Sequence['DeploymentScalingSpecHibernationSpecScheduleArgs'] schedules: List of hibernation schedules. Set to null to remove all schedules.
        """
        if override is not None:
            pulumi.set(__self__, "override", override)
        if schedules is not None:
            pulumi.set(__self__, "schedules", schedules)

    @property
    @pulumi.getter
    def override(self) -> Optional['outputs.DeploymentScalingSpecHibernationSpecOverride']:
        """
        Hibernation override configuration. Set to null to remove the override.
        """
        return pulumi.get(self, "override")

    @property
    @pulumi.getter
    def schedules(self) -> Optional[Sequence['outputs.DeploymentScalingSpecHibernationSpecSchedule']]:
        """
        List of hibernation schedules. Set to null to remove all schedules.
        """
        return pulumi.get(self, "schedules")


@pulumi.output_type
class DeploymentScalingSpecHibernationSpecOverride(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "isHibernating":
            suggest = "is_hibernating"
        elif key == "isActive":
            suggest = "is_active"
        elif key == "overrideUntil":
            suggest = "override_until"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeploymentScalingSpecHibernationSpecOverride. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeploymentScalingSpecHibernationSpecOverride.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeploymentScalingSpecHibernationSpecOverride.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 is_hibernating: bool,
                 is_active: Optional[bool] = None,
                 override_until: Optional[str] = None):
        pulumi.set(__self__, "is_hibernating", is_hibernating)
        if is_active is not None:
            pulumi.set(__self__, "is_active", is_active)
        if override_until is not None:
            pulumi.set(__self__, "override_until", override_until)

    @property
    @pulumi.getter(name="isHibernating")
    def is_hibernating(self) -> bool:
        return pulumi.get(self, "is_hibernating")

    @property
    @pulumi.getter(name="isActive")
    def is_active(self) -> Optional[bool]:
        return pulumi.get(self, "is_active")

    @property
    @pulumi.getter(name="overrideUntil")
    def override_until(self) -> Optional[str]:
        return pulumi.get(self, "override_until")


@pulumi.output_type
class DeploymentScalingSpecHibernationSpecSchedule(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "hibernateAtCron":
            suggest = "hibernate_at_cron"
        elif key == "isEnabled":
            suggest = "is_enabled"
        elif key == "wakeAtCron":
            suggest = "wake_at_cron"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeploymentScalingSpecHibernationSpecSchedule. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeploymentScalingSpecHibernationSpecSchedule.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeploymentScalingSpecHibernationSpecSchedule.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 hibernate_at_cron: str,
                 is_enabled: bool,
                 wake_at_cron: str,
                 description: Optional[str] = None):
        pulumi.set(__self__, "hibernate_at_cron", hibernate_at_cron)
        pulumi.set(__self__, "is_enabled", is_enabled)
        pulumi.set(__self__, "wake_at_cron", wake_at_cron)
        if description is not None:
            pulumi.set(__self__, "description", description)

    @property
    @pulumi.getter(name="hibernateAtCron")
    def hibernate_at_cron(self) -> str:
        return pulumi.get(self, "hibernate_at_cron")

    @property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> bool:
        return pulumi.get(self, "is_enabled")

    @property
    @pulumi.getter(name="wakeAtCron")
    def wake_at_cron(self) -> str:
        return pulumi.get(self, "wake_at_cron")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")


@pulumi.output_type
class DeploymentScalingStatus(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "hibernationStatus":
            suggest = "hibernation_status"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeploymentScalingStatus. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeploymentScalingStatus.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeploymentScalingStatus.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 hibernation_status: Optional['outputs.DeploymentScalingStatusHibernationStatus'] = None):
        if hibernation_status is not None:
            pulumi.set(__self__, "hibernation_status", hibernation_status)

    @property
    @pulumi.getter(name="hibernationStatus")
    def hibernation_status(self) -> Optional['outputs.DeploymentScalingStatusHibernationStatus']:
        return pulumi.get(self, "hibernation_status")


@pulumi.output_type
class DeploymentScalingStatusHibernationStatus(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "isHibernating":
            suggest = "is_hibernating"
        elif key == "nextEventAt":
            suggest = "next_event_at"
        elif key == "nextEventType":
            suggest = "next_event_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeploymentScalingStatusHibernationStatus. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeploymentScalingStatusHibernationStatus.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeploymentScalingStatusHibernationStatus.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 is_hibernating: Optional[bool] = None,
                 next_event_at: Optional[str] = None,
                 next_event_type: Optional[str] = None,
                 reason: Optional[str] = None):
        if is_hibernating is not None:
            pulumi.set(__self__, "is_hibernating", is_hibernating)
        if next_event_at is not None:
            pulumi.set(__self__, "next_event_at", next_event_at)
        if next_event_type is not None:
            pulumi.set(__self__, "next_event_type", next_event_type)
        if reason is not None:
            pulumi.set(__self__, "reason", reason)

    @property
    @pulumi.getter(name="isHibernating")
    def is_hibernating(self) -> Optional[bool]:
        return pulumi.get(self, "is_hibernating")

    @property
    @pulumi.getter(name="nextEventAt")
    def next_event_at(self) -> Optional[str]:
        return pulumi.get(self, "next_event_at")

    @property
    @pulumi.getter(name="nextEventType")
    def next_event_type(self) -> Optional[str]:
        return pulumi.get(self, "next_event_type")

    @property
    @pulumi.getter
    def reason(self) -> Optional[str]:
        return pulumi.get(self, "reason")


@pulumi.output_type
class DeploymentUpdatedBy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "apiTokenName":
            suggest = "api_token_name"
        elif key == "avatarUrl":
            suggest = "avatar_url"
        elif key == "fullName":
            suggest = "full_name"
        elif key == "subjectType":
            suggest = "subject_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeploymentUpdatedBy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeploymentUpdatedBy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeploymentUpdatedBy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 api_token_name: Optional[str] = None,
                 avatar_url: Optional[str] = None,
                 full_name: Optional[str] = None,
                 id: Optional[str] = None,
                 subject_type: Optional[str] = None,
                 username: Optional[str] = None):
        if api_token_name is not None:
            pulumi.set(__self__, "api_token_name", api_token_name)
        if avatar_url is not None:
            pulumi.set(__self__, "avatar_url", avatar_url)
        if full_name is not None:
            pulumi.set(__self__, "full_name", full_name)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if subject_type is not None:
            pulumi.set(__self__, "subject_type", subject_type)
        if username is not None:
            pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter(name="apiTokenName")
    def api_token_name(self) -> Optional[str]:
        return pulumi.get(self, "api_token_name")

    @property
    @pulumi.getter(name="avatarUrl")
    def avatar_url(self) -> Optional[str]:
        return pulumi.get(self, "avatar_url")

    @property
    @pulumi.getter(name="fullName")
    def full_name(self) -> Optional[str]:
        return pulumi.get(self, "full_name")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="subjectType")
    def subject_type(self) -> Optional[str]:
        return pulumi.get(self, "subject_type")

    @property
    @pulumi.getter
    def username(self) -> Optional[str]:
        return pulumi.get(self, "username")


@pulumi.output_type
class DeploymentWorkerQueue(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "isDefault":
            suggest = "is_default"
        elif key == "maxWorkerCount":
            suggest = "max_worker_count"
        elif key == "minWorkerCount":
            suggest = "min_worker_count"
        elif key == "workerConcurrency":
            suggest = "worker_concurrency"
        elif key == "astroMachine":
            suggest = "astro_machine"
        elif key == "nodePoolId":
            suggest = "node_pool_id"
        elif key == "podCpu":
            suggest = "pod_cpu"
        elif key == "podMemory":
            suggest = "pod_memory"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeploymentWorkerQueue. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeploymentWorkerQueue.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeploymentWorkerQueue.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 is_default: bool,
                 max_worker_count: int,
                 min_worker_count: int,
                 name: str,
                 worker_concurrency: int,
                 astro_machine: Optional[str] = None,
                 node_pool_id: Optional[str] = None,
                 pod_cpu: Optional[str] = None,
                 pod_memory: Optional[str] = None):
        """
        :param bool is_default: Worker queue default
        :param int max_worker_count: Worker queue max worker count
        :param int min_worker_count: Worker queue min worker count
        :param str name: Worker queue name
        :param int worker_concurrency: Worker queue worker concurrency
        :param str astro_machine: Worker queue Astro machine value - required for 'STANDARD' and 'DEDICATED' deployments
        :param str node_pool_id: Worker queue Node pool identifier - required for 'HYBRID' deployments
        :param str pod_cpu: Worker queue pod CPU
        :param str pod_memory: Worker queue pod memory
        """
        pulumi.set(__self__, "is_default", is_default)
        pulumi.set(__self__, "max_worker_count", max_worker_count)
        pulumi.set(__self__, "min_worker_count", min_worker_count)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "worker_concurrency", worker_concurrency)
        if astro_machine is not None:
            pulumi.set(__self__, "astro_machine", astro_machine)
        if node_pool_id is not None:
            pulumi.set(__self__, "node_pool_id", node_pool_id)
        if pod_cpu is not None:
            pulumi.set(__self__, "pod_cpu", pod_cpu)
        if pod_memory is not None:
            pulumi.set(__self__, "pod_memory", pod_memory)

    @property
    @pulumi.getter(name="isDefault")
    def is_default(self) -> bool:
        """
        Worker queue default
        """
        return pulumi.get(self, "is_default")

    @property
    @pulumi.getter(name="maxWorkerCount")
    def max_worker_count(self) -> int:
        """
        Worker queue max worker count
        """
        return pulumi.get(self, "max_worker_count")

    @property
    @pulumi.getter(name="minWorkerCount")
    def min_worker_count(self) -> int:
        """
        Worker queue min worker count
        """
        return pulumi.get(self, "min_worker_count")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Worker queue name
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="workerConcurrency")
    def worker_concurrency(self) -> int:
        """
        Worker queue worker concurrency
        """
        return pulumi.get(self, "worker_concurrency")

    @property
    @pulumi.getter(name="astroMachine")
    def astro_machine(self) -> Optional[str]:
        """
        Worker queue Astro machine value - required for 'STANDARD' and 'DEDICATED' deployments
        """
        return pulumi.get(self, "astro_machine")

    @property
    @pulumi.getter(name="nodePoolId")
    def node_pool_id(self) -> Optional[str]:
        """
        Worker queue Node pool identifier - required for 'HYBRID' deployments
        """
        return pulumi.get(self, "node_pool_id")

    @property
    @pulumi.getter(name="podCpu")
    def pod_cpu(self) -> Optional[str]:
        """
        Worker queue pod CPU
        """
        return pulumi.get(self, "pod_cpu")

    @property
    @pulumi.getter(name="podMemory")
    def pod_memory(self) -> Optional[str]:
        """
        Worker queue pod memory
        """
        return pulumi.get(self, "pod_memory")


@pulumi.output_type
class TeamCreatedBy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "apiTokenName":
            suggest = "api_token_name"
        elif key == "avatarUrl":
            suggest = "avatar_url"
        elif key == "fullName":
            suggest = "full_name"
        elif key == "subjectType":
            suggest = "subject_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TeamCreatedBy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TeamCreatedBy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TeamCreatedBy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 api_token_name: Optional[str] = None,
                 avatar_url: Optional[str] = None,
                 full_name: Optional[str] = None,
                 id: Optional[str] = None,
                 subject_type: Optional[str] = None,
                 username: Optional[str] = None):
        if api_token_name is not None:
            pulumi.set(__self__, "api_token_name", api_token_name)
        if avatar_url is not None:
            pulumi.set(__self__, "avatar_url", avatar_url)
        if full_name is not None:
            pulumi.set(__self__, "full_name", full_name)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if subject_type is not None:
            pulumi.set(__self__, "subject_type", subject_type)
        if username is not None:
            pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter(name="apiTokenName")
    def api_token_name(self) -> Optional[str]:
        return pulumi.get(self, "api_token_name")

    @property
    @pulumi.getter(name="avatarUrl")
    def avatar_url(self) -> Optional[str]:
        return pulumi.get(self, "avatar_url")

    @property
    @pulumi.getter(name="fullName")
    def full_name(self) -> Optional[str]:
        return pulumi.get(self, "full_name")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="subjectType")
    def subject_type(self) -> Optional[str]:
        return pulumi.get(self, "subject_type")

    @property
    @pulumi.getter
    def username(self) -> Optional[str]:
        return pulumi.get(self, "username")


@pulumi.output_type
class TeamDeploymentRole(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "deploymentId":
            suggest = "deployment_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TeamDeploymentRole. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TeamDeploymentRole.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TeamDeploymentRole.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 deployment_id: str,
                 role: str):
        """
        :param str deployment_id: The ID of the deployment to assign the role to
        :param str role: The role to assign to the deployment
        """
        pulumi.set(__self__, "deployment_id", deployment_id)
        pulumi.set(__self__, "role", role)

    @property
    @pulumi.getter(name="deploymentId")
    def deployment_id(self) -> str:
        """
        The ID of the deployment to assign the role to
        """
        return pulumi.get(self, "deployment_id")

    @property
    @pulumi.getter
    def role(self) -> str:
        """
        The role to assign to the deployment
        """
        return pulumi.get(self, "role")


@pulumi.output_type
class TeamRolesDeploymentRole(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "deploymentId":
            suggest = "deployment_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TeamRolesDeploymentRole. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TeamRolesDeploymentRole.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TeamRolesDeploymentRole.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 deployment_id: str,
                 role: str):
        """
        :param str deployment_id: The ID of the deployment to assign the role to
        :param str role: The role to assign to the deployment
        """
        pulumi.set(__self__, "deployment_id", deployment_id)
        pulumi.set(__self__, "role", role)

    @property
    @pulumi.getter(name="deploymentId")
    def deployment_id(self) -> str:
        """
        The ID of the deployment to assign the role to
        """
        return pulumi.get(self, "deployment_id")

    @property
    @pulumi.getter
    def role(self) -> str:
        """
        The role to assign to the deployment
        """
        return pulumi.get(self, "role")


@pulumi.output_type
class TeamRolesWorkspaceRole(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "workspaceId":
            suggest = "workspace_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TeamRolesWorkspaceRole. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TeamRolesWorkspaceRole.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TeamRolesWorkspaceRole.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 role: str,
                 workspace_id: str):
        """
        :param str role: The role to assign to the workspace
        :param str workspace_id: The ID of the workspace to assign the role to
        """
        pulumi.set(__self__, "role", role)
        pulumi.set(__self__, "workspace_id", workspace_id)

    @property
    @pulumi.getter
    def role(self) -> str:
        """
        The role to assign to the workspace
        """
        return pulumi.get(self, "role")

    @property
    @pulumi.getter(name="workspaceId")
    def workspace_id(self) -> str:
        """
        The ID of the workspace to assign the role to
        """
        return pulumi.get(self, "workspace_id")


@pulumi.output_type
class TeamUpdatedBy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "apiTokenName":
            suggest = "api_token_name"
        elif key == "avatarUrl":
            suggest = "avatar_url"
        elif key == "fullName":
            suggest = "full_name"
        elif key == "subjectType":
            suggest = "subject_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TeamUpdatedBy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TeamUpdatedBy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TeamUpdatedBy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 api_token_name: Optional[str] = None,
                 avatar_url: Optional[str] = None,
                 full_name: Optional[str] = None,
                 id: Optional[str] = None,
                 subject_type: Optional[str] = None,
                 username: Optional[str] = None):
        if api_token_name is not None:
            pulumi.set(__self__, "api_token_name", api_token_name)
        if avatar_url is not None:
            pulumi.set(__self__, "avatar_url", avatar_url)
        if full_name is not None:
            pulumi.set(__self__, "full_name", full_name)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if subject_type is not None:
            pulumi.set(__self__, "subject_type", subject_type)
        if username is not None:
            pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter(name="apiTokenName")
    def api_token_name(self) -> Optional[str]:
        return pulumi.get(self, "api_token_name")

    @property
    @pulumi.getter(name="avatarUrl")
    def avatar_url(self) -> Optional[str]:
        return pulumi.get(self, "avatar_url")

    @property
    @pulumi.getter(name="fullName")
    def full_name(self) -> Optional[str]:
        return pulumi.get(self, "full_name")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="subjectType")
    def subject_type(self) -> Optional[str]:
        return pulumi.get(self, "subject_type")

    @property
    @pulumi.getter
    def username(self) -> Optional[str]:
        return pulumi.get(self, "username")


@pulumi.output_type
class TeamWorkspaceRole(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "workspaceId":
            suggest = "workspace_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TeamWorkspaceRole. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TeamWorkspaceRole.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TeamWorkspaceRole.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 role: str,
                 workspace_id: str):
        """
        :param str role: The role to assign to the workspace
        :param str workspace_id: The ID of the workspace to assign the role to
        """
        pulumi.set(__self__, "role", role)
        pulumi.set(__self__, "workspace_id", workspace_id)

    @property
    @pulumi.getter
    def role(self) -> str:
        """
        The role to assign to the workspace
        """
        return pulumi.get(self, "role")

    @property
    @pulumi.getter(name="workspaceId")
    def workspace_id(self) -> str:
        """
        The ID of the workspace to assign the role to
        """
        return pulumi.get(self, "workspace_id")


@pulumi.output_type
class UserInviteInvitee(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "apiTokenName":
            suggest = "api_token_name"
        elif key == "avatarUrl":
            suggest = "avatar_url"
        elif key == "fullName":
            suggest = "full_name"
        elif key == "subjectType":
            suggest = "subject_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in UserInviteInvitee. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        UserInviteInvitee.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        UserInviteInvitee.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 api_token_name: Optional[str] = None,
                 avatar_url: Optional[str] = None,
                 full_name: Optional[str] = None,
                 id: Optional[str] = None,
                 subject_type: Optional[str] = None,
                 username: Optional[str] = None):
        if api_token_name is not None:
            pulumi.set(__self__, "api_token_name", api_token_name)
        if avatar_url is not None:
            pulumi.set(__self__, "avatar_url", avatar_url)
        if full_name is not None:
            pulumi.set(__self__, "full_name", full_name)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if subject_type is not None:
            pulumi.set(__self__, "subject_type", subject_type)
        if username is not None:
            pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter(name="apiTokenName")
    def api_token_name(self) -> Optional[str]:
        return pulumi.get(self, "api_token_name")

    @property
    @pulumi.getter(name="avatarUrl")
    def avatar_url(self) -> Optional[str]:
        return pulumi.get(self, "avatar_url")

    @property
    @pulumi.getter(name="fullName")
    def full_name(self) -> Optional[str]:
        return pulumi.get(self, "full_name")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="subjectType")
    def subject_type(self) -> Optional[str]:
        return pulumi.get(self, "subject_type")

    @property
    @pulumi.getter
    def username(self) -> Optional[str]:
        return pulumi.get(self, "username")


@pulumi.output_type
class UserInviteInviter(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "apiTokenName":
            suggest = "api_token_name"
        elif key == "avatarUrl":
            suggest = "avatar_url"
        elif key == "fullName":
            suggest = "full_name"
        elif key == "subjectType":
            suggest = "subject_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in UserInviteInviter. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        UserInviteInviter.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        UserInviteInviter.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 api_token_name: Optional[str] = None,
                 avatar_url: Optional[str] = None,
                 full_name: Optional[str] = None,
                 id: Optional[str] = None,
                 subject_type: Optional[str] = None,
                 username: Optional[str] = None):
        if api_token_name is not None:
            pulumi.set(__self__, "api_token_name", api_token_name)
        if avatar_url is not None:
            pulumi.set(__self__, "avatar_url", avatar_url)
        if full_name is not None:
            pulumi.set(__self__, "full_name", full_name)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if subject_type is not None:
            pulumi.set(__self__, "subject_type", subject_type)
        if username is not None:
            pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter(name="apiTokenName")
    def api_token_name(self) -> Optional[str]:
        return pulumi.get(self, "api_token_name")

    @property
    @pulumi.getter(name="avatarUrl")
    def avatar_url(self) -> Optional[str]:
        return pulumi.get(self, "avatar_url")

    @property
    @pulumi.getter(name="fullName")
    def full_name(self) -> Optional[str]:
        return pulumi.get(self, "full_name")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="subjectType")
    def subject_type(self) -> Optional[str]:
        return pulumi.get(self, "subject_type")

    @property
    @pulumi.getter
    def username(self) -> Optional[str]:
        return pulumi.get(self, "username")


@pulumi.output_type
class UserRolesDeploymentRole(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "deploymentId":
            suggest = "deployment_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in UserRolesDeploymentRole. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        UserRolesDeploymentRole.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        UserRolesDeploymentRole.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 deployment_id: str,
                 role: str):
        """
        :param str deployment_id: The ID of the deployment to assign the role to
        :param str role: The role to assign to the deployment
        """
        pulumi.set(__self__, "deployment_id", deployment_id)
        pulumi.set(__self__, "role", role)

    @property
    @pulumi.getter(name="deploymentId")
    def deployment_id(self) -> str:
        """
        The ID of the deployment to assign the role to
        """
        return pulumi.get(self, "deployment_id")

    @property
    @pulumi.getter
    def role(self) -> str:
        """
        The role to assign to the deployment
        """
        return pulumi.get(self, "role")


@pulumi.output_type
class UserRolesWorkspaceRole(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "workspaceId":
            suggest = "workspace_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in UserRolesWorkspaceRole. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        UserRolesWorkspaceRole.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        UserRolesWorkspaceRole.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 role: str,
                 workspace_id: str):
        """
        :param str role: The role to assign to the workspace
        :param str workspace_id: The ID of the workspace to assign the role to
        """
        pulumi.set(__self__, "role", role)
        pulumi.set(__self__, "workspace_id", workspace_id)

    @property
    @pulumi.getter
    def role(self) -> str:
        """
        The role to assign to the workspace
        """
        return pulumi.get(self, "role")

    @property
    @pulumi.getter(name="workspaceId")
    def workspace_id(self) -> str:
        """
        The ID of the workspace to assign the role to
        """
        return pulumi.get(self, "workspace_id")


@pulumi.output_type
class WorkspaceCreatedBy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "apiTokenName":
            suggest = "api_token_name"
        elif key == "avatarUrl":
            suggest = "avatar_url"
        elif key == "fullName":
            suggest = "full_name"
        elif key == "subjectType":
            suggest = "subject_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkspaceCreatedBy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkspaceCreatedBy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkspaceCreatedBy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 api_token_name: Optional[str] = None,
                 avatar_url: Optional[str] = None,
                 full_name: Optional[str] = None,
                 id: Optional[str] = None,
                 subject_type: Optional[str] = None,
                 username: Optional[str] = None):
        if api_token_name is not None:
            pulumi.set(__self__, "api_token_name", api_token_name)
        if avatar_url is not None:
            pulumi.set(__self__, "avatar_url", avatar_url)
        if full_name is not None:
            pulumi.set(__self__, "full_name", full_name)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if subject_type is not None:
            pulumi.set(__self__, "subject_type", subject_type)
        if username is not None:
            pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter(name="apiTokenName")
    def api_token_name(self) -> Optional[str]:
        return pulumi.get(self, "api_token_name")

    @property
    @pulumi.getter(name="avatarUrl")
    def avatar_url(self) -> Optional[str]:
        return pulumi.get(self, "avatar_url")

    @property
    @pulumi.getter(name="fullName")
    def full_name(self) -> Optional[str]:
        return pulumi.get(self, "full_name")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="subjectType")
    def subject_type(self) -> Optional[str]:
        return pulumi.get(self, "subject_type")

    @property
    @pulumi.getter
    def username(self) -> Optional[str]:
        return pulumi.get(self, "username")


@pulumi.output_type
class WorkspaceUpdatedBy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "apiTokenName":
            suggest = "api_token_name"
        elif key == "avatarUrl":
            suggest = "avatar_url"
        elif key == "fullName":
            suggest = "full_name"
        elif key == "subjectType":
            suggest = "subject_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkspaceUpdatedBy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkspaceUpdatedBy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkspaceUpdatedBy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 api_token_name: Optional[str] = None,
                 avatar_url: Optional[str] = None,
                 full_name: Optional[str] = None,
                 id: Optional[str] = None,
                 subject_type: Optional[str] = None,
                 username: Optional[str] = None):
        if api_token_name is not None:
            pulumi.set(__self__, "api_token_name", api_token_name)
        if avatar_url is not None:
            pulumi.set(__self__, "avatar_url", avatar_url)
        if full_name is not None:
            pulumi.set(__self__, "full_name", full_name)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if subject_type is not None:
            pulumi.set(__self__, "subject_type", subject_type)
        if username is not None:
            pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter(name="apiTokenName")
    def api_token_name(self) -> Optional[str]:
        return pulumi.get(self, "api_token_name")

    @property
    @pulumi.getter(name="avatarUrl")
    def avatar_url(self) -> Optional[str]:
        return pulumi.get(self, "avatar_url")

    @property
    @pulumi.getter(name="fullName")
    def full_name(self) -> Optional[str]:
        return pulumi.get(self, "full_name")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="subjectType")
    def subject_type(self) -> Optional[str]:
        return pulumi.get(self, "subject_type")

    @property
    @pulumi.getter
    def username(self) -> Optional[str]:
        return pulumi.get(self, "username")


@pulumi.output_type
class GetApiTokenCreatedByResult(dict):
    def __init__(__self__, *,
                 api_token_name: str,
                 avatar_url: str,
                 full_name: str,
                 id: str,
                 subject_type: str,
                 username: str):
        pulumi.set(__self__, "api_token_name", api_token_name)
        pulumi.set(__self__, "avatar_url", avatar_url)
        pulumi.set(__self__, "full_name", full_name)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "subject_type", subject_type)
        pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter(name="apiTokenName")
    def api_token_name(self) -> str:
        return pulumi.get(self, "api_token_name")

    @property
    @pulumi.getter(name="avatarUrl")
    def avatar_url(self) -> str:
        return pulumi.get(self, "avatar_url")

    @property
    @pulumi.getter(name="fullName")
    def full_name(self) -> str:
        return pulumi.get(self, "full_name")

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="subjectType")
    def subject_type(self) -> str:
        return pulumi.get(self, "subject_type")

    @property
    @pulumi.getter
    def username(self) -> str:
        return pulumi.get(self, "username")


@pulumi.output_type
class GetApiTokenRoleResult(dict):
    def __init__(__self__, *,
                 entity_id: str,
                 entity_type: str,
                 role: str):
        """
        :param str entity_id: The ID of the entity to assign the role to
        :param str entity_type: The type of entity to assign the role to
        :param str role: The role to assign to the entity
        """
        pulumi.set(__self__, "entity_id", entity_id)
        pulumi.set(__self__, "entity_type", entity_type)
        pulumi.set(__self__, "role", role)

    @property
    @pulumi.getter(name="entityId")
    def entity_id(self) -> str:
        """
        The ID of the entity to assign the role to
        """
        return pulumi.get(self, "entity_id")

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> str:
        """
        The type of entity to assign the role to
        """
        return pulumi.get(self, "entity_type")

    @property
    @pulumi.getter
    def role(self) -> str:
        """
        The role to assign to the entity
        """
        return pulumi.get(self, "role")


@pulumi.output_type
class GetApiTokenUpdatedByResult(dict):
    def __init__(__self__, *,
                 api_token_name: str,
                 avatar_url: str,
                 full_name: str,
                 id: str,
                 subject_type: str,
                 username: str):
        pulumi.set(__self__, "api_token_name", api_token_name)
        pulumi.set(__self__, "avatar_url", avatar_url)
        pulumi.set(__self__, "full_name", full_name)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "subject_type", subject_type)
        pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter(name="apiTokenName")
    def api_token_name(self) -> str:
        return pulumi.get(self, "api_token_name")

    @property
    @pulumi.getter(name="avatarUrl")
    def avatar_url(self) -> str:
        return pulumi.get(self, "avatar_url")

    @property
    @pulumi.getter(name="fullName")
    def full_name(self) -> str:
        return pulumi.get(self, "full_name")

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="subjectType")
    def subject_type(self) -> str:
        return pulumi.get(self, "subject_type")

    @property
    @pulumi.getter
    def username(self) -> str:
        return pulumi.get(self, "username")


@pulumi.output_type
class GetApiTokensApiTokenResult(dict):
    def __init__(__self__, *,
                 created_at: str,
                 created_by: 'outputs.GetApiTokensApiTokenCreatedByResult',
                 description: str,
                 end_at: str,
                 expiry_period_in_days: int,
                 id: str,
                 last_used_at: str,
                 name: str,
                 roles: Sequence['outputs.GetApiTokensApiTokenRoleResult'],
                 short_token: str,
                 start_at: str,
                 type: str,
                 updated_at: str,
                 updated_by: 'outputs.GetApiTokensApiTokenUpdatedByResult'):
        """
        :param str created_at: API Token creation timestamp
        :param 'GetApiTokensApiTokenCreatedByArgs' created_by: API Token creator
        :param str description: API Token description
        :param str end_at: time when the API token will expire in UTC
        :param int expiry_period_in_days: API Token expiry period in days
        :param str id: API Token identifier
        :param str last_used_at: API Token last used timestamp
        :param str name: API Token name
        :param Sequence['GetApiTokensApiTokenRoleArgs'] roles: The roles assigned to the API Token
        :param str short_token: API Token short token
        :param str start_at: time when the API token will become valid in UTC
        :param str type: API Token type
        :param str updated_at: API Token last updated timestamp
        :param 'GetApiTokensApiTokenUpdatedByArgs' updated_by: API Token updater
        """
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "created_by", created_by)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "end_at", end_at)
        pulumi.set(__self__, "expiry_period_in_days", expiry_period_in_days)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "last_used_at", last_used_at)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "roles", roles)
        pulumi.set(__self__, "short_token", short_token)
        pulumi.set(__self__, "start_at", start_at)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "updated_at", updated_at)
        pulumi.set(__self__, "updated_by", updated_by)

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> str:
        """
        API Token creation timestamp
        """
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> 'outputs.GetApiTokensApiTokenCreatedByResult':
        """
        API Token creator
        """
        return pulumi.get(self, "created_by")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        API Token description
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="endAt")
    def end_at(self) -> str:
        """
        time when the API token will expire in UTC
        """
        return pulumi.get(self, "end_at")

    @property
    @pulumi.getter(name="expiryPeriodInDays")
    def expiry_period_in_days(self) -> int:
        """
        API Token expiry period in days
        """
        return pulumi.get(self, "expiry_period_in_days")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        API Token identifier
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="lastUsedAt")
    def last_used_at(self) -> str:
        """
        API Token last used timestamp
        """
        return pulumi.get(self, "last_used_at")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        API Token name
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def roles(self) -> Sequence['outputs.GetApiTokensApiTokenRoleResult']:
        """
        The roles assigned to the API Token
        """
        return pulumi.get(self, "roles")

    @property
    @pulumi.getter(name="shortToken")
    def short_token(self) -> str:
        """
        API Token short token
        """
        return pulumi.get(self, "short_token")

    @property
    @pulumi.getter(name="startAt")
    def start_at(self) -> str:
        """
        time when the API token will become valid in UTC
        """
        return pulumi.get(self, "start_at")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        API Token type
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> str:
        """
        API Token last updated timestamp
        """
        return pulumi.get(self, "updated_at")

    @property
    @pulumi.getter(name="updatedBy")
    def updated_by(self) -> 'outputs.GetApiTokensApiTokenUpdatedByResult':
        """
        API Token updater
        """
        return pulumi.get(self, "updated_by")


@pulumi.output_type
class GetApiTokensApiTokenCreatedByResult(dict):
    def __init__(__self__, *,
                 api_token_name: str,
                 avatar_url: str,
                 full_name: str,
                 id: str,
                 subject_type: str,
                 username: str):
        pulumi.set(__self__, "api_token_name", api_token_name)
        pulumi.set(__self__, "avatar_url", avatar_url)
        pulumi.set(__self__, "full_name", full_name)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "subject_type", subject_type)
        pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter(name="apiTokenName")
    def api_token_name(self) -> str:
        return pulumi.get(self, "api_token_name")

    @property
    @pulumi.getter(name="avatarUrl")
    def avatar_url(self) -> str:
        return pulumi.get(self, "avatar_url")

    @property
    @pulumi.getter(name="fullName")
    def full_name(self) -> str:
        return pulumi.get(self, "full_name")

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="subjectType")
    def subject_type(self) -> str:
        return pulumi.get(self, "subject_type")

    @property
    @pulumi.getter
    def username(self) -> str:
        return pulumi.get(self, "username")


@pulumi.output_type
class GetApiTokensApiTokenRoleResult(dict):
    def __init__(__self__, *,
                 entity_id: str,
                 entity_type: str,
                 role: str):
        """
        :param str entity_id: The ID of the entity to assign the role to
        :param str entity_type: The type of entity to assign the role to
        :param str role: The role to assign to the entity
        """
        pulumi.set(__self__, "entity_id", entity_id)
        pulumi.set(__self__, "entity_type", entity_type)
        pulumi.set(__self__, "role", role)

    @property
    @pulumi.getter(name="entityId")
    def entity_id(self) -> str:
        """
        The ID of the entity to assign the role to
        """
        return pulumi.get(self, "entity_id")

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> str:
        """
        The type of entity to assign the role to
        """
        return pulumi.get(self, "entity_type")

    @property
    @pulumi.getter
    def role(self) -> str:
        """
        The role to assign to the entity
        """
        return pulumi.get(self, "role")


@pulumi.output_type
class GetApiTokensApiTokenUpdatedByResult(dict):
    def __init__(__self__, *,
                 api_token_name: str,
                 avatar_url: str,
                 full_name: str,
                 id: str,
                 subject_type: str,
                 username: str):
        pulumi.set(__self__, "api_token_name", api_token_name)
        pulumi.set(__self__, "avatar_url", avatar_url)
        pulumi.set(__self__, "full_name", full_name)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "subject_type", subject_type)
        pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter(name="apiTokenName")
    def api_token_name(self) -> str:
        return pulumi.get(self, "api_token_name")

    @property
    @pulumi.getter(name="avatarUrl")
    def avatar_url(self) -> str:
        return pulumi.get(self, "avatar_url")

    @property
    @pulumi.getter(name="fullName")
    def full_name(self) -> str:
        return pulumi.get(self, "full_name")

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="subjectType")
    def subject_type(self) -> str:
        return pulumi.get(self, "subject_type")

    @property
    @pulumi.getter
    def username(self) -> str:
        return pulumi.get(self, "username")


@pulumi.output_type
class GetClusterHealthStatusResult(dict):
    def __init__(__self__, *,
                 details: Sequence['outputs.GetClusterHealthStatusDetailResult'],
                 value: str):
        """
        :param Sequence['GetClusterHealthStatusDetailArgs'] details: Cluster health status details
        :param str value: Cluster health status value
        """
        pulumi.set(__self__, "details", details)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def details(self) -> Sequence['outputs.GetClusterHealthStatusDetailResult']:
        """
        Cluster health status details
        """
        return pulumi.get(self, "details")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Cluster health status value
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetClusterHealthStatusDetailResult(dict):
    def __init__(__self__, *,
                 code: str,
                 description: str,
                 severity: str):
        """
        :param str code: Cluster health status detail code
        :param str description: Cluster health status detail description
        :param str severity: Cluster health status detail severity
        """
        pulumi.set(__self__, "code", code)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "severity", severity)

    @property
    @pulumi.getter
    def code(self) -> str:
        """
        Cluster health status detail code
        """
        return pulumi.get(self, "code")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        Cluster health status detail description
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def severity(self) -> str:
        """
        Cluster health status detail severity
        """
        return pulumi.get(self, "severity")


@pulumi.output_type
class GetClusterMetadataResult(dict):
    def __init__(__self__, *,
                 external_ips: Sequence[str],
                 kube_dns_ip: str,
                 oidc_issuer_url: str):
        """
        :param Sequence[str] external_ips: Cluster external IPs
        :param str kube_dns_ip: Cluster kube DNS IP
        :param str oidc_issuer_url: Cluster OIDC issuer URL
        """
        pulumi.set(__self__, "external_ips", external_ips)
        pulumi.set(__self__, "kube_dns_ip", kube_dns_ip)
        pulumi.set(__self__, "oidc_issuer_url", oidc_issuer_url)

    @property
    @pulumi.getter(name="externalIps")
    def external_ips(self) -> Sequence[str]:
        """
        Cluster external IPs
        """
        return pulumi.get(self, "external_ips")

    @property
    @pulumi.getter(name="kubeDnsIp")
    def kube_dns_ip(self) -> str:
        """
        Cluster kube DNS IP
        """
        return pulumi.get(self, "kube_dns_ip")

    @property
    @pulumi.getter(name="oidcIssuerUrl")
    def oidc_issuer_url(self) -> str:
        """
        Cluster OIDC issuer URL
        """
        return pulumi.get(self, "oidc_issuer_url")


@pulumi.output_type
class GetClusterNodePoolResult(dict):
    def __init__(__self__, *,
                 cloud_provider: str,
                 cluster_id: str,
                 created_at: str,
                 id: str,
                 is_default: bool,
                 max_node_count: int,
                 name: str,
                 node_instance_type: str,
                 supported_astro_machines: Sequence[str],
                 updated_at: str):
        """
        :param str cloud_provider: Node pool cloud provider
        :param str cluster_id: Node pool cluster identifier
        :param str created_at: Node pool creation timestamp
        :param str id: Node pool identifier
        :param bool is_default: Whether the node pool is the default node pool of the cluster
        :param int max_node_count: Node pool maximum node count
        :param str name: Node pool name
        :param str node_instance_type: Node pool node instance type
        :param Sequence[str] supported_astro_machines: Node pool supported Astro machines
        :param str updated_at: Node pool last updated timestamp
        """
        pulumi.set(__self__, "cloud_provider", cloud_provider)
        pulumi.set(__self__, "cluster_id", cluster_id)
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "is_default", is_default)
        pulumi.set(__self__, "max_node_count", max_node_count)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "node_instance_type", node_instance_type)
        pulumi.set(__self__, "supported_astro_machines", supported_astro_machines)
        pulumi.set(__self__, "updated_at", updated_at)

    @property
    @pulumi.getter(name="cloudProvider")
    def cloud_provider(self) -> str:
        """
        Node pool cloud provider
        """
        return pulumi.get(self, "cloud_provider")

    @property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> str:
        """
        Node pool cluster identifier
        """
        return pulumi.get(self, "cluster_id")

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> str:
        """
        Node pool creation timestamp
        """
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Node pool identifier
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isDefault")
    def is_default(self) -> bool:
        """
        Whether the node pool is the default node pool of the cluster
        """
        return pulumi.get(self, "is_default")

    @property
    @pulumi.getter(name="maxNodeCount")
    def max_node_count(self) -> int:
        """
        Node pool maximum node count
        """
        return pulumi.get(self, "max_node_count")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Node pool name
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="nodeInstanceType")
    def node_instance_type(self) -> str:
        """
        Node pool node instance type
        """
        return pulumi.get(self, "node_instance_type")

    @property
    @pulumi.getter(name="supportedAstroMachines")
    def supported_astro_machines(self) -> Sequence[str]:
        """
        Node pool supported Astro machines
        """
        return pulumi.get(self, "supported_astro_machines")

    @property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> str:
        """
        Node pool last updated timestamp
        """
        return pulumi.get(self, "updated_at")


@pulumi.output_type
class GetClusterOptionsClusterOptionResult(dict):
    def __init__(__self__, *,
                 database_instances: Sequence['outputs.GetClusterOptionsClusterOptionDatabaseInstanceResult'],
                 default_database_instance: 'outputs.GetClusterOptionsClusterOptionDefaultDatabaseInstanceResult',
                 default_node_instance: 'outputs.GetClusterOptionsClusterOptionDefaultNodeInstanceResult',
                 default_pod_subnet_range: str,
                 default_region: 'outputs.GetClusterOptionsClusterOptionDefaultRegionResult',
                 default_service_peering_range: str,
                 default_service_subnet_range: str,
                 default_vpc_subnet_range: str,
                 node_count_default: int,
                 node_count_max: int,
                 node_count_min: int,
                 node_instances: Sequence['outputs.GetClusterOptionsClusterOptionNodeInstanceResult'],
                 provider: str,
                 regions: Sequence['outputs.GetClusterOptionsClusterOptionRegionResult']):
        """
        :param Sequence['GetClusterOptionsClusterOptionDatabaseInstanceArgs'] database_instances: ClusterOption database instances
        :param 'GetClusterOptionsClusterOptionDefaultDatabaseInstanceArgs' default_database_instance: ClusterOption default database instance
        :param 'GetClusterOptionsClusterOptionDefaultNodeInstanceArgs' default_node_instance: ClusterOption default node instance
        :param str default_pod_subnet_range: ClusterOption default pod subnet range
        :param 'GetClusterOptionsClusterOptionDefaultRegionArgs' default_region: ClusterOption default region
        :param str default_service_peering_range: ClusterOption default service peering range
        :param str default_service_subnet_range: ClusterOption default service subnet range
        :param str default_vpc_subnet_range: ClusterOption default vps subnet range
        :param int node_count_default: ClusterOption node count default
        :param int node_count_max: ClusterOption node count max
        :param int node_count_min: ClusterOption node count min
        :param Sequence['GetClusterOptionsClusterOptionNodeInstanceArgs'] node_instances: ClusterOption node instances
        :param str provider: ClusterOption provider
        :param Sequence['GetClusterOptionsClusterOptionRegionArgs'] regions: ClusterOption regions
        """
        pulumi.set(__self__, "database_instances", database_instances)
        pulumi.set(__self__, "default_database_instance", default_database_instance)
        pulumi.set(__self__, "default_node_instance", default_node_instance)
        pulumi.set(__self__, "default_pod_subnet_range", default_pod_subnet_range)
        pulumi.set(__self__, "default_region", default_region)
        pulumi.set(__self__, "default_service_peering_range", default_service_peering_range)
        pulumi.set(__self__, "default_service_subnet_range", default_service_subnet_range)
        pulumi.set(__self__, "default_vpc_subnet_range", default_vpc_subnet_range)
        pulumi.set(__self__, "node_count_default", node_count_default)
        pulumi.set(__self__, "node_count_max", node_count_max)
        pulumi.set(__self__, "node_count_min", node_count_min)
        pulumi.set(__self__, "node_instances", node_instances)
        pulumi.set(__self__, "provider", provider)
        pulumi.set(__self__, "regions", regions)

    @property
    @pulumi.getter(name="databaseInstances")
    def database_instances(self) -> Sequence['outputs.GetClusterOptionsClusterOptionDatabaseInstanceResult']:
        """
        ClusterOption database instances
        """
        return pulumi.get(self, "database_instances")

    @property
    @pulumi.getter(name="defaultDatabaseInstance")
    def default_database_instance(self) -> 'outputs.GetClusterOptionsClusterOptionDefaultDatabaseInstanceResult':
        """
        ClusterOption default database instance
        """
        return pulumi.get(self, "default_database_instance")

    @property
    @pulumi.getter(name="defaultNodeInstance")
    def default_node_instance(self) -> 'outputs.GetClusterOptionsClusterOptionDefaultNodeInstanceResult':
        """
        ClusterOption default node instance
        """
        return pulumi.get(self, "default_node_instance")

    @property
    @pulumi.getter(name="defaultPodSubnetRange")
    def default_pod_subnet_range(self) -> str:
        """
        ClusterOption default pod subnet range
        """
        return pulumi.get(self, "default_pod_subnet_range")

    @property
    @pulumi.getter(name="defaultRegion")
    def default_region(self) -> 'outputs.GetClusterOptionsClusterOptionDefaultRegionResult':
        """
        ClusterOption default region
        """
        return pulumi.get(self, "default_region")

    @property
    @pulumi.getter(name="defaultServicePeeringRange")
    def default_service_peering_range(self) -> str:
        """
        ClusterOption default service peering range
        """
        return pulumi.get(self, "default_service_peering_range")

    @property
    @pulumi.getter(name="defaultServiceSubnetRange")
    def default_service_subnet_range(self) -> str:
        """
        ClusterOption default service subnet range
        """
        return pulumi.get(self, "default_service_subnet_range")

    @property
    @pulumi.getter(name="defaultVpcSubnetRange")
    def default_vpc_subnet_range(self) -> str:
        """
        ClusterOption default vps subnet range
        """
        return pulumi.get(self, "default_vpc_subnet_range")

    @property
    @pulumi.getter(name="nodeCountDefault")
    def node_count_default(self) -> int:
        """
        ClusterOption node count default
        """
        return pulumi.get(self, "node_count_default")

    @property
    @pulumi.getter(name="nodeCountMax")
    def node_count_max(self) -> int:
        """
        ClusterOption node count max
        """
        return pulumi.get(self, "node_count_max")

    @property
    @pulumi.getter(name="nodeCountMin")
    def node_count_min(self) -> int:
        """
        ClusterOption node count min
        """
        return pulumi.get(self, "node_count_min")

    @property
    @pulumi.getter(name="nodeInstances")
    def node_instances(self) -> Sequence['outputs.GetClusterOptionsClusterOptionNodeInstanceResult']:
        """
        ClusterOption node instances
        """
        return pulumi.get(self, "node_instances")

    @property
    @pulumi.getter
    def provider(self) -> str:
        """
        ClusterOption provider
        """
        return pulumi.get(self, "provider")

    @property
    @pulumi.getter
    def regions(self) -> Sequence['outputs.GetClusterOptionsClusterOptionRegionResult']:
        """
        ClusterOption regions
        """
        return pulumi.get(self, "regions")


@pulumi.output_type
class GetClusterOptionsClusterOptionDatabaseInstanceResult(dict):
    def __init__(__self__, *,
                 cpu: int,
                 memory: str,
                 name: str):
        """
        :param int cpu: Provider instance cpu
        :param str memory: Provider instance memory
        :param str name: Provider instance name
        """
        pulumi.set(__self__, "cpu", cpu)
        pulumi.set(__self__, "memory", memory)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def cpu(self) -> int:
        """
        Provider instance cpu
        """
        return pulumi.get(self, "cpu")

    @property
    @pulumi.getter
    def memory(self) -> str:
        """
        Provider instance memory
        """
        return pulumi.get(self, "memory")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Provider instance name
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetClusterOptionsClusterOptionDefaultDatabaseInstanceResult(dict):
    def __init__(__self__, *,
                 cpu: int,
                 memory: str,
                 name: str):
        """
        :param int cpu: Provider instance cpu
        :param str memory: Provider instance memory
        :param str name: Provider instance name
        """
        pulumi.set(__self__, "cpu", cpu)
        pulumi.set(__self__, "memory", memory)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def cpu(self) -> int:
        """
        Provider instance cpu
        """
        return pulumi.get(self, "cpu")

    @property
    @pulumi.getter
    def memory(self) -> str:
        """
        Provider instance memory
        """
        return pulumi.get(self, "memory")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Provider instance name
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetClusterOptionsClusterOptionDefaultNodeInstanceResult(dict):
    def __init__(__self__, *,
                 cpu: int,
                 memory: str,
                 name: str):
        """
        :param int cpu: Provider instance cpu
        :param str memory: Provider instance memory
        :param str name: Provider instance name
        """
        pulumi.set(__self__, "cpu", cpu)
        pulumi.set(__self__, "memory", memory)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def cpu(self) -> int:
        """
        Provider instance cpu
        """
        return pulumi.get(self, "cpu")

    @property
    @pulumi.getter
    def memory(self) -> str:
        """
        Provider instance memory
        """
        return pulumi.get(self, "memory")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Provider instance name
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetClusterOptionsClusterOptionDefaultRegionResult(dict):
    def __init__(__self__, *,
                 banned_instances: Sequence[str],
                 limited: bool,
                 name: str):
        """
        :param Sequence[str] banned_instances: Region banned instances
        :param bool limited: Region is limited bool
        :param str name: Region is limited bool
        """
        pulumi.set(__self__, "banned_instances", banned_instances)
        pulumi.set(__self__, "limited", limited)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="bannedInstances")
    def banned_instances(self) -> Sequence[str]:
        """
        Region banned instances
        """
        return pulumi.get(self, "banned_instances")

    @property
    @pulumi.getter
    def limited(self) -> bool:
        """
        Region is limited bool
        """
        return pulumi.get(self, "limited")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Region is limited bool
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetClusterOptionsClusterOptionNodeInstanceResult(dict):
    def __init__(__self__, *,
                 cpu: int,
                 memory: str,
                 name: str):
        """
        :param int cpu: Provider instance cpu
        :param str memory: Provider instance memory
        :param str name: Provider instance name
        """
        pulumi.set(__self__, "cpu", cpu)
        pulumi.set(__self__, "memory", memory)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def cpu(self) -> int:
        """
        Provider instance cpu
        """
        return pulumi.get(self, "cpu")

    @property
    @pulumi.getter
    def memory(self) -> str:
        """
        Provider instance memory
        """
        return pulumi.get(self, "memory")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Provider instance name
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetClusterOptionsClusterOptionRegionResult(dict):
    def __init__(__self__, *,
                 banned_instances: Sequence[str],
                 limited: bool,
                 name: str):
        """
        :param Sequence[str] banned_instances: Region banned instances
        :param bool limited: Region is limited bool
        :param str name: Region is limited bool
        """
        pulumi.set(__self__, "banned_instances", banned_instances)
        pulumi.set(__self__, "limited", limited)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="bannedInstances")
    def banned_instances(self) -> Sequence[str]:
        """
        Region banned instances
        """
        return pulumi.get(self, "banned_instances")

    @property
    @pulumi.getter
    def limited(self) -> bool:
        """
        Region is limited bool
        """
        return pulumi.get(self, "limited")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Region is limited bool
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetClusterTagResult(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        """
        :param str key: Cluster tag key
        :param str value: Cluster tag value
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        Cluster tag key
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Cluster tag value
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetClustersClusterResult(dict):
    def __init__(__self__, *,
                 cloud_provider: str,
                 created_at: str,
                 db_instance_type: str,
                 health_status: 'outputs.GetClustersClusterHealthStatusResult',
                 id: str,
                 is_limited: bool,
                 metadata: 'outputs.GetClustersClusterMetadataResult',
                 name: str,
                 node_pools: Sequence['outputs.GetClustersClusterNodePoolResult'],
                 pod_subnet_range: str,
                 provider_account: str,
                 region: str,
                 service_peering_range: str,
                 service_subnet_range: str,
                 status: str,
                 tags: Sequence['outputs.GetClustersClusterTagResult'],
                 tenant_id: str,
                 type: str,
                 updated_at: str,
                 vpc_subnet_range: str,
                 workspace_ids: Sequence[str]):
        """
        :param str cloud_provider: Cluster cloud provider
        :param str created_at: Cluster creation timestamp
        :param str db_instance_type: Cluster database instance type
        :param 'GetClustersClusterHealthStatusArgs' health_status: Cluster health status
        :param str id: Cluster identifier
        :param bool is_limited: Whether the cluster is limited
        :param 'GetClustersClusterMetadataArgs' metadata: Cluster metadata
        :param str name: Cluster name
        :param Sequence['GetClustersClusterNodePoolArgs'] node_pools: Cluster node pools
        :param str pod_subnet_range: Cluster pod subnet range
        :param str provider_account: Cluster provider account
        :param str region: Cluster region
        :param str service_peering_range: Cluster service peering range
        :param str service_subnet_range: Cluster service subnet range
        :param str status: Cluster status
        :param Sequence['GetClustersClusterTagArgs'] tags: Cluster tags
        :param str tenant_id: Cluster tenant ID
        :param str type: Cluster type
        :param str updated_at: Cluster last updated timestamp
        :param str vpc_subnet_range: Cluster VPC subnet range
        :param Sequence[str] workspace_ids: Cluster workspace IDs
        """
        pulumi.set(__self__, "cloud_provider", cloud_provider)
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "db_instance_type", db_instance_type)
        pulumi.set(__self__, "health_status", health_status)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "is_limited", is_limited)
        pulumi.set(__self__, "metadata", metadata)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "node_pools", node_pools)
        pulumi.set(__self__, "pod_subnet_range", pod_subnet_range)
        pulumi.set(__self__, "provider_account", provider_account)
        pulumi.set(__self__, "region", region)
        pulumi.set(__self__, "service_peering_range", service_peering_range)
        pulumi.set(__self__, "service_subnet_range", service_subnet_range)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "tags", tags)
        pulumi.set(__self__, "tenant_id", tenant_id)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "updated_at", updated_at)
        pulumi.set(__self__, "vpc_subnet_range", vpc_subnet_range)
        pulumi.set(__self__, "workspace_ids", workspace_ids)

    @property
    @pulumi.getter(name="cloudProvider")
    def cloud_provider(self) -> str:
        """
        Cluster cloud provider
        """
        return pulumi.get(self, "cloud_provider")

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> str:
        """
        Cluster creation timestamp
        """
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter(name="dbInstanceType")
    def db_instance_type(self) -> str:
        """
        Cluster database instance type
        """
        return pulumi.get(self, "db_instance_type")

    @property
    @pulumi.getter(name="healthStatus")
    def health_status(self) -> 'outputs.GetClustersClusterHealthStatusResult':
        """
        Cluster health status
        """
        return pulumi.get(self, "health_status")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Cluster identifier
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isLimited")
    def is_limited(self) -> bool:
        """
        Whether the cluster is limited
        """
        return pulumi.get(self, "is_limited")

    @property
    @pulumi.getter
    def metadata(self) -> 'outputs.GetClustersClusterMetadataResult':
        """
        Cluster metadata
        """
        return pulumi.get(self, "metadata")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Cluster name
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="nodePools")
    def node_pools(self) -> Sequence['outputs.GetClustersClusterNodePoolResult']:
        """
        Cluster node pools
        """
        return pulumi.get(self, "node_pools")

    @property
    @pulumi.getter(name="podSubnetRange")
    def pod_subnet_range(self) -> str:
        """
        Cluster pod subnet range
        """
        return pulumi.get(self, "pod_subnet_range")

    @property
    @pulumi.getter(name="providerAccount")
    def provider_account(self) -> str:
        """
        Cluster provider account
        """
        return pulumi.get(self, "provider_account")

    @property
    @pulumi.getter
    def region(self) -> str:
        """
        Cluster region
        """
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="servicePeeringRange")
    def service_peering_range(self) -> str:
        """
        Cluster service peering range
        """
        return pulumi.get(self, "service_peering_range")

    @property
    @pulumi.getter(name="serviceSubnetRange")
    def service_subnet_range(self) -> str:
        """
        Cluster service subnet range
        """
        return pulumi.get(self, "service_subnet_range")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        Cluster status
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def tags(self) -> Sequence['outputs.GetClustersClusterTagResult']:
        """
        Cluster tags
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="tenantId")
    def tenant_id(self) -> str:
        """
        Cluster tenant ID
        """
        return pulumi.get(self, "tenant_id")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Cluster type
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> str:
        """
        Cluster last updated timestamp
        """
        return pulumi.get(self, "updated_at")

    @property
    @pulumi.getter(name="vpcSubnetRange")
    def vpc_subnet_range(self) -> str:
        """
        Cluster VPC subnet range
        """
        return pulumi.get(self, "vpc_subnet_range")

    @property
    @pulumi.getter(name="workspaceIds")
    def workspace_ids(self) -> Sequence[str]:
        """
        Cluster workspace IDs
        """
        return pulumi.get(self, "workspace_ids")


@pulumi.output_type
class GetClustersClusterHealthStatusResult(dict):
    def __init__(__self__, *,
                 details: Sequence['outputs.GetClustersClusterHealthStatusDetailResult'],
                 value: str):
        """
        :param Sequence['GetClustersClusterHealthStatusDetailArgs'] details: Cluster health status details
        :param str value: Cluster health status value
        """
        pulumi.set(__self__, "details", details)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def details(self) -> Sequence['outputs.GetClustersClusterHealthStatusDetailResult']:
        """
        Cluster health status details
        """
        return pulumi.get(self, "details")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Cluster health status value
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetClustersClusterHealthStatusDetailResult(dict):
    def __init__(__self__, *,
                 code: str,
                 description: str,
                 severity: str):
        """
        :param str code: Cluster health status detail code
        :param str description: Cluster health status detail description
        :param str severity: Cluster health status detail severity
        """
        pulumi.set(__self__, "code", code)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "severity", severity)

    @property
    @pulumi.getter
    def code(self) -> str:
        """
        Cluster health status detail code
        """
        return pulumi.get(self, "code")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        Cluster health status detail description
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def severity(self) -> str:
        """
        Cluster health status detail severity
        """
        return pulumi.get(self, "severity")


@pulumi.output_type
class GetClustersClusterMetadataResult(dict):
    def __init__(__self__, *,
                 external_ips: Sequence[str],
                 kube_dns_ip: str,
                 oidc_issuer_url: str):
        """
        :param Sequence[str] external_ips: Cluster external IPs
        :param str kube_dns_ip: Cluster kube DNS IP
        :param str oidc_issuer_url: Cluster OIDC issuer URL
        """
        pulumi.set(__self__, "external_ips", external_ips)
        pulumi.set(__self__, "kube_dns_ip", kube_dns_ip)
        pulumi.set(__self__, "oidc_issuer_url", oidc_issuer_url)

    @property
    @pulumi.getter(name="externalIps")
    def external_ips(self) -> Sequence[str]:
        """
        Cluster external IPs
        """
        return pulumi.get(self, "external_ips")

    @property
    @pulumi.getter(name="kubeDnsIp")
    def kube_dns_ip(self) -> str:
        """
        Cluster kube DNS IP
        """
        return pulumi.get(self, "kube_dns_ip")

    @property
    @pulumi.getter(name="oidcIssuerUrl")
    def oidc_issuer_url(self) -> str:
        """
        Cluster OIDC issuer URL
        """
        return pulumi.get(self, "oidc_issuer_url")


@pulumi.output_type
class GetClustersClusterNodePoolResult(dict):
    def __init__(__self__, *,
                 cloud_provider: str,
                 cluster_id: str,
                 created_at: str,
                 id: str,
                 is_default: bool,
                 max_node_count: int,
                 name: str,
                 node_instance_type: str,
                 supported_astro_machines: Sequence[str],
                 updated_at: str):
        """
        :param str cloud_provider: Node pool cloud provider
        :param str cluster_id: Node pool cluster identifier
        :param str created_at: Node pool creation timestamp
        :param str id: Node pool identifier
        :param bool is_default: Whether the node pool is the default node pool of the cluster
        :param int max_node_count: Node pool maximum node count
        :param str name: Node pool name
        :param str node_instance_type: Node pool node instance type
        :param Sequence[str] supported_astro_machines: Node pool supported Astro machines
        :param str updated_at: Node pool last updated timestamp
        """
        pulumi.set(__self__, "cloud_provider", cloud_provider)
        pulumi.set(__self__, "cluster_id", cluster_id)
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "is_default", is_default)
        pulumi.set(__self__, "max_node_count", max_node_count)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "node_instance_type", node_instance_type)
        pulumi.set(__self__, "supported_astro_machines", supported_astro_machines)
        pulumi.set(__self__, "updated_at", updated_at)

    @property
    @pulumi.getter(name="cloudProvider")
    def cloud_provider(self) -> str:
        """
        Node pool cloud provider
        """
        return pulumi.get(self, "cloud_provider")

    @property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> str:
        """
        Node pool cluster identifier
        """
        return pulumi.get(self, "cluster_id")

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> str:
        """
        Node pool creation timestamp
        """
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Node pool identifier
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isDefault")
    def is_default(self) -> bool:
        """
        Whether the node pool is the default node pool of the cluster
        """
        return pulumi.get(self, "is_default")

    @property
    @pulumi.getter(name="maxNodeCount")
    def max_node_count(self) -> int:
        """
        Node pool maximum node count
        """
        return pulumi.get(self, "max_node_count")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Node pool name
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="nodeInstanceType")
    def node_instance_type(self) -> str:
        """
        Node pool node instance type
        """
        return pulumi.get(self, "node_instance_type")

    @property
    @pulumi.getter(name="supportedAstroMachines")
    def supported_astro_machines(self) -> Sequence[str]:
        """
        Node pool supported Astro machines
        """
        return pulumi.get(self, "supported_astro_machines")

    @property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> str:
        """
        Node pool last updated timestamp
        """
        return pulumi.get(self, "updated_at")


@pulumi.output_type
class GetClustersClusterTagResult(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        """
        :param str key: Cluster tag key
        :param str value: Cluster tag value
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        Cluster tag key
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Cluster tag value
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDeploymentCreatedByResult(dict):
    def __init__(__self__, *,
                 api_token_name: str,
                 avatar_url: str,
                 full_name: str,
                 id: str,
                 subject_type: str,
                 username: str):
        pulumi.set(__self__, "api_token_name", api_token_name)
        pulumi.set(__self__, "avatar_url", avatar_url)
        pulumi.set(__self__, "full_name", full_name)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "subject_type", subject_type)
        pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter(name="apiTokenName")
    def api_token_name(self) -> str:
        return pulumi.get(self, "api_token_name")

    @property
    @pulumi.getter(name="avatarUrl")
    def avatar_url(self) -> str:
        return pulumi.get(self, "avatar_url")

    @property
    @pulumi.getter(name="fullName")
    def full_name(self) -> str:
        return pulumi.get(self, "full_name")

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="subjectType")
    def subject_type(self) -> str:
        return pulumi.get(self, "subject_type")

    @property
    @pulumi.getter
    def username(self) -> str:
        return pulumi.get(self, "username")


@pulumi.output_type
class GetDeploymentEnvironmentVariableResult(dict):
    def __init__(__self__, *,
                 is_secret: bool,
                 key: str,
                 updated_at: str,
                 value: str):
        """
        :param bool is_secret: Whether Environment variable is a secret
        :param str key: Environment variable key
        :param str updated_at: Environment variable last updated timestamp
        :param str value: Environment variable value
        """
        pulumi.set(__self__, "is_secret", is_secret)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "updated_at", updated_at)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="isSecret")
    def is_secret(self) -> bool:
        """
        Whether Environment variable is a secret
        """
        return pulumi.get(self, "is_secret")

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        Environment variable key
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> str:
        """
        Environment variable last updated timestamp
        """
        return pulumi.get(self, "updated_at")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Environment variable value
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDeploymentOptionsResourceQuotasResult(dict):
    def __init__(__self__, *,
                 default_pod_size: 'outputs.GetDeploymentOptionsResourceQuotasDefaultPodSizeResult',
                 resource_quota: 'outputs.GetDeploymentOptionsResourceQuotasResourceQuotaResult'):
        """
        :param 'GetDeploymentOptionsResourceQuotasDefaultPodSizeArgs' default_pod_size: Default pod size options
        :param 'GetDeploymentOptionsResourceQuotasResourceQuotaArgs' resource_quota: Resource quota options
        """
        pulumi.set(__self__, "default_pod_size", default_pod_size)
        pulumi.set(__self__, "resource_quota", resource_quota)

    @property
    @pulumi.getter(name="defaultPodSize")
    def default_pod_size(self) -> 'outputs.GetDeploymentOptionsResourceQuotasDefaultPodSizeResult':
        """
        Default pod size options
        """
        return pulumi.get(self, "default_pod_size")

    @property
    @pulumi.getter(name="resourceQuota")
    def resource_quota(self) -> 'outputs.GetDeploymentOptionsResourceQuotasResourceQuotaResult':
        """
        Resource quota options
        """
        return pulumi.get(self, "resource_quota")


@pulumi.output_type
class GetDeploymentOptionsResourceQuotasDefaultPodSizeResult(dict):
    def __init__(__self__, *,
                 cpu: 'outputs.GetDeploymentOptionsResourceQuotasDefaultPodSizeCpuResult',
                 memory: 'outputs.GetDeploymentOptionsResourceQuotasDefaultPodSizeMemoryResult'):
        """
        :param 'GetDeploymentOptionsResourceQuotasDefaultPodSizeCpuArgs' cpu: CPU resource range
        :param 'GetDeploymentOptionsResourceQuotasDefaultPodSizeMemoryArgs' memory: Memory resource range
        """
        pulumi.set(__self__, "cpu", cpu)
        pulumi.set(__self__, "memory", memory)

    @property
    @pulumi.getter
    def cpu(self) -> 'outputs.GetDeploymentOptionsResourceQuotasDefaultPodSizeCpuResult':
        """
        CPU resource range
        """
        return pulumi.get(self, "cpu")

    @property
    @pulumi.getter
    def memory(self) -> 'outputs.GetDeploymentOptionsResourceQuotasDefaultPodSizeMemoryResult':
        """
        Memory resource range
        """
        return pulumi.get(self, "memory")


@pulumi.output_type
class GetDeploymentOptionsResourceQuotasDefaultPodSizeCpuResult(dict):
    def __init__(__self__, *,
                 ceiling: str,
                 default: str,
                 floor: str):
        """
        :param str ceiling: Resource range ceiling
        :param str default: Resource range default
        :param str floor: Resource range floor
        """
        pulumi.set(__self__, "ceiling", ceiling)
        pulumi.set(__self__, "default", default)
        pulumi.set(__self__, "floor", floor)

    @property
    @pulumi.getter
    def ceiling(self) -> str:
        """
        Resource range ceiling
        """
        return pulumi.get(self, "ceiling")

    @property
    @pulumi.getter
    def default(self) -> str:
        """
        Resource range default
        """
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def floor(self) -> str:
        """
        Resource range floor
        """
        return pulumi.get(self, "floor")


@pulumi.output_type
class GetDeploymentOptionsResourceQuotasDefaultPodSizeMemoryResult(dict):
    def __init__(__self__, *,
                 ceiling: str,
                 default: str,
                 floor: str):
        """
        :param str ceiling: Resource range ceiling
        :param str default: Resource range default
        :param str floor: Resource range floor
        """
        pulumi.set(__self__, "ceiling", ceiling)
        pulumi.set(__self__, "default", default)
        pulumi.set(__self__, "floor", floor)

    @property
    @pulumi.getter
    def ceiling(self) -> str:
        """
        Resource range ceiling
        """
        return pulumi.get(self, "ceiling")

    @property
    @pulumi.getter
    def default(self) -> str:
        """
        Resource range default
        """
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def floor(self) -> str:
        """
        Resource range floor
        """
        return pulumi.get(self, "floor")


@pulumi.output_type
class GetDeploymentOptionsResourceQuotasResourceQuotaResult(dict):
    def __init__(__self__, *,
                 cpu: 'outputs.GetDeploymentOptionsResourceQuotasResourceQuotaCpuResult',
                 memory: 'outputs.GetDeploymentOptionsResourceQuotasResourceQuotaMemoryResult'):
        """
        :param 'GetDeploymentOptionsResourceQuotasResourceQuotaCpuArgs' cpu: CPU resource range
        :param 'GetDeploymentOptionsResourceQuotasResourceQuotaMemoryArgs' memory: Memory resource range
        """
        pulumi.set(__self__, "cpu", cpu)
        pulumi.set(__self__, "memory", memory)

    @property
    @pulumi.getter
    def cpu(self) -> 'outputs.GetDeploymentOptionsResourceQuotasResourceQuotaCpuResult':
        """
        CPU resource range
        """
        return pulumi.get(self, "cpu")

    @property
    @pulumi.getter
    def memory(self) -> 'outputs.GetDeploymentOptionsResourceQuotasResourceQuotaMemoryResult':
        """
        Memory resource range
        """
        return pulumi.get(self, "memory")


@pulumi.output_type
class GetDeploymentOptionsResourceQuotasResourceQuotaCpuResult(dict):
    def __init__(__self__, *,
                 ceiling: str,
                 default: str,
                 floor: str):
        """
        :param str ceiling: Resource range ceiling
        :param str default: Resource range default
        :param str floor: Resource range floor
        """
        pulumi.set(__self__, "ceiling", ceiling)
        pulumi.set(__self__, "default", default)
        pulumi.set(__self__, "floor", floor)

    @property
    @pulumi.getter
    def ceiling(self) -> str:
        """
        Resource range ceiling
        """
        return pulumi.get(self, "ceiling")

    @property
    @pulumi.getter
    def default(self) -> str:
        """
        Resource range default
        """
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def floor(self) -> str:
        """
        Resource range floor
        """
        return pulumi.get(self, "floor")


@pulumi.output_type
class GetDeploymentOptionsResourceQuotasResourceQuotaMemoryResult(dict):
    def __init__(__self__, *,
                 ceiling: str,
                 default: str,
                 floor: str):
        """
        :param str ceiling: Resource range ceiling
        :param str default: Resource range default
        :param str floor: Resource range floor
        """
        pulumi.set(__self__, "ceiling", ceiling)
        pulumi.set(__self__, "default", default)
        pulumi.set(__self__, "floor", floor)

    @property
    @pulumi.getter
    def ceiling(self) -> str:
        """
        Resource range ceiling
        """
        return pulumi.get(self, "ceiling")

    @property
    @pulumi.getter
    def default(self) -> str:
        """
        Resource range default
        """
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def floor(self) -> str:
        """
        Resource range floor
        """
        return pulumi.get(self, "floor")


@pulumi.output_type
class GetDeploymentOptionsRuntimeReleaseResult(dict):
    def __init__(__self__, *,
                 airflow_database_migration: bool,
                 airflow_version: str,
                 channel: str,
                 release_date: str,
                 stellar_database_migration: bool,
                 version: str):
        pulumi.set(__self__, "airflow_database_migration", airflow_database_migration)
        pulumi.set(__self__, "airflow_version", airflow_version)
        pulumi.set(__self__, "channel", channel)
        pulumi.set(__self__, "release_date", release_date)
        pulumi.set(__self__, "stellar_database_migration", stellar_database_migration)
        pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="airflowDatabaseMigration")
    def airflow_database_migration(self) -> bool:
        return pulumi.get(self, "airflow_database_migration")

    @property
    @pulumi.getter(name="airflowVersion")
    def airflow_version(self) -> str:
        return pulumi.get(self, "airflow_version")

    @property
    @pulumi.getter
    def channel(self) -> str:
        return pulumi.get(self, "channel")

    @property
    @pulumi.getter(name="releaseDate")
    def release_date(self) -> str:
        return pulumi.get(self, "release_date")

    @property
    @pulumi.getter(name="stellarDatabaseMigration")
    def stellar_database_migration(self) -> bool:
        return pulumi.get(self, "stellar_database_migration")

    @property
    @pulumi.getter
    def version(self) -> str:
        return pulumi.get(self, "version")


@pulumi.output_type
class GetDeploymentOptionsSchedulerMachineResult(dict):
    def __init__(__self__, *,
                 name: str,
                 spec: 'outputs.GetDeploymentOptionsSchedulerMachineSpecResult'):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "spec", spec)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def spec(self) -> 'outputs.GetDeploymentOptionsSchedulerMachineSpecResult':
        return pulumi.get(self, "spec")


@pulumi.output_type
class GetDeploymentOptionsSchedulerMachineSpecResult(dict):
    def __init__(__self__, *,
                 concurrency: str,
                 cpu: str,
                 ephemeral_storage: str,
                 memory: str):
        pulumi.set(__self__, "concurrency", concurrency)
        pulumi.set(__self__, "cpu", cpu)
        pulumi.set(__self__, "ephemeral_storage", ephemeral_storage)
        pulumi.set(__self__, "memory", memory)

    @property
    @pulumi.getter
    def concurrency(self) -> str:
        return pulumi.get(self, "concurrency")

    @property
    @pulumi.getter
    def cpu(self) -> str:
        return pulumi.get(self, "cpu")

    @property
    @pulumi.getter(name="ephemeralStorage")
    def ephemeral_storage(self) -> str:
        return pulumi.get(self, "ephemeral_storage")

    @property
    @pulumi.getter
    def memory(self) -> str:
        return pulumi.get(self, "memory")


@pulumi.output_type
class GetDeploymentOptionsWorkerMachineResult(dict):
    def __init__(__self__, *,
                 concurrency: 'outputs.GetDeploymentOptionsWorkerMachineConcurrencyResult',
                 name: str,
                 spec: 'outputs.GetDeploymentOptionsWorkerMachineSpecResult'):
        pulumi.set(__self__, "concurrency", concurrency)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "spec", spec)

    @property
    @pulumi.getter
    def concurrency(self) -> 'outputs.GetDeploymentOptionsWorkerMachineConcurrencyResult':
        return pulumi.get(self, "concurrency")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def spec(self) -> 'outputs.GetDeploymentOptionsWorkerMachineSpecResult':
        return pulumi.get(self, "spec")


@pulumi.output_type
class GetDeploymentOptionsWorkerMachineConcurrencyResult(dict):
    def __init__(__self__, *,
                 ceiling: str,
                 default: str,
                 floor: str):
        pulumi.set(__self__, "ceiling", ceiling)
        pulumi.set(__self__, "default", default)
        pulumi.set(__self__, "floor", floor)

    @property
    @pulumi.getter
    def ceiling(self) -> str:
        return pulumi.get(self, "ceiling")

    @property
    @pulumi.getter
    def default(self) -> str:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def floor(self) -> str:
        return pulumi.get(self, "floor")


@pulumi.output_type
class GetDeploymentOptionsWorkerMachineSpecResult(dict):
    def __init__(__self__, *,
                 concurrency: str,
                 cpu: str,
                 ephemeral_storage: str,
                 memory: str):
        pulumi.set(__self__, "concurrency", concurrency)
        pulumi.set(__self__, "cpu", cpu)
        pulumi.set(__self__, "ephemeral_storage", ephemeral_storage)
        pulumi.set(__self__, "memory", memory)

    @property
    @pulumi.getter
    def concurrency(self) -> str:
        return pulumi.get(self, "concurrency")

    @property
    @pulumi.getter
    def cpu(self) -> str:
        return pulumi.get(self, "cpu")

    @property
    @pulumi.getter(name="ephemeralStorage")
    def ephemeral_storage(self) -> str:
        return pulumi.get(self, "ephemeral_storage")

    @property
    @pulumi.getter
    def memory(self) -> str:
        return pulumi.get(self, "memory")


@pulumi.output_type
class GetDeploymentOptionsWorkerQueuesResult(dict):
    def __init__(__self__, *,
                 max_workers: 'outputs.GetDeploymentOptionsWorkerQueuesMaxWorkersResult',
                 min_workers: 'outputs.GetDeploymentOptionsWorkerQueuesMinWorkersResult',
                 worker_concurrency: 'outputs.GetDeploymentOptionsWorkerQueuesWorkerConcurrencyResult'):
        """
        :param 'GetDeploymentOptionsWorkerQueuesMaxWorkersArgs' max_workers: Worker queue maximum workers
        :param 'GetDeploymentOptionsWorkerQueuesMinWorkersArgs' min_workers: Worker queue minimum workers
        :param 'GetDeploymentOptionsWorkerQueuesWorkerConcurrencyArgs' worker_concurrency: Worker queue worker concurrency
        """
        pulumi.set(__self__, "max_workers", max_workers)
        pulumi.set(__self__, "min_workers", min_workers)
        pulumi.set(__self__, "worker_concurrency", worker_concurrency)

    @property
    @pulumi.getter(name="maxWorkers")
    def max_workers(self) -> 'outputs.GetDeploymentOptionsWorkerQueuesMaxWorkersResult':
        """
        Worker queue maximum workers
        """
        return pulumi.get(self, "max_workers")

    @property
    @pulumi.getter(name="minWorkers")
    def min_workers(self) -> 'outputs.GetDeploymentOptionsWorkerQueuesMinWorkersResult':
        """
        Worker queue minimum workers
        """
        return pulumi.get(self, "min_workers")

    @property
    @pulumi.getter(name="workerConcurrency")
    def worker_concurrency(self) -> 'outputs.GetDeploymentOptionsWorkerQueuesWorkerConcurrencyResult':
        """
        Worker queue worker concurrency
        """
        return pulumi.get(self, "worker_concurrency")


@pulumi.output_type
class GetDeploymentOptionsWorkerQueuesMaxWorkersResult(dict):
    def __init__(__self__, *,
                 ceiling: str,
                 default: str,
                 floor: str):
        """
        :param str ceiling: Resource range ceiling
        :param str default: Resource range default
        :param str floor: Resource range floor
        """
        pulumi.set(__self__, "ceiling", ceiling)
        pulumi.set(__self__, "default", default)
        pulumi.set(__self__, "floor", floor)

    @property
    @pulumi.getter
    def ceiling(self) -> str:
        """
        Resource range ceiling
        """
        return pulumi.get(self, "ceiling")

    @property
    @pulumi.getter
    def default(self) -> str:
        """
        Resource range default
        """
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def floor(self) -> str:
        """
        Resource range floor
        """
        return pulumi.get(self, "floor")


@pulumi.output_type
class GetDeploymentOptionsWorkerQueuesMinWorkersResult(dict):
    def __init__(__self__, *,
                 ceiling: str,
                 default: str,
                 floor: str):
        """
        :param str ceiling: Resource range ceiling
        :param str default: Resource range default
        :param str floor: Resource range floor
        """
        pulumi.set(__self__, "ceiling", ceiling)
        pulumi.set(__self__, "default", default)
        pulumi.set(__self__, "floor", floor)

    @property
    @pulumi.getter
    def ceiling(self) -> str:
        """
        Resource range ceiling
        """
        return pulumi.get(self, "ceiling")

    @property
    @pulumi.getter
    def default(self) -> str:
        """
        Resource range default
        """
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def floor(self) -> str:
        """
        Resource range floor
        """
        return pulumi.get(self, "floor")


@pulumi.output_type
class GetDeploymentOptionsWorkerQueuesWorkerConcurrencyResult(dict):
    def __init__(__self__, *,
                 ceiling: str,
                 default: str,
                 floor: str):
        """
        :param str ceiling: Resource range ceiling
        :param str default: Resource range default
        :param str floor: Resource range floor
        """
        pulumi.set(__self__, "ceiling", ceiling)
        pulumi.set(__self__, "default", default)
        pulumi.set(__self__, "floor", floor)

    @property
    @pulumi.getter
    def ceiling(self) -> str:
        """
        Resource range ceiling
        """
        return pulumi.get(self, "ceiling")

    @property
    @pulumi.getter
    def default(self) -> str:
        """
        Resource range default
        """
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def floor(self) -> str:
        """
        Resource range floor
        """
        return pulumi.get(self, "floor")


@pulumi.output_type
class GetDeploymentOptionsWorkloadIdentityOptionResult(dict):
    def __init__(__self__, *,
                 label: str,
                 role: str):
        pulumi.set(__self__, "label", label)
        pulumi.set(__self__, "role", role)

    @property
    @pulumi.getter
    def label(self) -> str:
        return pulumi.get(self, "label")

    @property
    @pulumi.getter
    def role(self) -> str:
        return pulumi.get(self, "role")


@pulumi.output_type
class GetDeploymentScalingSpecResult(dict):
    def __init__(__self__, *,
                 hibernation_spec: 'outputs.GetDeploymentScalingSpecHibernationSpecResult'):
        pulumi.set(__self__, "hibernation_spec", hibernation_spec)

    @property
    @pulumi.getter(name="hibernationSpec")
    def hibernation_spec(self) -> 'outputs.GetDeploymentScalingSpecHibernationSpecResult':
        return pulumi.get(self, "hibernation_spec")


@pulumi.output_type
class GetDeploymentScalingSpecHibernationSpecResult(dict):
    def __init__(__self__, *,
                 override: 'outputs.GetDeploymentScalingSpecHibernationSpecOverrideResult',
                 schedules: Sequence['outputs.GetDeploymentScalingSpecHibernationSpecScheduleResult']):
        pulumi.set(__self__, "override", override)
        pulumi.set(__self__, "schedules", schedules)

    @property
    @pulumi.getter
    def override(self) -> 'outputs.GetDeploymentScalingSpecHibernationSpecOverrideResult':
        return pulumi.get(self, "override")

    @property
    @pulumi.getter
    def schedules(self) -> Sequence['outputs.GetDeploymentScalingSpecHibernationSpecScheduleResult']:
        return pulumi.get(self, "schedules")


@pulumi.output_type
class GetDeploymentScalingSpecHibernationSpecOverrideResult(dict):
    def __init__(__self__, *,
                 is_active: bool,
                 is_hibernating: bool,
                 override_until: str):
        """
        :param bool is_active: Whether the override is active
        :param bool is_hibernating: Whether the override is hibernating
        :param str override_until: Time until the override is active
        """
        pulumi.set(__self__, "is_active", is_active)
        pulumi.set(__self__, "is_hibernating", is_hibernating)
        pulumi.set(__self__, "override_until", override_until)

    @property
    @pulumi.getter(name="isActive")
    def is_active(self) -> bool:
        """
        Whether the override is active
        """
        return pulumi.get(self, "is_active")

    @property
    @pulumi.getter(name="isHibernating")
    def is_hibernating(self) -> bool:
        """
        Whether the override is hibernating
        """
        return pulumi.get(self, "is_hibernating")

    @property
    @pulumi.getter(name="overrideUntil")
    def override_until(self) -> str:
        """
        Time until the override is active
        """
        return pulumi.get(self, "override_until")


@pulumi.output_type
class GetDeploymentScalingSpecHibernationSpecScheduleResult(dict):
    def __init__(__self__, *,
                 description: str,
                 hibernate_at_cron: str,
                 is_enabled: bool,
                 wake_at_cron: str):
        """
        :param str description: Description of the schedule
        :param str hibernate_at_cron: Cron expression for hibernation
        :param bool is_enabled: Whether the schedule is enabled
        :param str wake_at_cron: Cron expression for waking
        """
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "hibernate_at_cron", hibernate_at_cron)
        pulumi.set(__self__, "is_enabled", is_enabled)
        pulumi.set(__self__, "wake_at_cron", wake_at_cron)

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        Description of the schedule
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="hibernateAtCron")
    def hibernate_at_cron(self) -> str:
        """
        Cron expression for hibernation
        """
        return pulumi.get(self, "hibernate_at_cron")

    @property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> bool:
        """
        Whether the schedule is enabled
        """
        return pulumi.get(self, "is_enabled")

    @property
    @pulumi.getter(name="wakeAtCron")
    def wake_at_cron(self) -> str:
        """
        Cron expression for waking
        """
        return pulumi.get(self, "wake_at_cron")


@pulumi.output_type
class GetDeploymentScalingStatusResult(dict):
    def __init__(__self__, *,
                 hibernation_status: 'outputs.GetDeploymentScalingStatusHibernationStatusResult'):
        pulumi.set(__self__, "hibernation_status", hibernation_status)

    @property
    @pulumi.getter(name="hibernationStatus")
    def hibernation_status(self) -> 'outputs.GetDeploymentScalingStatusHibernationStatusResult':
        return pulumi.get(self, "hibernation_status")


@pulumi.output_type
class GetDeploymentScalingStatusHibernationStatusResult(dict):
    def __init__(__self__, *,
                 is_hibernating: bool,
                 next_event_at: str,
                 next_event_type: str,
                 reason: str):
        """
        :param bool is_hibernating: Whether the deployment is hibernating
        :param str next_event_at: Time of the next event
        :param str next_event_type: Type of the next event
        :param str reason: Reason for the current state
        """
        pulumi.set(__self__, "is_hibernating", is_hibernating)
        pulumi.set(__self__, "next_event_at", next_event_at)
        pulumi.set(__self__, "next_event_type", next_event_type)
        pulumi.set(__self__, "reason", reason)

    @property
    @pulumi.getter(name="isHibernating")
    def is_hibernating(self) -> bool:
        """
        Whether the deployment is hibernating
        """
        return pulumi.get(self, "is_hibernating")

    @property
    @pulumi.getter(name="nextEventAt")
    def next_event_at(self) -> str:
        """
        Time of the next event
        """
        return pulumi.get(self, "next_event_at")

    @property
    @pulumi.getter(name="nextEventType")
    def next_event_type(self) -> str:
        """
        Type of the next event
        """
        return pulumi.get(self, "next_event_type")

    @property
    @pulumi.getter
    def reason(self) -> str:
        """
        Reason for the current state
        """
        return pulumi.get(self, "reason")


@pulumi.output_type
class GetDeploymentUpdatedByResult(dict):
    def __init__(__self__, *,
                 api_token_name: str,
                 avatar_url: str,
                 full_name: str,
                 id: str,
                 subject_type: str,
                 username: str):
        pulumi.set(__self__, "api_token_name", api_token_name)
        pulumi.set(__self__, "avatar_url", avatar_url)
        pulumi.set(__self__, "full_name", full_name)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "subject_type", subject_type)
        pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter(name="apiTokenName")
    def api_token_name(self) -> str:
        return pulumi.get(self, "api_token_name")

    @property
    @pulumi.getter(name="avatarUrl")
    def avatar_url(self) -> str:
        return pulumi.get(self, "avatar_url")

    @property
    @pulumi.getter(name="fullName")
    def full_name(self) -> str:
        return pulumi.get(self, "full_name")

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="subjectType")
    def subject_type(self) -> str:
        return pulumi.get(self, "subject_type")

    @property
    @pulumi.getter
    def username(self) -> str:
        return pulumi.get(self, "username")


@pulumi.output_type
class GetDeploymentWorkerQueueResult(dict):
    def __init__(__self__, *,
                 astro_machine: str,
                 id: str,
                 is_default: bool,
                 max_worker_count: int,
                 min_worker_count: int,
                 name: str,
                 node_pool_id: str,
                 pod_cpu: str,
                 pod_memory: str,
                 worker_concurrency: int):
        """
        :param str astro_machine: Worker queue Astro machine value
        :param str id: Worker queue identifier
        :param bool is_default: Whether Worker queue is default
        :param int max_worker_count: Worker queue max worker count
        :param int min_worker_count: Worker queue min worker count
        :param str name: Worker queue name
        :param str node_pool_id: Worker queue node pool identifier
        :param str pod_cpu: Worker queue pod CPU
        :param str pod_memory: Worker queue pod memory
        :param int worker_concurrency: Worker queue worker concurrency
        """
        pulumi.set(__self__, "astro_machine", astro_machine)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "is_default", is_default)
        pulumi.set(__self__, "max_worker_count", max_worker_count)
        pulumi.set(__self__, "min_worker_count", min_worker_count)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "node_pool_id", node_pool_id)
        pulumi.set(__self__, "pod_cpu", pod_cpu)
        pulumi.set(__self__, "pod_memory", pod_memory)
        pulumi.set(__self__, "worker_concurrency", worker_concurrency)

    @property
    @pulumi.getter(name="astroMachine")
    def astro_machine(self) -> str:
        """
        Worker queue Astro machine value
        """
        return pulumi.get(self, "astro_machine")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Worker queue identifier
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isDefault")
    def is_default(self) -> bool:
        """
        Whether Worker queue is default
        """
        return pulumi.get(self, "is_default")

    @property
    @pulumi.getter(name="maxWorkerCount")
    def max_worker_count(self) -> int:
        """
        Worker queue max worker count
        """
        return pulumi.get(self, "max_worker_count")

    @property
    @pulumi.getter(name="minWorkerCount")
    def min_worker_count(self) -> int:
        """
        Worker queue min worker count
        """
        return pulumi.get(self, "min_worker_count")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Worker queue name
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="nodePoolId")
    def node_pool_id(self) -> str:
        """
        Worker queue node pool identifier
        """
        return pulumi.get(self, "node_pool_id")

    @property
    @pulumi.getter(name="podCpu")
    def pod_cpu(self) -> str:
        """
        Worker queue pod CPU
        """
        return pulumi.get(self, "pod_cpu")

    @property
    @pulumi.getter(name="podMemory")
    def pod_memory(self) -> str:
        """
        Worker queue pod memory
        """
        return pulumi.get(self, "pod_memory")

    @property
    @pulumi.getter(name="workerConcurrency")
    def worker_concurrency(self) -> int:
        """
        Worker queue worker concurrency
        """
        return pulumi.get(self, "worker_concurrency")


@pulumi.output_type
class GetDeploymentsDeploymentResult(dict):
    def __init__(__self__, *,
                 airflow_version: str,
                 astro_runtime_version: str,
                 cloud_provider: str,
                 cluster_id: str,
                 contact_emails: Sequence[str],
                 created_at: str,
                 created_by: 'outputs.GetDeploymentsDeploymentCreatedByResult',
                 dag_tarball_version: str,
                 default_task_pod_cpu: str,
                 default_task_pod_memory: str,
                 description: str,
                 desired_dag_tarball_version: str,
                 environment_variables: Sequence['outputs.GetDeploymentsDeploymentEnvironmentVariableResult'],
                 executor: str,
                 external_ips: Sequence[str],
                 id: str,
                 image_repository: str,
                 image_tag: str,
                 image_version: str,
                 is_cicd_enforced: bool,
                 is_dag_deploy_enabled: bool,
                 is_development_mode: bool,
                 is_high_availability: bool,
                 name: str,
                 namespace: str,
                 oidc_issuer_url: str,
                 region: str,
                 resource_quota_cpu: str,
                 resource_quota_memory: str,
                 scaling_spec: 'outputs.GetDeploymentsDeploymentScalingSpecResult',
                 scaling_status: 'outputs.GetDeploymentsDeploymentScalingStatusResult',
                 scheduler_au: int,
                 scheduler_cpu: str,
                 scheduler_memory: str,
                 scheduler_replicas: int,
                 scheduler_size: str,
                 status: str,
                 status_reason: str,
                 task_pod_node_pool_id: str,
                 type: str,
                 updated_at: str,
                 updated_by: 'outputs.GetDeploymentsDeploymentUpdatedByResult',
                 webserver_airflow_api_url: str,
                 webserver_ingress_hostname: str,
                 webserver_url: str,
                 worker_queues: Sequence['outputs.GetDeploymentsDeploymentWorkerQueueResult'],
                 workload_identity: str,
                 workspace_id: str):
        """
        :param str airflow_version: Deployment Airflow version
        :param str astro_runtime_version: Deployment Astro Runtime version
        :param str cloud_provider: Deployment cloud provider
        :param str cluster_id: Deployment cluster identifier
        :param Sequence[str] contact_emails: Deployment contact emails
        :param str created_at: Deployment creation timestamp
        :param 'GetDeploymentsDeploymentCreatedByArgs' created_by: Deployment creator
        :param str dag_tarball_version: Deployment DAG tarball version
        :param str default_task_pod_cpu: Deployment default task pod CPU
        :param str default_task_pod_memory: Deployment default task pod memory
        :param str description: Deployment description
        :param str desired_dag_tarball_version: Deployment desired DAG tarball version
        :param Sequence['GetDeploymentsDeploymentEnvironmentVariableArgs'] environment_variables: Deployment environment variables
        :param str executor: Deployment executor
        :param Sequence[str] external_ips: Deployment external IPs
        :param str id: Deployment identifier
        :param str image_repository: Deployment image repository
        :param str image_tag: Deployment image tag
        :param str image_version: Deployment image version
        :param bool is_cicd_enforced: Whether the Deployment enforces CI/CD deploys
        :param bool is_dag_deploy_enabled: Whether DAG deploy is enabled
        :param bool is_development_mode: Whether Deployment is in development mode
        :param bool is_high_availability: Whether Deployment has high availability
        :param str name: Deployment name
        :param str namespace: Deployment namespace
        :param str oidc_issuer_url: Deployment OIDC issuer URL
        :param str region: Deployment region
        :param str resource_quota_cpu: Deployment resource quota CPU
        :param str resource_quota_memory: Deployment resource quota memory
        :param 'GetDeploymentsDeploymentScalingSpecArgs' scaling_spec: Deployment scaling spec
        :param 'GetDeploymentsDeploymentScalingStatusArgs' scaling_status: Deployment scaling status
        :param int scheduler_au: Deployment scheduler AU
        :param str scheduler_cpu: Deployment scheduler CPU
        :param str scheduler_memory: Deployment scheduler memory
        :param int scheduler_replicas: Deployment scheduler replicas
        :param str scheduler_size: Deployment scheduler size
        :param str status: Deployment status
        :param str status_reason: Deployment status reason
        :param str task_pod_node_pool_id: Deployment task pod node pool identifier
        :param str type: Deployment type
        :param str updated_at: Deployment last updated timestamp
        :param 'GetDeploymentsDeploymentUpdatedByArgs' updated_by: Deployment updater
        :param str webserver_airflow_api_url: Deployment webserver Airflow API URL
        :param str webserver_ingress_hostname: Deployment webserver ingress hostname
        :param str webserver_url: Deployment webserver URL
        :param Sequence['GetDeploymentsDeploymentWorkerQueueArgs'] worker_queues: Deployment worker queues
        :param str workload_identity: Deployment workload identity
        :param str workspace_id: Deployment workspace identifier
        """
        pulumi.set(__self__, "airflow_version", airflow_version)
        pulumi.set(__self__, "astro_runtime_version", astro_runtime_version)
        pulumi.set(__self__, "cloud_provider", cloud_provider)
        pulumi.set(__self__, "cluster_id", cluster_id)
        pulumi.set(__self__, "contact_emails", contact_emails)
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "created_by", created_by)
        pulumi.set(__self__, "dag_tarball_version", dag_tarball_version)
        pulumi.set(__self__, "default_task_pod_cpu", default_task_pod_cpu)
        pulumi.set(__self__, "default_task_pod_memory", default_task_pod_memory)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "desired_dag_tarball_version", desired_dag_tarball_version)
        pulumi.set(__self__, "environment_variables", environment_variables)
        pulumi.set(__self__, "executor", executor)
        pulumi.set(__self__, "external_ips", external_ips)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "image_repository", image_repository)
        pulumi.set(__self__, "image_tag", image_tag)
        pulumi.set(__self__, "image_version", image_version)
        pulumi.set(__self__, "is_cicd_enforced", is_cicd_enforced)
        pulumi.set(__self__, "is_dag_deploy_enabled", is_dag_deploy_enabled)
        pulumi.set(__self__, "is_development_mode", is_development_mode)
        pulumi.set(__self__, "is_high_availability", is_high_availability)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "namespace", namespace)
        pulumi.set(__self__, "oidc_issuer_url", oidc_issuer_url)
        pulumi.set(__self__, "region", region)
        pulumi.set(__self__, "resource_quota_cpu", resource_quota_cpu)
        pulumi.set(__self__, "resource_quota_memory", resource_quota_memory)
        pulumi.set(__self__, "scaling_spec", scaling_spec)
        pulumi.set(__self__, "scaling_status", scaling_status)
        pulumi.set(__self__, "scheduler_au", scheduler_au)
        pulumi.set(__self__, "scheduler_cpu", scheduler_cpu)
        pulumi.set(__self__, "scheduler_memory", scheduler_memory)
        pulumi.set(__self__, "scheduler_replicas", scheduler_replicas)
        pulumi.set(__self__, "scheduler_size", scheduler_size)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "status_reason", status_reason)
        pulumi.set(__self__, "task_pod_node_pool_id", task_pod_node_pool_id)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "updated_at", updated_at)
        pulumi.set(__self__, "updated_by", updated_by)
        pulumi.set(__self__, "webserver_airflow_api_url", webserver_airflow_api_url)
        pulumi.set(__self__, "webserver_ingress_hostname", webserver_ingress_hostname)
        pulumi.set(__self__, "webserver_url", webserver_url)
        pulumi.set(__self__, "worker_queues", worker_queues)
        pulumi.set(__self__, "workload_identity", workload_identity)
        pulumi.set(__self__, "workspace_id", workspace_id)

    @property
    @pulumi.getter(name="airflowVersion")
    def airflow_version(self) -> str:
        """
        Deployment Airflow version
        """
        return pulumi.get(self, "airflow_version")

    @property
    @pulumi.getter(name="astroRuntimeVersion")
    def astro_runtime_version(self) -> str:
        """
        Deployment Astro Runtime version
        """
        return pulumi.get(self, "astro_runtime_version")

    @property
    @pulumi.getter(name="cloudProvider")
    def cloud_provider(self) -> str:
        """
        Deployment cloud provider
        """
        return pulumi.get(self, "cloud_provider")

    @property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> str:
        """
        Deployment cluster identifier
        """
        return pulumi.get(self, "cluster_id")

    @property
    @pulumi.getter(name="contactEmails")
    def contact_emails(self) -> Sequence[str]:
        """
        Deployment contact emails
        """
        return pulumi.get(self, "contact_emails")

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> str:
        """
        Deployment creation timestamp
        """
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> 'outputs.GetDeploymentsDeploymentCreatedByResult':
        """
        Deployment creator
        """
        return pulumi.get(self, "created_by")

    @property
    @pulumi.getter(name="dagTarballVersion")
    def dag_tarball_version(self) -> str:
        """
        Deployment DAG tarball version
        """
        return pulumi.get(self, "dag_tarball_version")

    @property
    @pulumi.getter(name="defaultTaskPodCpu")
    def default_task_pod_cpu(self) -> str:
        """
        Deployment default task pod CPU
        """
        return pulumi.get(self, "default_task_pod_cpu")

    @property
    @pulumi.getter(name="defaultTaskPodMemory")
    def default_task_pod_memory(self) -> str:
        """
        Deployment default task pod memory
        """
        return pulumi.get(self, "default_task_pod_memory")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        Deployment description
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="desiredDagTarballVersion")
    def desired_dag_tarball_version(self) -> str:
        """
        Deployment desired DAG tarball version
        """
        return pulumi.get(self, "desired_dag_tarball_version")

    @property
    @pulumi.getter(name="environmentVariables")
    def environment_variables(self) -> Sequence['outputs.GetDeploymentsDeploymentEnvironmentVariableResult']:
        """
        Deployment environment variables
        """
        return pulumi.get(self, "environment_variables")

    @property
    @pulumi.getter
    def executor(self) -> str:
        """
        Deployment executor
        """
        return pulumi.get(self, "executor")

    @property
    @pulumi.getter(name="externalIps")
    def external_ips(self) -> Sequence[str]:
        """
        Deployment external IPs
        """
        return pulumi.get(self, "external_ips")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Deployment identifier
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="imageRepository")
    def image_repository(self) -> str:
        """
        Deployment image repository
        """
        return pulumi.get(self, "image_repository")

    @property
    @pulumi.getter(name="imageTag")
    def image_tag(self) -> str:
        """
        Deployment image tag
        """
        return pulumi.get(self, "image_tag")

    @property
    @pulumi.getter(name="imageVersion")
    def image_version(self) -> str:
        """
        Deployment image version
        """
        return pulumi.get(self, "image_version")

    @property
    @pulumi.getter(name="isCicdEnforced")
    def is_cicd_enforced(self) -> bool:
        """
        Whether the Deployment enforces CI/CD deploys
        """
        return pulumi.get(self, "is_cicd_enforced")

    @property
    @pulumi.getter(name="isDagDeployEnabled")
    def is_dag_deploy_enabled(self) -> bool:
        """
        Whether DAG deploy is enabled
        """
        return pulumi.get(self, "is_dag_deploy_enabled")

    @property
    @pulumi.getter(name="isDevelopmentMode")
    def is_development_mode(self) -> bool:
        """
        Whether Deployment is in development mode
        """
        return pulumi.get(self, "is_development_mode")

    @property
    @pulumi.getter(name="isHighAvailability")
    def is_high_availability(self) -> bool:
        """
        Whether Deployment has high availability
        """
        return pulumi.get(self, "is_high_availability")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Deployment name
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def namespace(self) -> str:
        """
        Deployment namespace
        """
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter(name="oidcIssuerUrl")
    def oidc_issuer_url(self) -> str:
        """
        Deployment OIDC issuer URL
        """
        return pulumi.get(self, "oidc_issuer_url")

    @property
    @pulumi.getter
    def region(self) -> str:
        """
        Deployment region
        """
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="resourceQuotaCpu")
    def resource_quota_cpu(self) -> str:
        """
        Deployment resource quota CPU
        """
        return pulumi.get(self, "resource_quota_cpu")

    @property
    @pulumi.getter(name="resourceQuotaMemory")
    def resource_quota_memory(self) -> str:
        """
        Deployment resource quota memory
        """
        return pulumi.get(self, "resource_quota_memory")

    @property
    @pulumi.getter(name="scalingSpec")
    def scaling_spec(self) -> 'outputs.GetDeploymentsDeploymentScalingSpecResult':
        """
        Deployment scaling spec
        """
        return pulumi.get(self, "scaling_spec")

    @property
    @pulumi.getter(name="scalingStatus")
    def scaling_status(self) -> 'outputs.GetDeploymentsDeploymentScalingStatusResult':
        """
        Deployment scaling status
        """
        return pulumi.get(self, "scaling_status")

    @property
    @pulumi.getter(name="schedulerAu")
    def scheduler_au(self) -> int:
        """
        Deployment scheduler AU
        """
        return pulumi.get(self, "scheduler_au")

    @property
    @pulumi.getter(name="schedulerCpu")
    def scheduler_cpu(self) -> str:
        """
        Deployment scheduler CPU
        """
        return pulumi.get(self, "scheduler_cpu")

    @property
    @pulumi.getter(name="schedulerMemory")
    def scheduler_memory(self) -> str:
        """
        Deployment scheduler memory
        """
        return pulumi.get(self, "scheduler_memory")

    @property
    @pulumi.getter(name="schedulerReplicas")
    def scheduler_replicas(self) -> int:
        """
        Deployment scheduler replicas
        """
        return pulumi.get(self, "scheduler_replicas")

    @property
    @pulumi.getter(name="schedulerSize")
    def scheduler_size(self) -> str:
        """
        Deployment scheduler size
        """
        return pulumi.get(self, "scheduler_size")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        Deployment status
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="statusReason")
    def status_reason(self) -> str:
        """
        Deployment status reason
        """
        return pulumi.get(self, "status_reason")

    @property
    @pulumi.getter(name="taskPodNodePoolId")
    def task_pod_node_pool_id(self) -> str:
        """
        Deployment task pod node pool identifier
        """
        return pulumi.get(self, "task_pod_node_pool_id")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Deployment type
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> str:
        """
        Deployment last updated timestamp
        """
        return pulumi.get(self, "updated_at")

    @property
    @pulumi.getter(name="updatedBy")
    def updated_by(self) -> 'outputs.GetDeploymentsDeploymentUpdatedByResult':
        """
        Deployment updater
        """
        return pulumi.get(self, "updated_by")

    @property
    @pulumi.getter(name="webserverAirflowApiUrl")
    def webserver_airflow_api_url(self) -> str:
        """
        Deployment webserver Airflow API URL
        """
        return pulumi.get(self, "webserver_airflow_api_url")

    @property
    @pulumi.getter(name="webserverIngressHostname")
    def webserver_ingress_hostname(self) -> str:
        """
        Deployment webserver ingress hostname
        """
        return pulumi.get(self, "webserver_ingress_hostname")

    @property
    @pulumi.getter(name="webserverUrl")
    def webserver_url(self) -> str:
        """
        Deployment webserver URL
        """
        return pulumi.get(self, "webserver_url")

    @property
    @pulumi.getter(name="workerQueues")
    def worker_queues(self) -> Sequence['outputs.GetDeploymentsDeploymentWorkerQueueResult']:
        """
        Deployment worker queues
        """
        return pulumi.get(self, "worker_queues")

    @property
    @pulumi.getter(name="workloadIdentity")
    def workload_identity(self) -> str:
        """
        Deployment workload identity
        """
        return pulumi.get(self, "workload_identity")

    @property
    @pulumi.getter(name="workspaceId")
    def workspace_id(self) -> str:
        """
        Deployment workspace identifier
        """
        return pulumi.get(self, "workspace_id")


@pulumi.output_type
class GetDeploymentsDeploymentCreatedByResult(dict):
    def __init__(__self__, *,
                 api_token_name: str,
                 avatar_url: str,
                 full_name: str,
                 id: str,
                 subject_type: str,
                 username: str):
        pulumi.set(__self__, "api_token_name", api_token_name)
        pulumi.set(__self__, "avatar_url", avatar_url)
        pulumi.set(__self__, "full_name", full_name)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "subject_type", subject_type)
        pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter(name="apiTokenName")
    def api_token_name(self) -> str:
        return pulumi.get(self, "api_token_name")

    @property
    @pulumi.getter(name="avatarUrl")
    def avatar_url(self) -> str:
        return pulumi.get(self, "avatar_url")

    @property
    @pulumi.getter(name="fullName")
    def full_name(self) -> str:
        return pulumi.get(self, "full_name")

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="subjectType")
    def subject_type(self) -> str:
        return pulumi.get(self, "subject_type")

    @property
    @pulumi.getter
    def username(self) -> str:
        return pulumi.get(self, "username")


@pulumi.output_type
class GetDeploymentsDeploymentEnvironmentVariableResult(dict):
    def __init__(__self__, *,
                 is_secret: bool,
                 key: str,
                 updated_at: str,
                 value: str):
        """
        :param bool is_secret: Whether Environment variable is a secret
        :param str key: Environment variable key
        :param str updated_at: Environment variable last updated timestamp
        :param str value: Environment variable value
        """
        pulumi.set(__self__, "is_secret", is_secret)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "updated_at", updated_at)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="isSecret")
    def is_secret(self) -> bool:
        """
        Whether Environment variable is a secret
        """
        return pulumi.get(self, "is_secret")

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        Environment variable key
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> str:
        """
        Environment variable last updated timestamp
        """
        return pulumi.get(self, "updated_at")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Environment variable value
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDeploymentsDeploymentScalingSpecResult(dict):
    def __init__(__self__, *,
                 hibernation_spec: 'outputs.GetDeploymentsDeploymentScalingSpecHibernationSpecResult'):
        pulumi.set(__self__, "hibernation_spec", hibernation_spec)

    @property
    @pulumi.getter(name="hibernationSpec")
    def hibernation_spec(self) -> 'outputs.GetDeploymentsDeploymentScalingSpecHibernationSpecResult':
        return pulumi.get(self, "hibernation_spec")


@pulumi.output_type
class GetDeploymentsDeploymentScalingSpecHibernationSpecResult(dict):
    def __init__(__self__, *,
                 override: 'outputs.GetDeploymentsDeploymentScalingSpecHibernationSpecOverrideResult',
                 schedules: Sequence['outputs.GetDeploymentsDeploymentScalingSpecHibernationSpecScheduleResult']):
        pulumi.set(__self__, "override", override)
        pulumi.set(__self__, "schedules", schedules)

    @property
    @pulumi.getter
    def override(self) -> 'outputs.GetDeploymentsDeploymentScalingSpecHibernationSpecOverrideResult':
        return pulumi.get(self, "override")

    @property
    @pulumi.getter
    def schedules(self) -> Sequence['outputs.GetDeploymentsDeploymentScalingSpecHibernationSpecScheduleResult']:
        return pulumi.get(self, "schedules")


@pulumi.output_type
class GetDeploymentsDeploymentScalingSpecHibernationSpecOverrideResult(dict):
    def __init__(__self__, *,
                 is_active: bool,
                 is_hibernating: bool,
                 override_until: str):
        """
        :param bool is_active: Whether the override is active
        :param bool is_hibernating: Whether the override is hibernating
        :param str override_until: Time until the override is active
        """
        pulumi.set(__self__, "is_active", is_active)
        pulumi.set(__self__, "is_hibernating", is_hibernating)
        pulumi.set(__self__, "override_until", override_until)

    @property
    @pulumi.getter(name="isActive")
    def is_active(self) -> bool:
        """
        Whether the override is active
        """
        return pulumi.get(self, "is_active")

    @property
    @pulumi.getter(name="isHibernating")
    def is_hibernating(self) -> bool:
        """
        Whether the override is hibernating
        """
        return pulumi.get(self, "is_hibernating")

    @property
    @pulumi.getter(name="overrideUntil")
    def override_until(self) -> str:
        """
        Time until the override is active
        """
        return pulumi.get(self, "override_until")


@pulumi.output_type
class GetDeploymentsDeploymentScalingSpecHibernationSpecScheduleResult(dict):
    def __init__(__self__, *,
                 description: str,
                 hibernate_at_cron: str,
                 is_enabled: bool,
                 wake_at_cron: str):
        """
        :param str description: Description of the schedule
        :param str hibernate_at_cron: Cron expression for hibernation
        :param bool is_enabled: Whether the schedule is enabled
        :param str wake_at_cron: Cron expression for waking
        """
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "hibernate_at_cron", hibernate_at_cron)
        pulumi.set(__self__, "is_enabled", is_enabled)
        pulumi.set(__self__, "wake_at_cron", wake_at_cron)

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        Description of the schedule
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="hibernateAtCron")
    def hibernate_at_cron(self) -> str:
        """
        Cron expression for hibernation
        """
        return pulumi.get(self, "hibernate_at_cron")

    @property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> bool:
        """
        Whether the schedule is enabled
        """
        return pulumi.get(self, "is_enabled")

    @property
    @pulumi.getter(name="wakeAtCron")
    def wake_at_cron(self) -> str:
        """
        Cron expression for waking
        """
        return pulumi.get(self, "wake_at_cron")


@pulumi.output_type
class GetDeploymentsDeploymentScalingStatusResult(dict):
    def __init__(__self__, *,
                 hibernation_status: 'outputs.GetDeploymentsDeploymentScalingStatusHibernationStatusResult'):
        pulumi.set(__self__, "hibernation_status", hibernation_status)

    @property
    @pulumi.getter(name="hibernationStatus")
    def hibernation_status(self) -> 'outputs.GetDeploymentsDeploymentScalingStatusHibernationStatusResult':
        return pulumi.get(self, "hibernation_status")


@pulumi.output_type
class GetDeploymentsDeploymentScalingStatusHibernationStatusResult(dict):
    def __init__(__self__, *,
                 is_hibernating: bool,
                 next_event_at: str,
                 next_event_type: str,
                 reason: str):
        """
        :param bool is_hibernating: Whether the deployment is hibernating
        :param str next_event_at: Time of the next event
        :param str next_event_type: Type of the next event
        :param str reason: Reason for the current state
        """
        pulumi.set(__self__, "is_hibernating", is_hibernating)
        pulumi.set(__self__, "next_event_at", next_event_at)
        pulumi.set(__self__, "next_event_type", next_event_type)
        pulumi.set(__self__, "reason", reason)

    @property
    @pulumi.getter(name="isHibernating")
    def is_hibernating(self) -> bool:
        """
        Whether the deployment is hibernating
        """
        return pulumi.get(self, "is_hibernating")

    @property
    @pulumi.getter(name="nextEventAt")
    def next_event_at(self) -> str:
        """
        Time of the next event
        """
        return pulumi.get(self, "next_event_at")

    @property
    @pulumi.getter(name="nextEventType")
    def next_event_type(self) -> str:
        """
        Type of the next event
        """
        return pulumi.get(self, "next_event_type")

    @property
    @pulumi.getter
    def reason(self) -> str:
        """
        Reason for the current state
        """
        return pulumi.get(self, "reason")


@pulumi.output_type
class GetDeploymentsDeploymentUpdatedByResult(dict):
    def __init__(__self__, *,
                 api_token_name: str,
                 avatar_url: str,
                 full_name: str,
                 id: str,
                 subject_type: str,
                 username: str):
        pulumi.set(__self__, "api_token_name", api_token_name)
        pulumi.set(__self__, "avatar_url", avatar_url)
        pulumi.set(__self__, "full_name", full_name)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "subject_type", subject_type)
        pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter(name="apiTokenName")
    def api_token_name(self) -> str:
        return pulumi.get(self, "api_token_name")

    @property
    @pulumi.getter(name="avatarUrl")
    def avatar_url(self) -> str:
        return pulumi.get(self, "avatar_url")

    @property
    @pulumi.getter(name="fullName")
    def full_name(self) -> str:
        return pulumi.get(self, "full_name")

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="subjectType")
    def subject_type(self) -> str:
        return pulumi.get(self, "subject_type")

    @property
    @pulumi.getter
    def username(self) -> str:
        return pulumi.get(self, "username")


@pulumi.output_type
class GetDeploymentsDeploymentWorkerQueueResult(dict):
    def __init__(__self__, *,
                 astro_machine: str,
                 id: str,
                 is_default: bool,
                 max_worker_count: int,
                 min_worker_count: int,
                 name: str,
                 node_pool_id: str,
                 pod_cpu: str,
                 pod_memory: str,
                 worker_concurrency: int):
        """
        :param str astro_machine: Worker queue Astro machine value
        :param str id: Worker queue identifier
        :param bool is_default: Whether Worker queue is default
        :param int max_worker_count: Worker queue max worker count
        :param int min_worker_count: Worker queue min worker count
        :param str name: Worker queue name
        :param str node_pool_id: Worker queue node pool identifier
        :param str pod_cpu: Worker queue pod CPU
        :param str pod_memory: Worker queue pod memory
        :param int worker_concurrency: Worker queue worker concurrency
        """
        pulumi.set(__self__, "astro_machine", astro_machine)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "is_default", is_default)
        pulumi.set(__self__, "max_worker_count", max_worker_count)
        pulumi.set(__self__, "min_worker_count", min_worker_count)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "node_pool_id", node_pool_id)
        pulumi.set(__self__, "pod_cpu", pod_cpu)
        pulumi.set(__self__, "pod_memory", pod_memory)
        pulumi.set(__self__, "worker_concurrency", worker_concurrency)

    @property
    @pulumi.getter(name="astroMachine")
    def astro_machine(self) -> str:
        """
        Worker queue Astro machine value
        """
        return pulumi.get(self, "astro_machine")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Worker queue identifier
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isDefault")
    def is_default(self) -> bool:
        """
        Whether Worker queue is default
        """
        return pulumi.get(self, "is_default")

    @property
    @pulumi.getter(name="maxWorkerCount")
    def max_worker_count(self) -> int:
        """
        Worker queue max worker count
        """
        return pulumi.get(self, "max_worker_count")

    @property
    @pulumi.getter(name="minWorkerCount")
    def min_worker_count(self) -> int:
        """
        Worker queue min worker count
        """
        return pulumi.get(self, "min_worker_count")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Worker queue name
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="nodePoolId")
    def node_pool_id(self) -> str:
        """
        Worker queue node pool identifier
        """
        return pulumi.get(self, "node_pool_id")

    @property
    @pulumi.getter(name="podCpu")
    def pod_cpu(self) -> str:
        """
        Worker queue pod CPU
        """
        return pulumi.get(self, "pod_cpu")

    @property
    @pulumi.getter(name="podMemory")
    def pod_memory(self) -> str:
        """
        Worker queue pod memory
        """
        return pulumi.get(self, "pod_memory")

    @property
    @pulumi.getter(name="workerConcurrency")
    def worker_concurrency(self) -> int:
        """
        Worker queue worker concurrency
        """
        return pulumi.get(self, "worker_concurrency")


@pulumi.output_type
class GetOrganizationCreatedByResult(dict):
    def __init__(__self__, *,
                 api_token_name: str,
                 avatar_url: str,
                 full_name: str,
                 id: str,
                 subject_type: str,
                 username: str):
        pulumi.set(__self__, "api_token_name", api_token_name)
        pulumi.set(__self__, "avatar_url", avatar_url)
        pulumi.set(__self__, "full_name", full_name)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "subject_type", subject_type)
        pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter(name="apiTokenName")
    def api_token_name(self) -> str:
        return pulumi.get(self, "api_token_name")

    @property
    @pulumi.getter(name="avatarUrl")
    def avatar_url(self) -> str:
        return pulumi.get(self, "avatar_url")

    @property
    @pulumi.getter(name="fullName")
    def full_name(self) -> str:
        return pulumi.get(self, "full_name")

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="subjectType")
    def subject_type(self) -> str:
        return pulumi.get(self, "subject_type")

    @property
    @pulumi.getter
    def username(self) -> str:
        return pulumi.get(self, "username")


@pulumi.output_type
class GetOrganizationUpdatedByResult(dict):
    def __init__(__self__, *,
                 api_token_name: str,
                 avatar_url: str,
                 full_name: str,
                 id: str,
                 subject_type: str,
                 username: str):
        pulumi.set(__self__, "api_token_name", api_token_name)
        pulumi.set(__self__, "avatar_url", avatar_url)
        pulumi.set(__self__, "full_name", full_name)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "subject_type", subject_type)
        pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter(name="apiTokenName")
    def api_token_name(self) -> str:
        return pulumi.get(self, "api_token_name")

    @property
    @pulumi.getter(name="avatarUrl")
    def avatar_url(self) -> str:
        return pulumi.get(self, "avatar_url")

    @property
    @pulumi.getter(name="fullName")
    def full_name(self) -> str:
        return pulumi.get(self, "full_name")

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="subjectType")
    def subject_type(self) -> str:
        return pulumi.get(self, "subject_type")

    @property
    @pulumi.getter
    def username(self) -> str:
        return pulumi.get(self, "username")


@pulumi.output_type
class GetTeamCreatedByResult(dict):
    def __init__(__self__, *,
                 api_token_name: str,
                 avatar_url: str,
                 full_name: str,
                 id: str,
                 subject_type: str,
                 username: str):
        pulumi.set(__self__, "api_token_name", api_token_name)
        pulumi.set(__self__, "avatar_url", avatar_url)
        pulumi.set(__self__, "full_name", full_name)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "subject_type", subject_type)
        pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter(name="apiTokenName")
    def api_token_name(self) -> str:
        return pulumi.get(self, "api_token_name")

    @property
    @pulumi.getter(name="avatarUrl")
    def avatar_url(self) -> str:
        return pulumi.get(self, "avatar_url")

    @property
    @pulumi.getter(name="fullName")
    def full_name(self) -> str:
        return pulumi.get(self, "full_name")

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="subjectType")
    def subject_type(self) -> str:
        return pulumi.get(self, "subject_type")

    @property
    @pulumi.getter
    def username(self) -> str:
        return pulumi.get(self, "username")


@pulumi.output_type
class GetTeamDeploymentRoleResult(dict):
    def __init__(__self__, *,
                 deployment_id: str,
                 role: str):
        """
        :param str deployment_id: The ID of the deployment the role is assigned to
        :param str role: The role assigned to the deployment
        """
        pulumi.set(__self__, "deployment_id", deployment_id)
        pulumi.set(__self__, "role", role)

    @property
    @pulumi.getter(name="deploymentId")
    def deployment_id(self) -> str:
        """
        The ID of the deployment the role is assigned to
        """
        return pulumi.get(self, "deployment_id")

    @property
    @pulumi.getter
    def role(self) -> str:
        """
        The role assigned to the deployment
        """
        return pulumi.get(self, "role")


@pulumi.output_type
class GetTeamUpdatedByResult(dict):
    def __init__(__self__, *,
                 api_token_name: str,
                 avatar_url: str,
                 full_name: str,
                 id: str,
                 subject_type: str,
                 username: str):
        pulumi.set(__self__, "api_token_name", api_token_name)
        pulumi.set(__self__, "avatar_url", avatar_url)
        pulumi.set(__self__, "full_name", full_name)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "subject_type", subject_type)
        pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter(name="apiTokenName")
    def api_token_name(self) -> str:
        return pulumi.get(self, "api_token_name")

    @property
    @pulumi.getter(name="avatarUrl")
    def avatar_url(self) -> str:
        return pulumi.get(self, "avatar_url")

    @property
    @pulumi.getter(name="fullName")
    def full_name(self) -> str:
        return pulumi.get(self, "full_name")

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="subjectType")
    def subject_type(self) -> str:
        return pulumi.get(self, "subject_type")

    @property
    @pulumi.getter
    def username(self) -> str:
        return pulumi.get(self, "username")


@pulumi.output_type
class GetTeamWorkspaceRoleResult(dict):
    def __init__(__self__, *,
                 role: str,
                 workspace_id: str):
        """
        :param str role: The role assigned to the workspace
        :param str workspace_id: The ID of the workspace the role is assigned to
        """
        pulumi.set(__self__, "role", role)
        pulumi.set(__self__, "workspace_id", workspace_id)

    @property
    @pulumi.getter
    def role(self) -> str:
        """
        The role assigned to the workspace
        """
        return pulumi.get(self, "role")

    @property
    @pulumi.getter(name="workspaceId")
    def workspace_id(self) -> str:
        """
        The ID of the workspace the role is assigned to
        """
        return pulumi.get(self, "workspace_id")


@pulumi.output_type
class GetTeamsTeamResult(dict):
    def __init__(__self__, *,
                 created_at: str,
                 created_by: 'outputs.GetTeamsTeamCreatedByResult',
                 deployment_roles: Sequence['outputs.GetTeamsTeamDeploymentRoleResult'],
                 description: str,
                 id: str,
                 is_idp_managed: bool,
                 name: str,
                 organization_role: str,
                 roles_count: int,
                 updated_at: str,
                 updated_by: 'outputs.GetTeamsTeamUpdatedByResult',
                 workspace_roles: Sequence['outputs.GetTeamsTeamWorkspaceRoleResult']):
        """
        :param str created_at: Team creation timestamp
        :param 'GetTeamsTeamCreatedByArgs' created_by: Team creator
        :param Sequence['GetTeamsTeamDeploymentRoleArgs'] deployment_roles: The roles assigned to the Deployments
        :param str description: Team description
        :param str id: Team ID
        :param bool is_idp_managed: Whether the Team is managed by an identity provider
        :param str name: Team name
        :param str organization_role: The role assigned to the Organization
        :param int roles_count: Number of roles assigned to the Team
        :param str updated_at: Team last updated timestamp
        :param 'GetTeamsTeamUpdatedByArgs' updated_by: Team updater
        :param Sequence['GetTeamsTeamWorkspaceRoleArgs'] workspace_roles: The roles assigned to the Workspaces
        """
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "created_by", created_by)
        pulumi.set(__self__, "deployment_roles", deployment_roles)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "is_idp_managed", is_idp_managed)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "organization_role", organization_role)
        pulumi.set(__self__, "roles_count", roles_count)
        pulumi.set(__self__, "updated_at", updated_at)
        pulumi.set(__self__, "updated_by", updated_by)
        pulumi.set(__self__, "workspace_roles", workspace_roles)

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> str:
        """
        Team creation timestamp
        """
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> 'outputs.GetTeamsTeamCreatedByResult':
        """
        Team creator
        """
        return pulumi.get(self, "created_by")

    @property
    @pulumi.getter(name="deploymentRoles")
    def deployment_roles(self) -> Sequence['outputs.GetTeamsTeamDeploymentRoleResult']:
        """
        The roles assigned to the Deployments
        """
        return pulumi.get(self, "deployment_roles")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        Team description
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Team ID
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isIdpManaged")
    def is_idp_managed(self) -> bool:
        """
        Whether the Team is managed by an identity provider
        """
        return pulumi.get(self, "is_idp_managed")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Team name
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="organizationRole")
    def organization_role(self) -> str:
        """
        The role assigned to the Organization
        """
        return pulumi.get(self, "organization_role")

    @property
    @pulumi.getter(name="rolesCount")
    def roles_count(self) -> int:
        """
        Number of roles assigned to the Team
        """
        return pulumi.get(self, "roles_count")

    @property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> str:
        """
        Team last updated timestamp
        """
        return pulumi.get(self, "updated_at")

    @property
    @pulumi.getter(name="updatedBy")
    def updated_by(self) -> 'outputs.GetTeamsTeamUpdatedByResult':
        """
        Team updater
        """
        return pulumi.get(self, "updated_by")

    @property
    @pulumi.getter(name="workspaceRoles")
    def workspace_roles(self) -> Sequence['outputs.GetTeamsTeamWorkspaceRoleResult']:
        """
        The roles assigned to the Workspaces
        """
        return pulumi.get(self, "workspace_roles")


@pulumi.output_type
class GetTeamsTeamCreatedByResult(dict):
    def __init__(__self__, *,
                 api_token_name: str,
                 avatar_url: str,
                 full_name: str,
                 id: str,
                 subject_type: str,
                 username: str):
        pulumi.set(__self__, "api_token_name", api_token_name)
        pulumi.set(__self__, "avatar_url", avatar_url)
        pulumi.set(__self__, "full_name", full_name)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "subject_type", subject_type)
        pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter(name="apiTokenName")
    def api_token_name(self) -> str:
        return pulumi.get(self, "api_token_name")

    @property
    @pulumi.getter(name="avatarUrl")
    def avatar_url(self) -> str:
        return pulumi.get(self, "avatar_url")

    @property
    @pulumi.getter(name="fullName")
    def full_name(self) -> str:
        return pulumi.get(self, "full_name")

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="subjectType")
    def subject_type(self) -> str:
        return pulumi.get(self, "subject_type")

    @property
    @pulumi.getter
    def username(self) -> str:
        return pulumi.get(self, "username")


@pulumi.output_type
class GetTeamsTeamDeploymentRoleResult(dict):
    def __init__(__self__, *,
                 deployment_id: str,
                 role: str):
        """
        :param str deployment_id: The ID of the deployment the role is assigned to
        :param str role: The role assigned to the deployment
        """
        pulumi.set(__self__, "deployment_id", deployment_id)
        pulumi.set(__self__, "role", role)

    @property
    @pulumi.getter(name="deploymentId")
    def deployment_id(self) -> str:
        """
        The ID of the deployment the role is assigned to
        """
        return pulumi.get(self, "deployment_id")

    @property
    @pulumi.getter
    def role(self) -> str:
        """
        The role assigned to the deployment
        """
        return pulumi.get(self, "role")


@pulumi.output_type
class GetTeamsTeamUpdatedByResult(dict):
    def __init__(__self__, *,
                 api_token_name: str,
                 avatar_url: str,
                 full_name: str,
                 id: str,
                 subject_type: str,
                 username: str):
        pulumi.set(__self__, "api_token_name", api_token_name)
        pulumi.set(__self__, "avatar_url", avatar_url)
        pulumi.set(__self__, "full_name", full_name)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "subject_type", subject_type)
        pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter(name="apiTokenName")
    def api_token_name(self) -> str:
        return pulumi.get(self, "api_token_name")

    @property
    @pulumi.getter(name="avatarUrl")
    def avatar_url(self) -> str:
        return pulumi.get(self, "avatar_url")

    @property
    @pulumi.getter(name="fullName")
    def full_name(self) -> str:
        return pulumi.get(self, "full_name")

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="subjectType")
    def subject_type(self) -> str:
        return pulumi.get(self, "subject_type")

    @property
    @pulumi.getter
    def username(self) -> str:
        return pulumi.get(self, "username")


@pulumi.output_type
class GetTeamsTeamWorkspaceRoleResult(dict):
    def __init__(__self__, *,
                 role: str,
                 workspace_id: str):
        """
        :param str role: The role assigned to the workspace
        :param str workspace_id: The ID of the workspace the role is assigned to
        """
        pulumi.set(__self__, "role", role)
        pulumi.set(__self__, "workspace_id", workspace_id)

    @property
    @pulumi.getter
    def role(self) -> str:
        """
        The role assigned to the workspace
        """
        return pulumi.get(self, "role")

    @property
    @pulumi.getter(name="workspaceId")
    def workspace_id(self) -> str:
        """
        The ID of the workspace the role is assigned to
        """
        return pulumi.get(self, "workspace_id")


@pulumi.output_type
class GetUserDeploymentRoleResult(dict):
    def __init__(__self__, *,
                 deployment_id: str,
                 role: str):
        """
        :param str deployment_id: The ID of the deployment the role is assigned to
        :param str role: The role assigned to the deployment
        """
        pulumi.set(__self__, "deployment_id", deployment_id)
        pulumi.set(__self__, "role", role)

    @property
    @pulumi.getter(name="deploymentId")
    def deployment_id(self) -> str:
        """
        The ID of the deployment the role is assigned to
        """
        return pulumi.get(self, "deployment_id")

    @property
    @pulumi.getter
    def role(self) -> str:
        """
        The role assigned to the deployment
        """
        return pulumi.get(self, "role")


@pulumi.output_type
class GetUserWorkspaceRoleResult(dict):
    def __init__(__self__, *,
                 role: str,
                 workspace_id: str):
        """
        :param str role: The role assigned to the workspace
        :param str workspace_id: The ID of the workspace the role is assigned to
        """
        pulumi.set(__self__, "role", role)
        pulumi.set(__self__, "workspace_id", workspace_id)

    @property
    @pulumi.getter
    def role(self) -> str:
        """
        The role assigned to the workspace
        """
        return pulumi.get(self, "role")

    @property
    @pulumi.getter(name="workspaceId")
    def workspace_id(self) -> str:
        """
        The ID of the workspace the role is assigned to
        """
        return pulumi.get(self, "workspace_id")


@pulumi.output_type
class GetUsersUserResult(dict):
    def __init__(__self__, *,
                 avatar_url: str,
                 created_at: str,
                 deployment_roles: Sequence['outputs.GetUsersUserDeploymentRoleResult'],
                 full_name: str,
                 id: str,
                 organization_role: str,
                 status: str,
                 updated_at: str,
                 username: str,
                 workspace_roles: Sequence['outputs.GetUsersUserWorkspaceRoleResult']):
        """
        :param str avatar_url: User avatar URL
        :param str created_at: User creation timestamp
        :param Sequence['GetUsersUserDeploymentRoleArgs'] deployment_roles: The roles assigned to the deployments
        :param str full_name: User full name
        :param str id: User identifier
        :param str organization_role: The role assigned to the organization
        :param str status: User status
        :param str updated_at: User last updated timestamp
        :param str username: User username
        :param Sequence['GetUsersUserWorkspaceRoleArgs'] workspace_roles: The roles assigned to the workspaces
        """
        pulumi.set(__self__, "avatar_url", avatar_url)
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "deployment_roles", deployment_roles)
        pulumi.set(__self__, "full_name", full_name)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "organization_role", organization_role)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "updated_at", updated_at)
        pulumi.set(__self__, "username", username)
        pulumi.set(__self__, "workspace_roles", workspace_roles)

    @property
    @pulumi.getter(name="avatarUrl")
    def avatar_url(self) -> str:
        """
        User avatar URL
        """
        return pulumi.get(self, "avatar_url")

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> str:
        """
        User creation timestamp
        """
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter(name="deploymentRoles")
    def deployment_roles(self) -> Sequence['outputs.GetUsersUserDeploymentRoleResult']:
        """
        The roles assigned to the deployments
        """
        return pulumi.get(self, "deployment_roles")

    @property
    @pulumi.getter(name="fullName")
    def full_name(self) -> str:
        """
        User full name
        """
        return pulumi.get(self, "full_name")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        User identifier
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="organizationRole")
    def organization_role(self) -> str:
        """
        The role assigned to the organization
        """
        return pulumi.get(self, "organization_role")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        User status
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> str:
        """
        User last updated timestamp
        """
        return pulumi.get(self, "updated_at")

    @property
    @pulumi.getter
    def username(self) -> str:
        """
        User username
        """
        return pulumi.get(self, "username")

    @property
    @pulumi.getter(name="workspaceRoles")
    def workspace_roles(self) -> Sequence['outputs.GetUsersUserWorkspaceRoleResult']:
        """
        The roles assigned to the workspaces
        """
        return pulumi.get(self, "workspace_roles")


@pulumi.output_type
class GetUsersUserDeploymentRoleResult(dict):
    def __init__(__self__, *,
                 deployment_id: str,
                 role: str):
        """
        :param str deployment_id: The ID of the deployment the role is assigned to
        :param str role: The role assigned to the deployment
        """
        pulumi.set(__self__, "deployment_id", deployment_id)
        pulumi.set(__self__, "role", role)

    @property
    @pulumi.getter(name="deploymentId")
    def deployment_id(self) -> str:
        """
        The ID of the deployment the role is assigned to
        """
        return pulumi.get(self, "deployment_id")

    @property
    @pulumi.getter
    def role(self) -> str:
        """
        The role assigned to the deployment
        """
        return pulumi.get(self, "role")


@pulumi.output_type
class GetUsersUserWorkspaceRoleResult(dict):
    def __init__(__self__, *,
                 role: str,
                 workspace_id: str):
        """
        :param str role: The role assigned to the workspace
        :param str workspace_id: The ID of the workspace the role is assigned to
        """
        pulumi.set(__self__, "role", role)
        pulumi.set(__self__, "workspace_id", workspace_id)

    @property
    @pulumi.getter
    def role(self) -> str:
        """
        The role assigned to the workspace
        """
        return pulumi.get(self, "role")

    @property
    @pulumi.getter(name="workspaceId")
    def workspace_id(self) -> str:
        """
        The ID of the workspace the role is assigned to
        """
        return pulumi.get(self, "workspace_id")


@pulumi.output_type
class GetWorkspaceCreatedByResult(dict):
    def __init__(__self__, *,
                 api_token_name: str,
                 avatar_url: str,
                 full_name: str,
                 id: str,
                 subject_type: str,
                 username: str):
        pulumi.set(__self__, "api_token_name", api_token_name)
        pulumi.set(__self__, "avatar_url", avatar_url)
        pulumi.set(__self__, "full_name", full_name)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "subject_type", subject_type)
        pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter(name="apiTokenName")
    def api_token_name(self) -> str:
        return pulumi.get(self, "api_token_name")

    @property
    @pulumi.getter(name="avatarUrl")
    def avatar_url(self) -> str:
        return pulumi.get(self, "avatar_url")

    @property
    @pulumi.getter(name="fullName")
    def full_name(self) -> str:
        return pulumi.get(self, "full_name")

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="subjectType")
    def subject_type(self) -> str:
        return pulumi.get(self, "subject_type")

    @property
    @pulumi.getter
    def username(self) -> str:
        return pulumi.get(self, "username")


@pulumi.output_type
class GetWorkspaceUpdatedByResult(dict):
    def __init__(__self__, *,
                 api_token_name: str,
                 avatar_url: str,
                 full_name: str,
                 id: str,
                 subject_type: str,
                 username: str):
        pulumi.set(__self__, "api_token_name", api_token_name)
        pulumi.set(__self__, "avatar_url", avatar_url)
        pulumi.set(__self__, "full_name", full_name)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "subject_type", subject_type)
        pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter(name="apiTokenName")
    def api_token_name(self) -> str:
        return pulumi.get(self, "api_token_name")

    @property
    @pulumi.getter(name="avatarUrl")
    def avatar_url(self) -> str:
        return pulumi.get(self, "avatar_url")

    @property
    @pulumi.getter(name="fullName")
    def full_name(self) -> str:
        return pulumi.get(self, "full_name")

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="subjectType")
    def subject_type(self) -> str:
        return pulumi.get(self, "subject_type")

    @property
    @pulumi.getter
    def username(self) -> str:
        return pulumi.get(self, "username")


@pulumi.output_type
class GetWorkspacesWorkspaceResult(dict):
    def __init__(__self__, *,
                 cicd_enforced_default: bool,
                 created_at: str,
                 created_by: 'outputs.GetWorkspacesWorkspaceCreatedByResult',
                 description: str,
                 id: str,
                 name: str,
                 updated_at: str,
                 updated_by: 'outputs.GetWorkspacesWorkspaceUpdatedByResult'):
        """
        :param bool cicd_enforced_default: Whether new Deployments enforce CI/CD deploys by default
        :param str created_at: Workspace creation timestamp
        :param 'GetWorkspacesWorkspaceCreatedByArgs' created_by: Workspace creator
        :param str description: Workspace description
        :param str id: Workspace identifier
        :param str name: Workspace name
        :param str updated_at: Workspace last updated timestamp
        :param 'GetWorkspacesWorkspaceUpdatedByArgs' updated_by: Workspace updater
        """
        pulumi.set(__self__, "cicd_enforced_default", cicd_enforced_default)
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "created_by", created_by)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "updated_at", updated_at)
        pulumi.set(__self__, "updated_by", updated_by)

    @property
    @pulumi.getter(name="cicdEnforcedDefault")
    def cicd_enforced_default(self) -> bool:
        """
        Whether new Deployments enforce CI/CD deploys by default
        """
        return pulumi.get(self, "cicd_enforced_default")

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> str:
        """
        Workspace creation timestamp
        """
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> 'outputs.GetWorkspacesWorkspaceCreatedByResult':
        """
        Workspace creator
        """
        return pulumi.get(self, "created_by")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        Workspace description
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Workspace identifier
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Workspace name
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> str:
        """
        Workspace last updated timestamp
        """
        return pulumi.get(self, "updated_at")

    @property
    @pulumi.getter(name="updatedBy")
    def updated_by(self) -> 'outputs.GetWorkspacesWorkspaceUpdatedByResult':
        """
        Workspace updater
        """
        return pulumi.get(self, "updated_by")


@pulumi.output_type
class GetWorkspacesWorkspaceCreatedByResult(dict):
    def __init__(__self__, *,
                 api_token_name: str,
                 avatar_url: str,
                 full_name: str,
                 id: str,
                 subject_type: str,
                 username: str):
        pulumi.set(__self__, "api_token_name", api_token_name)
        pulumi.set(__self__, "avatar_url", avatar_url)
        pulumi.set(__self__, "full_name", full_name)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "subject_type", subject_type)
        pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter(name="apiTokenName")
    def api_token_name(self) -> str:
        return pulumi.get(self, "api_token_name")

    @property
    @pulumi.getter(name="avatarUrl")
    def avatar_url(self) -> str:
        return pulumi.get(self, "avatar_url")

    @property
    @pulumi.getter(name="fullName")
    def full_name(self) -> str:
        return pulumi.get(self, "full_name")

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="subjectType")
    def subject_type(self) -> str:
        return pulumi.get(self, "subject_type")

    @property
    @pulumi.getter
    def username(self) -> str:
        return pulumi.get(self, "username")


@pulumi.output_type
class GetWorkspacesWorkspaceUpdatedByResult(dict):
    def __init__(__self__, *,
                 api_token_name: str,
                 avatar_url: str,
                 full_name: str,
                 id: str,
                 subject_type: str,
                 username: str):
        pulumi.set(__self__, "api_token_name", api_token_name)
        pulumi.set(__self__, "avatar_url", avatar_url)
        pulumi.set(__self__, "full_name", full_name)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "subject_type", subject_type)
        pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter(name="apiTokenName")
    def api_token_name(self) -> str:
        return pulumi.get(self, "api_token_name")

    @property
    @pulumi.getter(name="avatarUrl")
    def avatar_url(self) -> str:
        return pulumi.get(self, "avatar_url")

    @property
    @pulumi.getter(name="fullName")
    def full_name(self) -> str:
        return pulumi.get(self, "full_name")

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="subjectType")
    def subject_type(self) -> str:
        return pulumi.get(self, "subject_type")

    @property
    @pulumi.getter
    def username(self) -> str:
        return pulumi.get(self, "username")


