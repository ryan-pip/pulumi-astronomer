# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['TeamArgs', 'Team']

@pulumi.input_type
class TeamArgs:
    def __init__(__self__, *,
                 organization_role: pulumi.Input[str],
                 deployment_roles: Optional[pulumi.Input[Sequence[pulumi.Input['TeamDeploymentRoleArgs']]]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 member_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 workspace_roles: Optional[pulumi.Input[Sequence[pulumi.Input['TeamWorkspaceRoleArgs']]]] = None):
        """
        The set of arguments for constructing a Team resource.
        :param pulumi.Input[str] organization_role: The role to assign to the Organization
        :param pulumi.Input[Sequence[pulumi.Input['TeamDeploymentRoleArgs']]] deployment_roles: The roles to assign to the Deployments
        :param pulumi.Input[str] description: Team description
        :param pulumi.Input[Sequence[pulumi.Input[str]]] member_ids: The IDs of the users to add to the Team
        :param pulumi.Input[str] name: Team name
        :param pulumi.Input[Sequence[pulumi.Input['TeamWorkspaceRoleArgs']]] workspace_roles: The roles to assign to the Workspaces
        """
        pulumi.set(__self__, "organization_role", organization_role)
        if deployment_roles is not None:
            pulumi.set(__self__, "deployment_roles", deployment_roles)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if member_ids is not None:
            pulumi.set(__self__, "member_ids", member_ids)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if workspace_roles is not None:
            pulumi.set(__self__, "workspace_roles", workspace_roles)

    @property
    @pulumi.getter(name="organizationRole")
    def organization_role(self) -> pulumi.Input[str]:
        """
        The role to assign to the Organization
        """
        return pulumi.get(self, "organization_role")

    @organization_role.setter
    def organization_role(self, value: pulumi.Input[str]):
        pulumi.set(self, "organization_role", value)

    @property
    @pulumi.getter(name="deploymentRoles")
    def deployment_roles(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TeamDeploymentRoleArgs']]]]:
        """
        The roles to assign to the Deployments
        """
        return pulumi.get(self, "deployment_roles")

    @deployment_roles.setter
    def deployment_roles(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TeamDeploymentRoleArgs']]]]):
        pulumi.set(self, "deployment_roles", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Team description
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="memberIds")
    def member_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The IDs of the users to add to the Team
        """
        return pulumi.get(self, "member_ids")

    @member_ids.setter
    def member_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "member_ids", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Team name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="workspaceRoles")
    def workspace_roles(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TeamWorkspaceRoleArgs']]]]:
        """
        The roles to assign to the Workspaces
        """
        return pulumi.get(self, "workspace_roles")

    @workspace_roles.setter
    def workspace_roles(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TeamWorkspaceRoleArgs']]]]):
        pulumi.set(self, "workspace_roles", value)


@pulumi.input_type
class _TeamState:
    def __init__(__self__, *,
                 created_at: Optional[pulumi.Input[str]] = None,
                 created_by: Optional[pulumi.Input['TeamCreatedByArgs']] = None,
                 deployment_roles: Optional[pulumi.Input[Sequence[pulumi.Input['TeamDeploymentRoleArgs']]]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 is_idp_managed: Optional[pulumi.Input[bool]] = None,
                 member_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 organization_role: Optional[pulumi.Input[str]] = None,
                 roles_count: Optional[pulumi.Input[int]] = None,
                 updated_at: Optional[pulumi.Input[str]] = None,
                 updated_by: Optional[pulumi.Input['TeamUpdatedByArgs']] = None,
                 workspace_roles: Optional[pulumi.Input[Sequence[pulumi.Input['TeamWorkspaceRoleArgs']]]] = None):
        """
        Input properties used for looking up and filtering Team resources.
        :param pulumi.Input[str] created_at: Team creation timestamp
        :param pulumi.Input['TeamCreatedByArgs'] created_by: Team creator
        :param pulumi.Input[Sequence[pulumi.Input['TeamDeploymentRoleArgs']]] deployment_roles: The roles to assign to the Deployments
        :param pulumi.Input[str] description: Team description
        :param pulumi.Input[bool] is_idp_managed: Whether the Team is managed by an identity provider
        :param pulumi.Input[Sequence[pulumi.Input[str]]] member_ids: The IDs of the users to add to the Team
        :param pulumi.Input[str] name: Team name
        :param pulumi.Input[str] organization_role: The role to assign to the Organization
        :param pulumi.Input[int] roles_count: Number of roles assigned to the Team
        :param pulumi.Input[str] updated_at: Team last updated timestamp
        :param pulumi.Input['TeamUpdatedByArgs'] updated_by: Team updater
        :param pulumi.Input[Sequence[pulumi.Input['TeamWorkspaceRoleArgs']]] workspace_roles: The roles to assign to the Workspaces
        """
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if created_by is not None:
            pulumi.set(__self__, "created_by", created_by)
        if deployment_roles is not None:
            pulumi.set(__self__, "deployment_roles", deployment_roles)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if is_idp_managed is not None:
            pulumi.set(__self__, "is_idp_managed", is_idp_managed)
        if member_ids is not None:
            pulumi.set(__self__, "member_ids", member_ids)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if organization_role is not None:
            pulumi.set(__self__, "organization_role", organization_role)
        if roles_count is not None:
            pulumi.set(__self__, "roles_count", roles_count)
        if updated_at is not None:
            pulumi.set(__self__, "updated_at", updated_at)
        if updated_by is not None:
            pulumi.set(__self__, "updated_by", updated_by)
        if workspace_roles is not None:
            pulumi.set(__self__, "workspace_roles", workspace_roles)

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[pulumi.Input[str]]:
        """
        Team creation timestamp
        """
        return pulumi.get(self, "created_at")

    @created_at.setter
    def created_at(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "created_at", value)

    @property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> Optional[pulumi.Input['TeamCreatedByArgs']]:
        """
        Team creator
        """
        return pulumi.get(self, "created_by")

    @created_by.setter
    def created_by(self, value: Optional[pulumi.Input['TeamCreatedByArgs']]):
        pulumi.set(self, "created_by", value)

    @property
    @pulumi.getter(name="deploymentRoles")
    def deployment_roles(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TeamDeploymentRoleArgs']]]]:
        """
        The roles to assign to the Deployments
        """
        return pulumi.get(self, "deployment_roles")

    @deployment_roles.setter
    def deployment_roles(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TeamDeploymentRoleArgs']]]]):
        pulumi.set(self, "deployment_roles", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Team description
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="isIdpManaged")
    def is_idp_managed(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether the Team is managed by an identity provider
        """
        return pulumi.get(self, "is_idp_managed")

    @is_idp_managed.setter
    def is_idp_managed(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_idp_managed", value)

    @property
    @pulumi.getter(name="memberIds")
    def member_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The IDs of the users to add to the Team
        """
        return pulumi.get(self, "member_ids")

    @member_ids.setter
    def member_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "member_ids", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Team name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="organizationRole")
    def organization_role(self) -> Optional[pulumi.Input[str]]:
        """
        The role to assign to the Organization
        """
        return pulumi.get(self, "organization_role")

    @organization_role.setter
    def organization_role(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "organization_role", value)

    @property
    @pulumi.getter(name="rolesCount")
    def roles_count(self) -> Optional[pulumi.Input[int]]:
        """
        Number of roles assigned to the Team
        """
        return pulumi.get(self, "roles_count")

    @roles_count.setter
    def roles_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "roles_count", value)

    @property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> Optional[pulumi.Input[str]]:
        """
        Team last updated timestamp
        """
        return pulumi.get(self, "updated_at")

    @updated_at.setter
    def updated_at(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "updated_at", value)

    @property
    @pulumi.getter(name="updatedBy")
    def updated_by(self) -> Optional[pulumi.Input['TeamUpdatedByArgs']]:
        """
        Team updater
        """
        return pulumi.get(self, "updated_by")

    @updated_by.setter
    def updated_by(self, value: Optional[pulumi.Input['TeamUpdatedByArgs']]):
        pulumi.set(self, "updated_by", value)

    @property
    @pulumi.getter(name="workspaceRoles")
    def workspace_roles(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TeamWorkspaceRoleArgs']]]]:
        """
        The roles to assign to the Workspaces
        """
        return pulumi.get(self, "workspace_roles")

    @workspace_roles.setter
    def workspace_roles(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TeamWorkspaceRoleArgs']]]]):
        pulumi.set(self, "workspace_roles", value)


class Team(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 deployment_roles: Optional[pulumi.Input[Sequence[pulumi.Input[Union['TeamDeploymentRoleArgs', 'TeamDeploymentRoleArgsDict']]]]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 member_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 organization_role: Optional[pulumi.Input[str]] = None,
                 workspace_roles: Optional[pulumi.Input[Sequence[pulumi.Input[Union['TeamWorkspaceRoleArgs', 'TeamWorkspaceRoleArgsDict']]]]] = None,
                 __props__=None):
        """
        Team resource

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[Union['TeamDeploymentRoleArgs', 'TeamDeploymentRoleArgsDict']]]] deployment_roles: The roles to assign to the Deployments
        :param pulumi.Input[str] description: Team description
        :param pulumi.Input[Sequence[pulumi.Input[str]]] member_ids: The IDs of the users to add to the Team
        :param pulumi.Input[str] name: Team name
        :param pulumi.Input[str] organization_role: The role to assign to the Organization
        :param pulumi.Input[Sequence[pulumi.Input[Union['TeamWorkspaceRoleArgs', 'TeamWorkspaceRoleArgsDict']]]] workspace_roles: The roles to assign to the Workspaces
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: TeamArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Team resource

        :param str resource_name: The name of the resource.
        :param TeamArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(TeamArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 deployment_roles: Optional[pulumi.Input[Sequence[pulumi.Input[Union['TeamDeploymentRoleArgs', 'TeamDeploymentRoleArgsDict']]]]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 member_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 organization_role: Optional[pulumi.Input[str]] = None,
                 workspace_roles: Optional[pulumi.Input[Sequence[pulumi.Input[Union['TeamWorkspaceRoleArgs', 'TeamWorkspaceRoleArgsDict']]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = TeamArgs.__new__(TeamArgs)

            __props__.__dict__["deployment_roles"] = deployment_roles
            __props__.__dict__["description"] = description
            __props__.__dict__["member_ids"] = member_ids
            __props__.__dict__["name"] = name
            if organization_role is None and not opts.urn:
                raise TypeError("Missing required property 'organization_role'")
            __props__.__dict__["organization_role"] = organization_role
            __props__.__dict__["workspace_roles"] = workspace_roles
            __props__.__dict__["created_at"] = None
            __props__.__dict__["created_by"] = None
            __props__.__dict__["is_idp_managed"] = None
            __props__.__dict__["roles_count"] = None
            __props__.__dict__["updated_at"] = None
            __props__.__dict__["updated_by"] = None
        super(Team, __self__).__init__(
            'astronomer:index/team:Team',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            created_at: Optional[pulumi.Input[str]] = None,
            created_by: Optional[pulumi.Input[Union['TeamCreatedByArgs', 'TeamCreatedByArgsDict']]] = None,
            deployment_roles: Optional[pulumi.Input[Sequence[pulumi.Input[Union['TeamDeploymentRoleArgs', 'TeamDeploymentRoleArgsDict']]]]] = None,
            description: Optional[pulumi.Input[str]] = None,
            is_idp_managed: Optional[pulumi.Input[bool]] = None,
            member_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            name: Optional[pulumi.Input[str]] = None,
            organization_role: Optional[pulumi.Input[str]] = None,
            roles_count: Optional[pulumi.Input[int]] = None,
            updated_at: Optional[pulumi.Input[str]] = None,
            updated_by: Optional[pulumi.Input[Union['TeamUpdatedByArgs', 'TeamUpdatedByArgsDict']]] = None,
            workspace_roles: Optional[pulumi.Input[Sequence[pulumi.Input[Union['TeamWorkspaceRoleArgs', 'TeamWorkspaceRoleArgsDict']]]]] = None) -> 'Team':
        """
        Get an existing Team resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] created_at: Team creation timestamp
        :param pulumi.Input[Union['TeamCreatedByArgs', 'TeamCreatedByArgsDict']] created_by: Team creator
        :param pulumi.Input[Sequence[pulumi.Input[Union['TeamDeploymentRoleArgs', 'TeamDeploymentRoleArgsDict']]]] deployment_roles: The roles to assign to the Deployments
        :param pulumi.Input[str] description: Team description
        :param pulumi.Input[bool] is_idp_managed: Whether the Team is managed by an identity provider
        :param pulumi.Input[Sequence[pulumi.Input[str]]] member_ids: The IDs of the users to add to the Team
        :param pulumi.Input[str] name: Team name
        :param pulumi.Input[str] organization_role: The role to assign to the Organization
        :param pulumi.Input[int] roles_count: Number of roles assigned to the Team
        :param pulumi.Input[str] updated_at: Team last updated timestamp
        :param pulumi.Input[Union['TeamUpdatedByArgs', 'TeamUpdatedByArgsDict']] updated_by: Team updater
        :param pulumi.Input[Sequence[pulumi.Input[Union['TeamWorkspaceRoleArgs', 'TeamWorkspaceRoleArgsDict']]]] workspace_roles: The roles to assign to the Workspaces
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _TeamState.__new__(_TeamState)

        __props__.__dict__["created_at"] = created_at
        __props__.__dict__["created_by"] = created_by
        __props__.__dict__["deployment_roles"] = deployment_roles
        __props__.__dict__["description"] = description
        __props__.__dict__["is_idp_managed"] = is_idp_managed
        __props__.__dict__["member_ids"] = member_ids
        __props__.__dict__["name"] = name
        __props__.__dict__["organization_role"] = organization_role
        __props__.__dict__["roles_count"] = roles_count
        __props__.__dict__["updated_at"] = updated_at
        __props__.__dict__["updated_by"] = updated_by
        __props__.__dict__["workspace_roles"] = workspace_roles
        return Team(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> pulumi.Output[str]:
        """
        Team creation timestamp
        """
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> pulumi.Output['outputs.TeamCreatedBy']:
        """
        Team creator
        """
        return pulumi.get(self, "created_by")

    @property
    @pulumi.getter(name="deploymentRoles")
    def deployment_roles(self) -> pulumi.Output[Optional[Sequence['outputs.TeamDeploymentRole']]]:
        """
        The roles to assign to the Deployments
        """
        return pulumi.get(self, "deployment_roles")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        """
        Team description
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="isIdpManaged")
    def is_idp_managed(self) -> pulumi.Output[bool]:
        """
        Whether the Team is managed by an identity provider
        """
        return pulumi.get(self, "is_idp_managed")

    @property
    @pulumi.getter(name="memberIds")
    def member_ids(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        The IDs of the users to add to the Team
        """
        return pulumi.get(self, "member_ids")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Team name
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="organizationRole")
    def organization_role(self) -> pulumi.Output[str]:
        """
        The role to assign to the Organization
        """
        return pulumi.get(self, "organization_role")

    @property
    @pulumi.getter(name="rolesCount")
    def roles_count(self) -> pulumi.Output[int]:
        """
        Number of roles assigned to the Team
        """
        return pulumi.get(self, "roles_count")

    @property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> pulumi.Output[str]:
        """
        Team last updated timestamp
        """
        return pulumi.get(self, "updated_at")

    @property
    @pulumi.getter(name="updatedBy")
    def updated_by(self) -> pulumi.Output['outputs.TeamUpdatedBy']:
        """
        Team updater
        """
        return pulumi.get(self, "updated_by")

    @property
    @pulumi.getter(name="workspaceRoles")
    def workspace_roles(self) -> pulumi.Output[Optional[Sequence['outputs.TeamWorkspaceRole']]]:
        """
        The roles to assign to the Workspaces
        """
        return pulumi.get(self, "workspace_roles")

