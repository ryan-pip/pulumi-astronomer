# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['UserInviteArgs', 'UserInvite']

@pulumi.input_type
class UserInviteArgs:
    def __init__(__self__, *,
                 email: pulumi.Input[str],
                 role: pulumi.Input[str]):
        """
        The set of arguments for constructing a UserInvite resource.
        :param pulumi.Input[str] email: The email address of the user being invited
        :param pulumi.Input[str] role: The Organization role to assign to the user
        """
        pulumi.set(__self__, "email", email)
        pulumi.set(__self__, "role", role)

    @property
    @pulumi.getter
    def email(self) -> pulumi.Input[str]:
        """
        The email address of the user being invited
        """
        return pulumi.get(self, "email")

    @email.setter
    def email(self, value: pulumi.Input[str]):
        pulumi.set(self, "email", value)

    @property
    @pulumi.getter
    def role(self) -> pulumi.Input[str]:
        """
        The Organization role to assign to the user
        """
        return pulumi.get(self, "role")

    @role.setter
    def role(self, value: pulumi.Input[str]):
        pulumi.set(self, "role", value)


@pulumi.input_type
class _UserInviteState:
    def __init__(__self__, *,
                 email: Optional[pulumi.Input[str]] = None,
                 expires_at: Optional[pulumi.Input[str]] = None,
                 invite_id: Optional[pulumi.Input[str]] = None,
                 invitee: Optional[pulumi.Input['UserInviteInviteeArgs']] = None,
                 inviter: Optional[pulumi.Input['UserInviteInviterArgs']] = None,
                 role: Optional[pulumi.Input[str]] = None,
                 user_id: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering UserInvite resources.
        :param pulumi.Input[str] email: The email address of the user being invited
        :param pulumi.Input[str] expires_at: The expiration date of the invite
        :param pulumi.Input[str] invite_id: The ID of the invite
        :param pulumi.Input['UserInviteInviteeArgs'] invitee: The profile of the invitee
        :param pulumi.Input['UserInviteInviterArgs'] inviter: The profile of the inviter
        :param pulumi.Input[str] role: The Organization role to assign to the user
        :param pulumi.Input[str] user_id: The ID of the user
        """
        if email is not None:
            pulumi.set(__self__, "email", email)
        if expires_at is not None:
            pulumi.set(__self__, "expires_at", expires_at)
        if invite_id is not None:
            pulumi.set(__self__, "invite_id", invite_id)
        if invitee is not None:
            pulumi.set(__self__, "invitee", invitee)
        if inviter is not None:
            pulumi.set(__self__, "inviter", inviter)
        if role is not None:
            pulumi.set(__self__, "role", role)
        if user_id is not None:
            pulumi.set(__self__, "user_id", user_id)

    @property
    @pulumi.getter
    def email(self) -> Optional[pulumi.Input[str]]:
        """
        The email address of the user being invited
        """
        return pulumi.get(self, "email")

    @email.setter
    def email(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "email", value)

    @property
    @pulumi.getter(name="expiresAt")
    def expires_at(self) -> Optional[pulumi.Input[str]]:
        """
        The expiration date of the invite
        """
        return pulumi.get(self, "expires_at")

    @expires_at.setter
    def expires_at(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "expires_at", value)

    @property
    @pulumi.getter(name="inviteId")
    def invite_id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of the invite
        """
        return pulumi.get(self, "invite_id")

    @invite_id.setter
    def invite_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "invite_id", value)

    @property
    @pulumi.getter
    def invitee(self) -> Optional[pulumi.Input['UserInviteInviteeArgs']]:
        """
        The profile of the invitee
        """
        return pulumi.get(self, "invitee")

    @invitee.setter
    def invitee(self, value: Optional[pulumi.Input['UserInviteInviteeArgs']]):
        pulumi.set(self, "invitee", value)

    @property
    @pulumi.getter
    def inviter(self) -> Optional[pulumi.Input['UserInviteInviterArgs']]:
        """
        The profile of the inviter
        """
        return pulumi.get(self, "inviter")

    @inviter.setter
    def inviter(self, value: Optional[pulumi.Input['UserInviteInviterArgs']]):
        pulumi.set(self, "inviter", value)

    @property
    @pulumi.getter
    def role(self) -> Optional[pulumi.Input[str]]:
        """
        The Organization role to assign to the user
        """
        return pulumi.get(self, "role")

    @role.setter
    def role(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "role", value)

    @property
    @pulumi.getter(name="userId")
    def user_id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of the user
        """
        return pulumi.get(self, "user_id")

    @user_id.setter
    def user_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_id", value)


class UserInvite(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 email: Optional[pulumi.Input[str]] = None,
                 role: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        User Invite resource

        ## Example Usage

        ```python
        import pulumi
        import pulumi_astronomer as astronomer

        user_invite = astronomer.UserInvite("userInvite",
            email="email@organization.com",
            role="ORGANIZATION_MEMBER")
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] email: The email address of the user being invited
        :param pulumi.Input[str] role: The Organization role to assign to the user
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: UserInviteArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        User Invite resource

        ## Example Usage

        ```python
        import pulumi
        import pulumi_astronomer as astronomer

        user_invite = astronomer.UserInvite("userInvite",
            email="email@organization.com",
            role="ORGANIZATION_MEMBER")
        ```

        :param str resource_name: The name of the resource.
        :param UserInviteArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(UserInviteArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 email: Optional[pulumi.Input[str]] = None,
                 role: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = UserInviteArgs.__new__(UserInviteArgs)

            if email is None and not opts.urn:
                raise TypeError("Missing required property 'email'")
            __props__.__dict__["email"] = email
            if role is None and not opts.urn:
                raise TypeError("Missing required property 'role'")
            __props__.__dict__["role"] = role
            __props__.__dict__["expires_at"] = None
            __props__.__dict__["invite_id"] = None
            __props__.__dict__["invitee"] = None
            __props__.__dict__["inviter"] = None
            __props__.__dict__["user_id"] = None
        super(UserInvite, __self__).__init__(
            'astronomer:index/userInvite:UserInvite',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            email: Optional[pulumi.Input[str]] = None,
            expires_at: Optional[pulumi.Input[str]] = None,
            invite_id: Optional[pulumi.Input[str]] = None,
            invitee: Optional[pulumi.Input[Union['UserInviteInviteeArgs', 'UserInviteInviteeArgsDict']]] = None,
            inviter: Optional[pulumi.Input[Union['UserInviteInviterArgs', 'UserInviteInviterArgsDict']]] = None,
            role: Optional[pulumi.Input[str]] = None,
            user_id: Optional[pulumi.Input[str]] = None) -> 'UserInvite':
        """
        Get an existing UserInvite resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] email: The email address of the user being invited
        :param pulumi.Input[str] expires_at: The expiration date of the invite
        :param pulumi.Input[str] invite_id: The ID of the invite
        :param pulumi.Input[Union['UserInviteInviteeArgs', 'UserInviteInviteeArgsDict']] invitee: The profile of the invitee
        :param pulumi.Input[Union['UserInviteInviterArgs', 'UserInviteInviterArgsDict']] inviter: The profile of the inviter
        :param pulumi.Input[str] role: The Organization role to assign to the user
        :param pulumi.Input[str] user_id: The ID of the user
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _UserInviteState.__new__(_UserInviteState)

        __props__.__dict__["email"] = email
        __props__.__dict__["expires_at"] = expires_at
        __props__.__dict__["invite_id"] = invite_id
        __props__.__dict__["invitee"] = invitee
        __props__.__dict__["inviter"] = inviter
        __props__.__dict__["role"] = role
        __props__.__dict__["user_id"] = user_id
        return UserInvite(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def email(self) -> pulumi.Output[str]:
        """
        The email address of the user being invited
        """
        return pulumi.get(self, "email")

    @property
    @pulumi.getter(name="expiresAt")
    def expires_at(self) -> pulumi.Output[str]:
        """
        The expiration date of the invite
        """
        return pulumi.get(self, "expires_at")

    @property
    @pulumi.getter(name="inviteId")
    def invite_id(self) -> pulumi.Output[str]:
        """
        The ID of the invite
        """
        return pulumi.get(self, "invite_id")

    @property
    @pulumi.getter
    def invitee(self) -> pulumi.Output['outputs.UserInviteInvitee']:
        """
        The profile of the invitee
        """
        return pulumi.get(self, "invitee")

    @property
    @pulumi.getter
    def inviter(self) -> pulumi.Output['outputs.UserInviteInviter']:
        """
        The profile of the inviter
        """
        return pulumi.get(self, "inviter")

    @property
    @pulumi.getter
    def role(self) -> pulumi.Output[str]:
        """
        The Organization role to assign to the user
        """
        return pulumi.get(self, "role")

    @property
    @pulumi.getter(name="userId")
    def user_id(self) -> pulumi.Output[str]:
        """
        The ID of the user
        """
        return pulumi.get(self, "user_id")

