# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['WorkspaceArgs', 'Workspace']

@pulumi.input_type
class WorkspaceArgs:
    def __init__(__self__, *,
                 cicd_enforced_default: Optional[pulumi.Input[bool]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Workspace resource.
        :param pulumi.Input[bool] cicd_enforced_default: Whether new Deployments enforce CI/CD deploys by default.
        :param pulumi.Input[str] description: The Workspace's description.
        :param pulumi.Input[str] name: The Workspace's name.
        """
        if cicd_enforced_default is not None:
            pulumi.set(__self__, "cicd_enforced_default", cicd_enforced_default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="cicdEnforcedDefault")
    def cicd_enforced_default(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether new Deployments enforce CI/CD deploys by default.
        """
        return pulumi.get(self, "cicd_enforced_default")

    @cicd_enforced_default.setter
    def cicd_enforced_default(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "cicd_enforced_default", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        The Workspace's description.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The Workspace's name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class _WorkspaceState:
    def __init__(__self__, *,
                 cicd_enforced_default: Optional[pulumi.Input[bool]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Workspace resources.
        :param pulumi.Input[bool] cicd_enforced_default: Whether new Deployments enforce CI/CD deploys by default.
        :param pulumi.Input[str] description: The Workspace's description.
        :param pulumi.Input[str] name: The Workspace's name.
        """
        if cicd_enforced_default is not None:
            pulumi.set(__self__, "cicd_enforced_default", cicd_enforced_default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="cicdEnforcedDefault")
    def cicd_enforced_default(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether new Deployments enforce CI/CD deploys by default.
        """
        return pulumi.get(self, "cicd_enforced_default")

    @cicd_enforced_default.setter
    def cicd_enforced_default(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "cicd_enforced_default", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        The Workspace's description.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The Workspace's name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


class Workspace(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cicd_enforced_default: Optional[pulumi.Input[bool]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Astronomer Workspace Resource

        ## Example Usage

        ```python
        import pulumi
        import pulumi_astronomer as astronomer

        complete_setup = astronomer.Workspace("completeSetup",
            cicd_enforced_default=True,
            description="Testing Workspace")
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] cicd_enforced_default: Whether new Deployments enforce CI/CD deploys by default.
        :param pulumi.Input[str] description: The Workspace's description.
        :param pulumi.Input[str] name: The Workspace's name.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[WorkspaceArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Astronomer Workspace Resource

        ## Example Usage

        ```python
        import pulumi
        import pulumi_astronomer as astronomer

        complete_setup = astronomer.Workspace("completeSetup",
            cicd_enforced_default=True,
            description="Testing Workspace")
        ```

        :param str resource_name: The name of the resource.
        :param WorkspaceArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(WorkspaceArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cicd_enforced_default: Optional[pulumi.Input[bool]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = WorkspaceArgs.__new__(WorkspaceArgs)

            __props__.__dict__["cicd_enforced_default"] = cicd_enforced_default
            __props__.__dict__["description"] = description
            __props__.__dict__["name"] = name
        super(Workspace, __self__).__init__(
            'astronomer:index/workspace:Workspace',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            cicd_enforced_default: Optional[pulumi.Input[bool]] = None,
            description: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None) -> 'Workspace':
        """
        Get an existing Workspace resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] cicd_enforced_default: Whether new Deployments enforce CI/CD deploys by default.
        :param pulumi.Input[str] description: The Workspace's description.
        :param pulumi.Input[str] name: The Workspace's name.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _WorkspaceState.__new__(_WorkspaceState)

        __props__.__dict__["cicd_enforced_default"] = cicd_enforced_default
        __props__.__dict__["description"] = description
        __props__.__dict__["name"] = name
        return Workspace(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="cicdEnforcedDefault")
    def cicd_enforced_default(self) -> pulumi.Output[Optional[bool]]:
        """
        Whether new Deployments enforce CI/CD deploys by default.
        """
        return pulumi.get(self, "cicd_enforced_default")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        """
        The Workspace's description.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        The Workspace's name.
        """
        return pulumi.get(self, "name")

